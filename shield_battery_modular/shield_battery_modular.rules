OVERCLOCK
{
	HEAT_PER_SECOND = 10
	HEAT_PER_DAMAGE = 0.01
	CAPACITY_FACTOR = 200%
	ARC_RADIUS_FACTOR = 150%
	POWER_DRAIN_FACTOR = 200%
}
HEAT_TO_RESOURCE = &<./Data/statuses/heat/heat.rules>/STATUS_TO_RESOURCE_RATIO
HEAT_TO_STATUS = &<./Data/statuses/heat/heat.rules>/RESOURCE_TO_STATUS_RATIO
STATS
{
	POWER_DRAIN = 50	// Total
	POWER_CAPACITY = 2000	// Total
}

Part : <./Data/ships/terran/base_part_terran_overclock.rules>/Part
{
	NameKey = "Parts/KebechetTINYmodularShield"
	IconNameKey = "Parts/KebechetTINYmodularShieldIcon"
	DescriptionKey = "Parts/KebechetTINYmodularShieldDesc"
	ID = enderluck.ModularShieldBattery
	EditorGroup = "Defenses"
	EditorParentParts = [ "swefpifh.Kebechet_STS_modularShield", "swefpifh.Kebechet_STL_modularShield" ] 
	Resources
	[
		[steel, 12]
		[coil, 12]
	]
	AIValueFactor = 5
	Size = [2, 1]
	PhysicalRect = [0, 0, 2, 1] // [Left, Top, Width, Height]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeID = "shield_gen_tiny"
	SelectionTypeByRotation = true
	MaxHealth = 4000
	TypeCategories = [defense, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [BubbleCapacity, BubbleCapacityReversed, BubbleResistanceBonus, BubbleRadiusBonus]
	PenetrationRectType = Normal
	// ProhibitLeft = 0
	// ProhibitRight = 0
	// ProhibitAbove = 0
	// ProhibitBelow = 0
//	InitialPenetrationResistance = 0
	AllowedDoorLocations
	[
		[0, 1]
		[1, 1]
	]

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{

		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		ToggleColour
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleColour_Purple
		{
			Type = ModeToggle
			Mode = ToggleColour
			OnMode = 0
		}

		ToggleColour_Blue :		ToggleColour_Purple	{ OnMode = 1 }
		ToggleColour_Orange :	ToggleColour_Purple	{ OnMode = 2 }
		ToggleColour_Red :		ToggleColour_Purple	{ OnMode = 3 }
		ToggleColour_Yellow :	ToggleColour_Purple	{ OnMode = 4 }
		ToggleColour_Green :	ToggleColour_Purple	{ OnMode = 5 }

		// -----------------------------------------------
		// PROXY -----------------------------------------
		// -----------------------------------------------
		
		Kebechet_TINY_ColoursProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_TINY_ColoursSet
		}
		Kebechet_TINY_ColoursSet
		{
			Type = MultiToggle
			Toggles = [ToggleColour_Purple, ToggleColour_Blue, ToggleColour_Orange, ToggleColour_Red, ToggleColour_Yellow, ToggleColour_Green]
			Mode = Any
		}

		// --------------------------------- END TOGGLES
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL ]
			Mode = All
		}
		
		CanOperate
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL]
			Mode = All
		}
		CanOperateProxy
		{
			Type = ToggleProxy
			ComponentID = CanOperate
		}

		CommandConsumptionToggle
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		ScorchedToggle
		{
			Type = StatusToggle
			StatusType = cosmoteer.scorched
			MinStatusValue = 1
			Invert = true
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = CommandConsumptionToggle
			CommandPoints = 1
		}
		
		// Start Modular Shield Connection
		
		IsShieldConnected_Right
		{
			Type = ToggleProxy
			PartLocation = [3, 0]
			ProxyableComponents
			[
				{
					PartCriteria
					{
						Category = bubble_shield
					}
					ComponentID = PowerToggle	// Maybe another type of component would have been better such as ComponentPresenceToggleRules or a DistanceThreshold
				}
				{
					PartCriteria
					{
						ID = enderluck.ModularShieldBattery
						Rot = 0
					}
					ComponentID = IsShieldConnected_Right
				}
				{
					PartCriteria
					{
						ID = enderluck.ModularShieldBattery
						Rot = 2
					}
					ComponentID = IsShieldConnected_Left
				}
			]
		}
		
		IsShieldConnected_RightInverted
		{
			Type = MultiToggle
			Toggles = [ IsShieldConnected_Right ]
			Invert = true
			Mode = Any
		}
		IsShieldConnected_RightInvertedProxy
		{
			Type = ToggleProxy
			ComponentID = IsShieldConnected_RightInverted
		}
		
		IsShieldConnected_Left : IsShieldConnected_Right
		{
			ToggleProxy = IsShieldConnected_RightInvertedProxy
			PartLocation = [-1, 0]
			ProxyableComponents
			[
				: ../^/0/ProxyableComponents/0	{}
				: ../^/0/ProxyableComponents/1	{ ComponentID = IsShieldConnected_Left }
				: ../^/0/ProxyableComponents/2	{ ComponentID = IsShieldConnected_Right }
			]
		}

		BuffProvider_BubbleCapacityRight
		{
			Type = AreaBuffProvider
			OperationalToggle = IsShieldConnected_Left
			BuffType = BubbleCapacity
			BuffArea = [2, 0, 2, 1]
			Criteria
			{
				Left = 2
				Right = 4
			}
		}
		BuffProvider_BubbleCapacityLeft:	BuffProvider_BubbleCapacityRight
		{
			OperationalToggle = IsShieldConnected_Right
			BuffArea = [-2, 0, 2, 1]
			Criteria
			{
				Left = -2
				Right = 0
			}
		}
		
		BuffProvider_BubbleCapacityReversedRight
		{
			Type = AreaBuffProvider
			OperationalToggle = IsShieldConnected_Right
			BuffType = BubbleCapacityReversed
			BuffArea = [2, 0, 2, 1]
		}
		BuffProvider_BubbleCapacityReversedLeft :	BuffProvider_BubbleCapacityReversedRight
		{
			OperationalToggle = IsShieldConnected_Left
			BuffType = BubbleCapacityReversed
			BuffArea = [-2, 0, 2, 1]
		}
		
		// Start Battery
		
		Base_BatteryStorage_1
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = "round( (&~/STATS/POWER_CAPACITY) / 12, 0)"
			DrainOnFtlJump = true
			IsDrainable = False
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		Base_BatteryStorage_2 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_3 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_4 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_5 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_6 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_7 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_8 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_9 :		Base_BatteryStorage_1	{}
		Base_BatteryStorage_10 :	Base_BatteryStorage_1	{}
		Base_BatteryStorage_11 :	Base_BatteryStorage_1	{}
		Base_BatteryStorage_12 :	Base_BatteryStorage_1	{}
		
		Overclock_ToggledBatteryStorage
		{
			Type = ToggledComponents
			Toggle = IsOverclocked
			Components
			{
				Overclock_BatteryStorage_1
				{
					Type = ResourceStorage
					ResourceType = battery
					MaxResources = "ceil((&~/Part/Components/Base_BatteryStorage_1/MaxResources) * ((&~/OVERCLOCK/CAPACITY_FACTOR) - 1))"
					IsDrainable = False
				}
				Overclock_BatteryStorage_2 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_3 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_4 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_5 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_6 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_7 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_8 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_9 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_10 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_11 :	Overclock_BatteryStorage_1	{}
				Overclock_BatteryStorage_12 :	Overclock_BatteryStorage_1	{}
			}
		}
		
		Overclock_BatteryStorageProxy_1
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			ProxyToggle = IsOverclocked
			ComponentID = Overclock_BatteryStorage_1
		}
		Overclock_BatteryStorageProxy_2 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_2 }
		Overclock_BatteryStorageProxy_3 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_3 }
		Overclock_BatteryStorageProxy_4 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_4 }
		Overclock_BatteryStorageProxy_5 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_5 }
		Overclock_BatteryStorageProxy_6 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_6 }
		Overclock_BatteryStorageProxy_7 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_7 }
		Overclock_BatteryStorageProxy_8 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_8 }
		Overclock_BatteryStorageProxy_9 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_9 }
		Overclock_BatteryStorageProxy_10 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_10 }
		Overclock_BatteryStorageProxy_11 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_11 }
		Overclock_BatteryStorageProxy_12 :	Overclock_BatteryStorageProxy_1	{ ComponentID = Overclock_BatteryStorage_12 }
		
		CombinedBase_BatteryStorage_SmallFront
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = false
			ResourceStorages = [Base_BatteryStorage_1, Base_BatteryStorage_2, Base_BatteryStorage_3]
			AddMode = DistributeEvenly
			RemoveMode = DistributeEvenly
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		CombinedBase_BatteryStorage_SmallRight :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_4, Base_BatteryStorage_5, Base_BatteryStorage_6] }
		CombinedBase_BatteryStorage_SmallBack :			CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_7, Base_BatteryStorage_8, Base_BatteryStorage_9] }
		CombinedBase_BatteryStorage_SmallLeft :			CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_10, Base_BatteryStorage_11, Base_BatteryStorage_12] }
		CombinedBase_BatteryStorage_LargeFront :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_1, Base_BatteryStorage_2] }
		CombinedBase_BatteryStorage_LargeFrontRight :	CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_3, Base_BatteryStorage_4] }
		CombinedBase_BatteryStorage_LargeBackRight :	CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_5, Base_BatteryStorage_6] }
		CombinedBase_BatteryStorage_LargeBack :			CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_7, Base_BatteryStorage_8] }
		CombinedBase_BatteryStorage_LargeBackLeft :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_9, Base_BatteryStorage_10] }
		CombinedBase_BatteryStorage_LargeFrontLeft :	CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Base_BatteryStorage_11, Base_BatteryStorage_12] }
		
		CombinedOverclock_BatteryStorage_SmallFront	:		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_1, Overclock_BatteryStorageProxy_2, Overclock_BatteryStorageProxy_3] }
		CombinedOverclock_BatteryStorage_SmallRight :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_4, Overclock_BatteryStorageProxy_5, Overclock_BatteryStorageProxy_6] }
		CombinedOverclock_BatteryStorage_SmallBack :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_7, Overclock_BatteryStorageProxy_8, Overclock_BatteryStorageProxy_9] }
		CombinedOverclock_BatteryStorage_SmallLeft :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_10, Overclock_BatteryStorageProxy_11, Overclock_BatteryStorageProxy_12] }
		CombinedOverclock_BatteryStorage_LargeFront :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_1, Overclock_BatteryStorageProxy_2] }
		CombinedOverclock_BatteryStorage_LargeFrontRight :	CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_3, Overclock_BatteryStorageProxy_4] }
		CombinedOverclock_BatteryStorage_LargeBackRight :	CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_5, Overclock_BatteryStorageProxy_6] }
		CombinedOverclock_BatteryStorage_LargeBack :		CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_7, Overclock_BatteryStorageProxy_8] }
		CombinedOverclock_BatteryStorage_LargeBackLeft :	CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_9, Overclock_BatteryStorageProxy_10] }
		CombinedOverclock_BatteryStorage_LargeFrontLeft :	CombinedBase_BatteryStorage_SmallFront	{ ResourceStorages = [Overclock_BatteryStorageProxy_11, Overclock_BatteryStorageProxy_12] }
		
		CombinedBatteryStorage_SmallFront
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = false
			ResourceStorages = [CombinedBase_BatteryStorage_SmallFront, CombinedOverclock_BatteryStorage_SmallFront]
			AddMode = InOrder
			RemoveMode = InReverseOrder
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		CombinedBatteryStorage_SmallRight :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_SmallRight, CombinedOverclock_BatteryStorage_SmallRight] }
		CombinedBatteryStorage_SmallBack :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_SmallBack, CombinedOverclock_BatteryStorage_SmallBack] }
		CombinedBatteryStorage_SmallLeft :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_SmallLeft, CombinedOverclock_BatteryStorage_SmallLeft] }
		CombinedBatteryStorage_LargeFront :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_LargeFront, CombinedOverclock_BatteryStorage_LargeFront] }
		CombinedBatteryStorage_LargeFrontRight :	CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_LargeFrontRight, CombinedOverclock_BatteryStorage_LargeFrontRight] }
		CombinedBatteryStorage_LargeBackRight :		CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_LargeBackRight, CombinedOverclock_BatteryStorage_LargeBackRight] }
		CombinedBatteryStorage_LargeBack :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_LargeBack, CombinedOverclock_BatteryStorage_LargeBack] }
		CombinedBatteryStorage_LargeBackLeft :		CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_LargeBackLeft, CombinedOverclock_BatteryStorage_LargeBackLeft] }
		CombinedBatteryStorage_LargeFrontLeft :		CombinedBatteryStorage_SmallFront	{ ResourceStorages = [CombinedBase_BatteryStorage_LargeFrontLeft, CombinedOverclock_BatteryStorage_LargeFrontLeft] }
		
		CombinedBaseBatteryStorage
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = false
			ResourceStorages = [Base_BatteryStorage_1, Base_BatteryStorage_2, Base_BatteryStorage_3, Base_BatteryStorage_4, Base_BatteryStorage_5, Base_BatteryStorage_6, Base_BatteryStorage_7, Base_BatteryStorage_8, Base_BatteryStorage_9, Base_BatteryStorage_10, Base_BatteryStorage_11, Base_BatteryStorage_12]
			AddMode = DistributeEvenly
			RemoveMode = DistributeEvenly
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		CombinedOverclockBatteryStorage :	CombinedBaseBatteryStorage	{ ResourceStorages = [Overclock_BatteryStorageProxy_1, Overclock_BatteryStorageProxy_2, Overclock_BatteryStorageProxy_3, Overclock_BatteryStorageProxy_4, Overclock_BatteryStorageProxy_5, Overclock_BatteryStorageProxy_6, Overclock_BatteryStorageProxy_7, Overclock_BatteryStorageProxy_8, Overclock_BatteryStorageProxy_9, Overclock_BatteryStorageProxy_10, Overclock_BatteryStorageProxy_11, Overclock_BatteryStorageProxy_12] }
		
		BatteryStorage	// CombinedBatteryStorage // Named like this for easier compatibility with other mods 
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = true
			ResourceStorages = [CombinedBaseBatteryStorage, CombinedOverclockBatteryStorage]
			AddMode = InOrder
			RemoveMode = InReverseOrder
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		ModularBatteryStorage_SmallFront
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = true
			ResourceStorages = [CombinedBatteryStorage_SmallFront]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityRight, BuffProvider_BubbleCapacityLeft]
				ComponentID = BatteryStorageProxy_SmallFront
			}
			RemoveMode = InReverseOrder
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		ModularBatteryStorage_SmallRight :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_SmallRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_2 }
		}
		ModularBatteryStorage_SmallBack :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_SmallBack]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallBack }
		}
		ModularBatteryStorage_SmallLeft :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_SmallLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallLeft }
		}
		ModularBatteryStorage_LargeFront :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeFront]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFront }
		}
		ModularBatteryStorage_LargeFrontRight :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeFrontRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFrontRight }
		}
		ModularBatteryStorage_LargeBackRight :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeBackRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBackRight }
		}
		ModularBatteryStorage_LargeBack :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeBack]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBack }
		}
		ModularBatteryStorage_LargeBackLeft :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeBackLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBackLeft }
		}
		ModularBatteryStorage_LargeFrontLeft :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeFrontLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFrontLeft }
		}
		
		BatteryStorageProxy_SmallFront	// For Modular, to prevent using it while disabled
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			ComponentID = ModularBatteryStorage_SmallFront
			ProxyToggle = CanOperateProxy
		}
		BatteryStorageProxy_SmallRight :		BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_SmallRight }
		BatteryStorageProxy_SmallBack :			BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_SmallBack }
		BatteryStorageProxy_SmallLeft :			BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_SmallLeft }
		BatteryStorageProxy_LargeFront :		BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeFront }
		BatteryStorageProxy_LargeFrontRight :	BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeFrontRight }
		BatteryStorageProxy_LargeBackRight :	BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeBackRight }
		BatteryStorageProxy_LargeBack :			BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeBack }
		BatteryStorageProxy_LargeBackLeft :		BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeBackLeft }
		BatteryStorageProxy_LargeFrontLeft :	BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeFrontLeft }
		
		// Start Power Drain
		
		IsOperational_BubbleSmallFront
		{
			Type = MultiToggle
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [ IsOperationalProxy_BubbleSmallFront, IsOperational_SmallFront ]
			}
			Mode = Any
		}
		IsOperational_BubbleSmallRight :		IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleSmallRight, IsOperational_SmallRight ] }
		}
		IsOperational_BubbleSmallBack :			IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleSmallBack, IsOperational_SmallBack ] }
		}
		IsOperational_BubbleSmallLeft :			IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleSmallLeft, IsOperational_SmallLeft ] }
		}
		IsOperational_BubbleLargeFront :		IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeFront, IsOperational_LargeFront ] }
		}
		IsOperational_BubbleLargeFrontRight :	IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeFrontRight, IsOperational_LargeFrontRight ] }
		}
		IsOperational_BubbleLargeBackRight :	IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeBackRight, IsOperational_LargeBackRight ] }
		}
		IsOperational_BubbleLargeBack :			IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeBack, IsOperational_LargeBack ] }
		}
		IsOperational_BubbleLargeBackLeft :		IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeBackLeft, IsOperational_LargeBackLeft ] }
		}
		IsOperational_BubbleLargeFrontLeft :	IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeFrontLeft, IsOperational_LargeFrontLeft ] }
		}
		
		IsOperationalProxy_BubbleSmallFront	// For Modular, to prevent using it while disabled
		{
			Type = ToggleProxy
			ComponentID = IsOperational_BubbleSmallFront
			ProxyToggle = CanOperateProxy
		}
		IsOperationalProxy_BubbleSmallRight :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleSmallRight }
		IsOperationalProxy_BubbleSmallBack :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleSmallBack }
		IsOperationalProxy_BubbleSmallLeft :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleSmallLeft }
		IsOperationalProxy_BubbleLargeFront :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeFront }
		IsOperationalProxy_BubbleLargeFrontRight :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeFrontRight }
		IsOperationalProxy_BubbleLargeBackRight :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeBackRight }
		IsOperationalProxy_BubbleLargeBack :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeBack }
		IsOperationalProxy_BubbleLargeBackLeft :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeBackLeft }
		IsOperationalProxy_BubbleLargeFrontLeft :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeFrontLeft }
		
		PowerDrain_SmallFront
		{
			Type = ResourceConverter
			OperationalToggle = IsOperationalProxy_BubbleSmallFront
			FromStorage = CombinedBatteryStorage_SmallFront
			FromQuantity = "round( (&~/STATS/POWER_DRAIN) / 4, 0)"
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		PowerDrain_SmallRight :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleSmallRight
			FromStorage = CombinedBatteryStorage_SmallRight
		}
		PowerDrain_SmallBack :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleSmallBack
			FromStorage = CombinedBatteryStorage_SmallBack
		}
		PowerDrain_SmallLeft :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleSmallLeft
			FromStorage = CombinedBatteryStorage_SmallLeft
		}
		PowerDrain_LargeFront :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeFront
			FromStorage = CombinedBatteryStorage_LargeFront
			FromQuantity = "round( (&~/STATS/POWER_DRAIN) / 6, 0)"
		}
		PowerDrain_LargeFrontRight :	PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeFrontRight
			FromStorage = CombinedBatteryStorage_LargeFrontRight
		}
		PowerDrain_LargeBackRight :		PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeBackRight
			FromStorage = CombinedBase_BatteryStorage_LargeBackRight
		}
		PowerDrain_LargeBack :			PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeBack
			FromStorage = CombinedBatteryStorage_LargeBack
		}
		PowerDrain_LargeBackLeft :		PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeBackLeft
			FromStorage = CombinedBatteryStorage_LargeBackLeft
		}
		PowerDrain_LargeFrontLeft :		PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeFrontLeft
			FromStorage = CombinedBatteryStorage_LargeFrontLeft
		}
		
		// Out of Power Toggle
		
		IsSmallToggle
		{
			Type = MultiToggle
			Toggles = [IsOperational_BubbleSmallFront, IsOperational_BubbleSmallRight, IsOperational_BubbleSmallBack, IsOperational_BubbleSmallLeft]
			Mode = Any
		}
		IsSmallTrigger
		{
			Type = ToggleTrigger
			Toggle = IsSmallToggle
			TriggerWhenOn = true
			TriggerWhenOff = false
		}
		IsSmallHardToggle
		{
			Type = TriggeredToggle
			OnTrigger = IsSmallTrigger
			OffTrigger = IsLargeTrigger
		}
		
		IsLargeToggle :		IsSmallToggle	{ Toggles = [IsOperational_BubbleLargeFront, IsOperational_BubbleLargeFrontRight, IsOperational_BubbleLargeBackRight, IsOperational_BubbleLargeBack, IsOperational_BubbleLargeBackLeft, IsOperational_BubbleLargeFrontLeft] }
		IsLargeTrigger :	IsSmallTrigger	{ Toggle = IsLargeToggle }
		IsLargeHardToggle : IsSmallHardToggle
		{
			OnTrigger = IsLargeTrigger
			OffTrigger = IsSmallTrigger
		}
	
		HasEnergySmall	// Out of power Toggle
		{
			Type = MultiToggle
			Toggles = [IsSmallHardToggle, CombinedBatteryStorage_SmallFront, CombinedBatteryStorage_SmallRight, CombinedBatteryStorage_SmallBack, CombinedBatteryStorage_SmallLeft]
			Mode = All
		}
		HasEnergyLarge :	HasEnergySmall	{ Toggles = [IsLargeHardToggle, CombinedBatteryStorage_LargeFront, CombinedBatteryStorage_LargeFrontRight, CombinedBatteryStorage_LargeBackRight, CombinedBatteryStorage_LargeBack, CombinedBatteryStorage_LargeBackLeft, CombinedBatteryStorage_LargeFrontLeft] }
	
		HasEnergy
		{
			Type = MultiToggle
			Toggles = [HasEnergySmall, HasEnergyLarge]
			Mode = Any
		}
		
		// Start Resistance Bonus
		
		BubbleCapacityBuffToggle
		{
			Type = BuffToggle
			BuffType = BubbleCapacity
		}
		IsBonusResistanceOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BubbleCapacityBuffToggle, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL]
			Mode = All
		}
		BuffProvider_BubbleResistanceRight
		{
			Type = AreaBuffProvider
			BuffType = BubbleResistanceBonus
			BuffAmount = { BaseValue=8.33; BuffType=BubbleResistanceBonus; BuffMode=Add; }
			OperationalToggle = IsShieldConnected_Right
			BuffArea = [2, 0, 1, 1]
		}
		BuffProvider_BubbleResistanceLeft :	BuffProvider_BubbleResistanceRight
		{
			OperationalToggle = IsShieldConnected_Left
			BuffArea = [-1, 0, 1, 1]
		}
		
		// Start Radius Bonus
		
		Kebechet_TINY_ToggleRadius
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Radius"
			Default = 1
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
		IsBonusRadiusOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BubbleCapacityBuffToggle, Kebechet_TINY_ToggleRadius, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL]
			Mode = All
		}
		BubbleRadiusStateValue
		{
			Type = ValueTween
			IsOnToggle = IsBonusRadiusOperational
			OnTweenDuration = 1;
			OffTweenDuration = 0.1;
		}
		BubbleRadiusStateValue_Self
		{
			Type = ValueTween
			IsOnToggle = BatteryStorage
			OnTweenDuration = 1;
			OffTweenDuration = 10;
		}
		BubbleRadiusStateValue_SelfMin
		{
			Type = MultiValue
			Values = [ BubbleRadiusStateValue, BubbleRadiusStateValue_Self ]
			Mode = Min
		}
		
		BuffProvider_BubbleRadiusRight_Self
		{
			Type = AreaBuffProvider
			BuffType = BubbleRadiusBonus
			BuffAmount = 1
			BuffMultiplier = BubbleRadiusStateValue_SelfMin
			OperationalToggle = IsShieldConnected_Right
			BuffArea = [2, 0, 1, 1]
		}
		BuffProvider_BubbleRadiusRight_Chained : BuffProvider_BubbleRadiusRight_Self
		{
			BuffAmount = { BaseValue=0; BuffType=BubbleRadiusBonus; BuffMode=Add; }
			BuffMultiplier = BubbleRadiusStateValue
		}
		BuffProvider_BubbleRadiusLeft_Self :		BuffProvider_BubbleRadiusRight_Self
		{
			OperationalToggle = IsShieldConnected_Left
			BuffArea = [-1, 0, 1, 1]
		}
		BuffProvider_BubbleRadiusLeft_Chained :		BuffProvider_BubbleRadiusLeft_Self
		{
			BuffAmount = { BaseValue=0; BuffType=BubbleRadiusBonus; BuffMode=Add; }
			BuffMultiplier = BubbleRadiusStateValue_SelfMin
		}
		
		// End Modular
		
		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		// Overclock / Thermal network
		OverclockHeatProducer
		{
			Type = ResourceConverter
			OperationalToggle = IsOperationalOverclocked
			HEAT_PER_INTERVAL = ceil((&~/OVERCLOCK/HEAT_PER_SECOND) * (&Interval))
			ToQuantity = (&HEAT_PER_INTERVAL) * (&~/HEAT_TO_RESOURCE)
			ToStorage = &~/Part/^/0/HEAT_TARGET_STORAGE
			Interval = 0.5
		}
		
		OverheatEffects : ^/0/OverheatEffects
		{
			Location = [1, 1.5]
		}
		
		Router
		{
			Type = NetworkRouter
			RouteGenerators
			[
				{
					Type = Simple
					HEAT_INPUT = &~/Part/^/0/HEAT_NETWORK_INPUT
					Routes
					[
						[&../../HEAT_INPUT, Port_BL, 0]
						[&../../HEAT_INPUT, Port_BR, 0]
						[&../../HEAT_INPUT, Port_BP0, 0]
						[&../../HEAT_INPUT, Port_BP1, 0]
					]
				}
			]
		}
		Port_BL : ~/Part/^/0/BASE_THERMAL_PORT
		{
			Location = [0, 0]
			Direction = Left
		}
		Port_BR : Port_BL
		{
			Location = [1, 0]
			Direction = Right
		}
		Port_BP0 : Port_BL
		{
			Location = [0, 0]
			Direction = Up
		}
		Port_BP1 : Port_BP0
		{
			Location = [1, 0]
		}

		Shield_Doodad_Graphics
		{
			Type = Graphics
			Location = [1, 0.5]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_high"
				//Offset = [0, 0]
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_0DMG
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_33DMG
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_66DMG
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 0.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 1]
					}
					{
						File = "floor_33.png"
						Size = [2, 1]
					}
					{
						File = "floor_66.png"
						Size = [2, 1]
					}
				]
			}
			
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 1]
					}
					{
						File = "walls_33.png"
						Size = [2, 1]
					}
					{
						File = "walls_66.png"
						Size = [2, 1]
					}
				]
			}
			
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 1]
					}
				]
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS PURPLE START ---------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Purple
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Purple
			Components = 
			{
				K_Graphics_Purple : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"purple/doodads_lightning1.png"
									"purple/doodads_lightning2.png"
									"purple/doodads_lightning3.png"
									"purple/doodads_lightning4.png"
									"purple/doodads_lightning5.png"
									"purple/doodads_lightning6.png"
									"purple/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"purple/doodads_lightning1.png"
									"purple/doodads_lightning2.png"
									"purple/doodads_lightning3.png"
									"purple/doodads_lightning4.png"
									"purple/doodads_lightning5.png"
									"purple/doodads_lightning6.png"
									"purple/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"purple/doodads_lightning1.png"
									"purple/doodads_lightning2.png"
									"purple/doodads_lightning3.png"
									"purple/doodads_lightning4.png"
									"purple/doodads_lightning5.png"
									"purple/doodads_lightning6.png"
									"purple/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "purple/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS PURPLE END -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS BLUE START -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Blue
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Blue
			Components = 
			{
				K_Graphics_Blue : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"blue/doodads_lightning1.png"
									"blue/doodads_lightning2.png"
									"blue/doodads_lightning3.png"
									"blue/doodads_lightning4.png"
									"blue/doodads_lightning5.png"
									"blue/doodads_lightning6.png"
									"blue/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"blue/doodads_lightning1.png"
									"blue/doodads_lightning2.png"
									"blue/doodads_lightning3.png"
									"blue/doodads_lightning4.png"
									"blue/doodads_lightning5.png"
									"blue/doodads_lightning6.png"
									"blue/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"blue/doodads_lightning1.png"
									"blue/doodads_lightning2.png"
									"blue/doodads_lightning3.png"
									"blue/doodads_lightning4.png"
									"blue/doodads_lightning5.png"
									"blue/doodads_lightning6.png"
									"blue/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "blue/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS BLUE END -------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS ORANGE START ---------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Orange
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Orange
			Components = 
			{
				K_Graphics_Orange : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"orange/doodads_lightning1.png"
									"orange/doodads_lightning2.png"
									"orange/doodads_lightning3.png"
									"orange/doodads_lightning4.png"
									"orange/doodads_lightning5.png"
									"orange/doodads_lightning6.png"
									"orange/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"orange/doodads_lightning1.png"
									"orange/doodads_lightning2.png"
									"orange/doodads_lightning3.png"
									"orange/doodads_lightning4.png"
									"orange/doodads_lightning5.png"
									"orange/doodads_lightning6.png"
									"orange/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"orange/doodads_lightning1.png"
									"orange/doodads_lightning2.png"
									"orange/doodads_lightning3.png"
									"orange/doodads_lightning4.png"
									"orange/doodads_lightning5.png"
									"orange/doodads_lightning6.png"
									"orange/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "orange/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS ORANGE END -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS RED START ------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Red
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Red
			Components = 
			{
				K_Graphics_Red : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"red/doodads_lightning1.png"
									"red/doodads_lightning2.png"
									"red/doodads_lightning3.png"
									"red/doodads_lightning4.png"
									"red/doodads_lightning5.png"
									"red/doodads_lightning6.png"
									"red/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"red/doodads_lightning1.png"
									"red/doodads_lightning2.png"
									"red/doodads_lightning3.png"
									"red/doodads_lightning4.png"
									"red/doodads_lightning5.png"
									"red/doodads_lightning6.png"
									"red/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"red/doodads_lightning1.png"
									"red/doodads_lightning2.png"
									"red/doodads_lightning3.png"
									"red/doodads_lightning4.png"
									"red/doodads_lightning5.png"
									"red/doodads_lightning6.png"
									"red/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "red/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS RED END --------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS YELLOW START ---------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Yellow
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Yellow
			Components = 
			{
				K_Graphics_Yellow : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"Yellow/doodads_lightning1.png"
									"Yellow/doodads_lightning2.png"
									"Yellow/doodads_lightning3.png"
									"Yellow/doodads_lightning4.png"
									"Yellow/doodads_lightning5.png"
									"Yellow/doodads_lightning6.png"
									"Yellow/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"Yellow/doodads_lightning1.png"
									"Yellow/doodads_lightning2.png"
									"Yellow/doodads_lightning3.png"
									"Yellow/doodads_lightning4.png"
									"Yellow/doodads_lightning5.png"
									"Yellow/doodads_lightning6.png"
									"Yellow/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"Yellow/doodads_lightning1.png"
									"Yellow/doodads_lightning2.png"
									"Yellow/doodads_lightning3.png"
									"Yellow/doodads_lightning4.png"
									"Yellow/doodads_lightning5.png"
									"Yellow/doodads_lightning6.png"
									"Yellow/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "Yellow/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS YELLOW END -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS GREEN START ----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Green
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Green
			Components = 
			{
				K_Graphics_Green : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"green/doodads_lightning1.png"
									"green/doodads_lightning2.png"
									"green/doodads_lightning3.png"
									"green/doodads_lightning4.png"
									"green/doodads_lightning5.png"
									"green/doodads_lightning6.png"
									"green/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"green/doodads_lightning1.png"
									"green/doodads_lightning2.png"
									"green/doodads_lightning3.png"
									"green/doodads_lightning4.png"
									"green/doodads_lightning5.png"
									"green/doodads_lightning6.png"
									"green/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"green/doodads_lightning1.png"
									"green/doodads_lightning2.png"
									"green/doodads_lightning3.png"
									"green/doodads_lightning4.png"
									"green/doodads_lightning5.png"
									"green/doodads_lightning6.png"
									"green/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS GREEN END ------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 0.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 1]
				}
				{
					File = "batteries2.png"
					Size = [2, 1]
				}
			]
		}
				
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		ScorchedTrigger
		{
			Type = ToggleTrigger
			Toggle = ScorchedToggle
			TriggerWhenOn = false
		}

		ScorchedEffects
		{
			Type = TriggeredEffects
			Trigger = ScorchedTrigger
			Location = &../DestroyedEffects/Location
			MediaEffects = &/COMMON_EFFECTS/MedPartScorched
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 0.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Scorched
				{
					Toggle = ScorchedToggle
					AtlasSprite = &/INDICATORS/Scorched
					HidesIndicators = [1,2,3]
				}

				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Resetting from overclock
				{
					Toggle = &~/Part/^/0/OVERCLOCK_OPERATIONAL
					AtlasSprite : /INDICATORS/OverclockReset
					{
						Size = [1, 1]
					}
					HidesIndicators = [3]
				}

				// Out of power.
				{
					Toggle = HasEnergy
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 1]
			Offset = [0, 0]
		}

		HeatGenerationValue
		{
			Type = StaticValue
			Value = (&~/OVERCLOCK/HEAT_PER_SECOND)
		}
		HeatGenerationStatProvider
		{
			Type = StatProvider
			Stat = HeatGeneration
			OperationalToggle = OverclockModeToggle
			ValueFrom = HeatGenerationValue
		}
	}

	Stats
	{
		PowerCapacity = (&~/STATS/POWER_CAPACITY) / 1000

		RecPower = (&../StatsByCategory/0/Stats/PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
		
		// Add HP and penetration resistance for when buffing Bubble Shields?
	}
	
	StatsByCategory
	[
		{
			NameKey = "StatCategories/ShieldTiny"
			Stats
			{
//				ShieldHP = ((&~/Part/Components/InnerBatteryStorage/MaxResources) + (&~/Part/Components/OuterBatteryStorage/MaxResources)) / (&~/Part/Components/ArcShield/ResourceDrainPerDamage)
//				ShieldPenResist = &~/Part/Components/ArcShield/PenetrationResistance/0
//				ShieldArc = deg(&~/Part/Components/ArcShield/Arc/BaseValue)	// Useless due to being almost flat
//				ShieldLength = 6.1	// 2 * Radius * Sen(rad(arc)/2)
//				ShieldDist = (&~/Part/Components/ArcShield/Radius) - (&~/Part/Components/ArcShield/Location/1)
				PowerUsageContinuous = (&~/STATS/POWER_DRAIN) / (&~/Part/Components/PowerDrain_SmallFront/Interval) / 1000
			}
		}
	]
	
	SecondaryToolTip
	{
		TitleKey = "StatCategories/Overclocked"
		Stats
		{
//			ShieldArc = deg(&~/Part/Components/ArcShield/Arc/BaseValue) * (&~/OVERCLOCK/ARC_FACTOR)
//			ShieldLength = 3.05	// 2 * Radius * Sen(rad(arc)/2)
//			ShieldHP = (&~/Part/Stats/ShieldHP) / (&~/OVERCLOCK/DAMAGE_DRAIN_FACTOR)
//			PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity/BaseValue) * (&~/OVERCLOCK/POWER_DRAIN_FACTOR) / (&~/Part/Components/PowerDrain/Interval) / 1000
//			HeatGeneration = (&~/OVERCLOCK/HEAT_PER_SECOND)
//			HeatPerDamage = (&~/OVERCLOCK/HEAT_PER_DAMAGE)
//			ShieldRegen = (&~/Part/Components/Overclock_BatteryProducer/ToQuantity) / (&~/Part/Components/Overclock_BatteryProducer/Interval) / (&~/Part/Components/ArcShield/ResourceDrainPerDamage)
		}
	}
}