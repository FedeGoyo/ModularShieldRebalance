OVERCLOCK
{
	HEAT_PER_SECOND = 12	//	Total, divided by segments
	HEAT_PER_DAMAGE = 0.02
	POWER_DRAIN_FACTOR = 200%
}
HEAT_TO_RESOURCE = &<./Data/statuses/heat/heat.rules>/STATUS_TO_RESOURCE_RATIO
HEAT_TO_STATUS = &<./Data/statuses/heat/heat.rules>/RESOURCE_TO_STATUS_RATIO
STATS
{
	POWER_DRAIN = 50	// Total, divided by segments
	POWER_CAPACITY = 2000	// Total, divided by segments
	POWER_RESUPPLY_THRESHOLD = 50%
	SMALL_SEGMENTS = 4
	LARGE_SEGMENTS = 6
	TOTAL_BATTERIES = 12	
}

Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/KebechetTINYmodularShieldBattery"
	IconNameKey = "Parts/KebechetTINYmodularShieldBatteryIcon"
	DescriptionKey = "Parts/KebechetTINYmodularShieldBatteryDesc"
	ID = enderluck.ModularShieldBattery
	EditorParentParts = [ "swefpifh.Kebechet_STS_modularShield", "swefpifh.Kebechet_STL_modularShield" ] 
	Resources
	[
		[steel, 12]
		[coil, 12]
	]
	AIValueFactor = 5
	Size = [2, 1]
	PhysicalRect = [0, 0, 2, 1] // [Left, Top, Width, Height]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeID = "shield_battery_module"
	SelectionTypeByRotation = true
	MaxHealth = 4000
	TypeCategories = [defense, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [BubbleCapacity, BubbleCapacityReversed, BubbleResistance, BubbleRadius, ShieldOverload, BubbleRotation]
	PenetrationRectType = Normal
	// ProhibitLeft = 0
	// ProhibitRight = 0
	// ProhibitAbove = 0
	// ProhibitBelow = 0
//	InitialPenetrationResistance = 0
	AllowedDoorLocations
	[
		[0, 1]
		[1, 1]
	]

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{

		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		ToggleColour
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleColour_Purple
		{
			Type = ModeToggle
			Mode = ToggleColour
			OnMode = 0
		}

		ToggleColour_Blue :		ToggleColour_Purple	{ OnMode = 1 }
		ToggleColour_Orange :	ToggleColour_Purple	{ OnMode = 2 }
		ToggleColour_Red :		ToggleColour_Purple	{ OnMode = 3 }
		ToggleColour_Yellow :	ToggleColour_Purple	{ OnMode = 4 }
		ToggleColour_Green :	ToggleColour_Purple	{ OnMode = 5 }

		// -----------------------------------------------
		// PROXY -----------------------------------------
		// -----------------------------------------------
		
		Kebechet_TINY_ColoursProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_TINY_ColoursSet
		}
		Kebechet_TINY_ColoursSet
		{
			Type = MultiToggle
			Toggles = [ToggleColour_Purple, ToggleColour_Blue, ToggleColour_Orange, ToggleColour_Red, ToggleColour_Yellow, ToggleColour_Green]
			Mode = Any
		}

		// --------------------------------- END TOGGLES
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, ScorchedToggle]
			Mode = All
		}
		
		CanOperate
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle]
			Mode = All
		}
		CanOperateProxy
		{
			Type = ToggleProxy
			ComponentID = CanOperate
		}

		CommandConsumptionToggle
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		ScorchedToggle
		{
			Type = StatusToggle
			StatusType = cosmoteer.scorched
			MinStatusValue = 1
			Invert = true
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = CommandConsumptionToggle
			CommandPoints = 1
		}
		
		// Modular Shield Connection
		
		IsShieldConnected_Right
		{
			Type = ToggleProxy
			PartLocation = [3, 0]
			ProxyableComponents
			[
				{
					PartCriteria
					{
						Category = bubble_shield
					}
					ComponentID = CanOperate	// Maybe another type of component would have been better such as ComponentPresenceToggleRules or a DistanceThreshold
				}
				{
					PartCriteria
					{
						ID = enderluck.ModularShieldBattery
						Rot = 0
					}
					ComponentID = IsShieldConnected_Right
				}
				{
					PartCriteria
					{
						ID = enderluck.ModularShieldBattery
						Rot = 2
					}
					ComponentID = IsShieldConnected_Left
				}
			]
		}
		
		IsShieldConnected_RightInverted
		{
			Type = MultiToggle
			Toggles = [ IsShieldConnected_Right ]
			Invert = true
			Mode = Any
		}
		IsShieldConnected_RightInvertedProxy
		{
			Type = ToggleProxy
			ComponentID = IsShieldConnected_RightInverted
		}
		
		IsShieldConnected_Left : IsShieldConnected_Right
		{
			ToggleProxy = IsShieldConnected_RightInvertedProxy
			PartLocation = [-1, 0]
			ProxyableComponents
			[
				: ../^/0/ProxyableComponents/0	{}
				: ../^/0/ProxyableComponents/1	{ ComponentID = IsShieldConnected_Left }
				: ../^/0/ProxyableComponents/2	{ ComponentID = IsShieldConnected_Right }
			]
		}

		BuffProvider_BubbleCapacityRight
		{
			Type = AreaBuffProvider
			OperationalToggle = IsShieldConnected_Left
			BuffType = BubbleCapacity
			BuffArea = [2, 0, 2, 1]
			Criteria
			{
				Left = 2
				Right = 4
			}
		}
		BuffProvider_BubbleCapacityLeft:	BuffProvider_BubbleCapacityRight
		{
			OperationalToggle = IsShieldConnected_Right
			BuffArea = [-2, 0, 2, 1]
			Criteria
			{
				Left = -2
				Right = 0
			}
		}
		
		BuffProvider_BubbleCapacityReversedRight
		{
			Type = AreaBuffProvider
			OperationalToggle = IsShieldConnected_Right
			BuffType = BubbleCapacityReversed
			BuffArea = [2, 0, 2, 1]
		}
		BuffProvider_BubbleCapacityReversedLeft :	BuffProvider_BubbleCapacityReversedRight
		{
			OperationalToggle = IsShieldConnected_Left
			BuffType = BubbleCapacityReversed
			BuffArea = [-2, 0, 2, 1]
		}
		
		// Start Battery
		
		BatteryStorage_1
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = "round((&~/STATS/POWER_CAPACITY) / (&~/STATS/TOTAL_BATTERIES), 0)"
			DrainOnFtlJump = true
			IsDrainable = false
		}
		BatteryStorage_2 :		BatteryStorage_1	{}
		BatteryStorage_3 :		BatteryStorage_1	{}
		BatteryStorage_4 :		BatteryStorage_1	{}
		BatteryStorage_5 :		BatteryStorage_1	{}
		BatteryStorage_6 :		BatteryStorage_1	{}
		BatteryStorage_7 :		BatteryStorage_1	{}
		BatteryStorage_8 :		BatteryStorage_1	{}
		BatteryStorage_9 :		BatteryStorage_1	{}
		BatteryStorage_10 :		BatteryStorage_1	{}
		BatteryStorage_11 :		BatteryStorage_1	{}
		BatteryStorage_12 :		BatteryStorage_1	{}
		
		CombinedBatteryStorage_SmallFront
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			ResourceStorages = [BatteryStorage_1, BatteryStorage_2, BatteryStorage_3]
			AddMode = DistributeEvenly
			RemoveMode = DistributeEvenly
		}
		CombinedBatteryStorage_SmallRight :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_4, BatteryStorage_5, BatteryStorage_6] }
		CombinedBatteryStorage_SmallBack :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_7, BatteryStorage_8, BatteryStorage_9] }
		CombinedBatteryStorage_SmallLeft :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_10, BatteryStorage_11, BatteryStorage_12] }
		CombinedBatteryStorage_LargeFront :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_1, BatteryStorage_2] }
		CombinedBatteryStorage_LargeFrontRight :	CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_3, BatteryStorage_4] }
		CombinedBatteryStorage_LargeBackRight :		CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_5, BatteryStorage_6] }
		CombinedBatteryStorage_LargeBack :			CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_7, BatteryStorage_8] }
		CombinedBatteryStorage_LargeBackLeft :		CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_9, BatteryStorage_10] }
		CombinedBatteryStorage_LargeFrontLeft :		CombinedBatteryStorage_SmallFront	{ ResourceStorages = [BatteryStorage_11, BatteryStorage_12] }
		
		BatteryStorage // CombinedBatteryStorage // Named like this for easier compatibility with other mods
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			ResourceStorages = [BatteryStorage_1, BatteryStorage_2, BatteryStorage_3, BatteryStorage_4, BatteryStorage_5, BatteryStorage_6, BatteryStorage_7, BatteryStorage_8, BatteryStorage_9, BatteryStorage_10, BatteryStorage_11, BatteryStorage_12]
			AddMode = DistributeEvenly
			RemoveMode = DistributeEvenly
		}
				
		ToggledBatteryStorage_Alone
		{
			Type = ToggledComponents
			Toggle = IsAlone
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Defense_Supply
					ResupplyThreshold = 500
					OperationalToggle = PowerToggle
				}	
			}
		}
		ToggledBatteryStorage_Small :	ToggledBatteryStorage_Alone
		{
			Toggle = IsSmall
			Components :	^/0/Components
			{
				BatteryConsumer :	^/0/BatteryConsumer	{ ResupplyThreshold = "round((&~/Part/Components/BatteryStorage_1/MaxResources) * (&~/STATS/TOTAL_BATTERIES) / (&~/STATS/SMALL_SEGMENTS) * (&~/STATS/POWER_RESUPPLY_THRESHOLD), 0)" }
			}
		}
		ToggledBatteryStorage_Large :	ToggledBatteryStorage_Alone
		{
			Toggle = IsLarge
			Components :	^/0/Components
			{
				BatteryConsumer :	^/0/BatteryConsumer	{ ResupplyThreshold = "round((&~/Part/Components/BatteryStorage_1/MaxResources) * (&~/STATS/TOTAL_BATTERIES) / (&~/STATS/LARGE_SEGMENTS) * (&~/STATS/POWER_RESUPPLY_THRESHOLD), 0)" }
			}
		}
		
		// Start Modular Battery
		
		ModularBatteryStorage_SmallFront
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = true
			ResourceStorages = [CombinedBatteryStorage_SmallFront]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityRight, BuffProvider_BubbleCapacityLeft]
				ComponentID = BatteryStorageProxy_SmallFront
			}
			RemoveMode = InReverseOrder
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		ModularBatteryStorage_SmallRight :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_SmallRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallRight }
		}
		ModularBatteryStorage_SmallBack :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_SmallBack]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallBack }
		}
		ModularBatteryStorage_SmallLeft :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_SmallLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallLeft }
		}
		ModularBatteryStorage_LargeFront :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeFront]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFront }
		}
		ModularBatteryStorage_LargeFrontRight :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeFrontRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFrontRight }
		}
		ModularBatteryStorage_LargeBackRight :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeBackRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBackRight }
		}
		ModularBatteryStorage_LargeBack :		ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeBack]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBack }
		}
		ModularBatteryStorage_LargeBackLeft :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeBackLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBackLeft }
		}
		ModularBatteryStorage_LargeFrontLeft :	ModularBatteryStorage_SmallFront
		{
			ResourceStorages = [CombinedBatteryStorage_LargeFrontLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFrontLeft }
		}
		
		BatteryStorageProxy_SmallFront	// For Modular, to prevent using it while disabled
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			ComponentID = ModularBatteryStorage_SmallFront
			ProxyToggle = CanOperateProxy
		}
		BatteryStorageProxy_SmallRight :		BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_SmallRight }
		BatteryStorageProxy_SmallBack :			BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_SmallBack }
		BatteryStorageProxy_SmallLeft :			BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_SmallLeft }
		BatteryStorageProxy_LargeFront :		BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeFront }
		BatteryStorageProxy_LargeFrontRight :	BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeFrontRight }
		BatteryStorageProxy_LargeBackRight :	BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeBackRight }
		BatteryStorageProxy_LargeBack :			BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeBack }
		BatteryStorageProxy_LargeBackLeft :		BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeBackLeft }
		BatteryStorageProxy_LargeFrontLeft :	BatteryStorageProxy_SmallFront	{ ComponentID = ModularBatteryStorage_LargeFrontLeft }
		
		// Segment is Operational
		
		IsModular
		{
			Type = BuffToggle
			BuffType = BubbleCapacityReversed
		}

		IsOperational_ModularReversed_SmallFront
		{
			Type = MultiToggle
			Toggles = [{Toggle=IsModular; Invert=true}]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityRight, BuffProvider_BubbleCapacityLeft]
				ComponentID = IsOperational_ModularProxy_SmallFront
			}
			Mode = Any
		}
		IsOperational_ModularReversed_SmallRight :			IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallRight } }
		IsOperational_ModularReversed_SmallBack :			IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallBack } }
		IsOperational_ModularReversed_SmallLeft :			IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallLeft } }
		IsOperational_ModularReversed_LargeFront :			IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_LargeFront } }
		IsOperational_ModularReversed_LargeFrontRight :		IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_LargeFrontRight } }
		IsOperational_ModularReversed_LargeBackRight :		IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_LargeBackRight } }
		IsOperational_ModularReversed_LargeBack :			IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_LargeBack } }
		IsOperational_ModularReversed_LargeBackLeft :		IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_LargeBackLeft } }
		IsOperational_ModularReversed_LargeFrontLeft :		IsOperational_ModularReversed_SmallFront	{ ViaBuffs :	^/0/ViaBuffs	{ ComponentID =IsOperational_ModularProxy_LargeFrontLeft } }
		
		IsOperational_ModularSelf_SmallFront
		{
			Type = MultiToggle
			Toggles = [IsOperational_ModularReversed_SmallFront, CombinedBatteryStorage_SmallFront]
			Mode = All
		}
		IsOperational_ModularSelf_SmallRight :		IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_SmallRight, CombinedBatteryStorage_SmallRight] }
		IsOperational_ModularSelf_SmallBack :		IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_SmallBack, CombinedBatteryStorage_SmallBack] }
		IsOperational_ModularSelf_SmallLeft :		IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_SmallLeft, CombinedBatteryStorage_SmallLeft] }
		IsOperational_ModularSelf_LargeFront :		IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_LargeFront, CombinedBatteryStorage_LargeFront] }
		IsOperational_ModularSelf_LargeFrontRight :	IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_LargeFrontRight, CombinedBatteryStorage_LargeFrontRight] }
		IsOperational_ModularSelf_LargeBackRight :	IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_LargeBackRight, CombinedBatteryStorage_LargeBackRight] }
		IsOperational_ModularSelf_LargeBack :		IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_LargeBack, CombinedBatteryStorage_LargeBack] }
		IsOperational_ModularSelf_LargeBackLeft :	IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_LargeBackLeft, CombinedBatteryStorage_LargeBackLeft] }
		IsOperational_ModularSelf_LargeFrontLeft :	IsOperational_ModularSelf_SmallFront { Toggles = [IsOperational_ModularReversed_LargeFrontLeft, CombinedBatteryStorage_LargeFrontLeft] }
		
		IsOperational_ModularProxy_SmallFront
		{
			Type = MultiToggle
			Toggles = [IsOperational_ModularSelf_SmallFront, {Toggle=CanOperate; Invert=true}]
			Mode = Any
		}
		IsOperational_ModularProxy_SmallRight :			IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_SmallRight, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_SmallBack :			IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_SmallBack, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_SmallLeft :			IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_SmallLeft, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_LargeFront :			IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_LargeFront, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_LargeFrontRight :	IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_LargeFrontRight, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_LargeBackRight :		IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_LargeBackRight, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_LargeBack :			IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_LargeBack, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_LargeBackLeft :		IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_LargeBackLeft, {Toggle=CanOperate; Invert=true}] }
		IsOperational_ModularProxy_LargeFrontLeft :		IsOperational_ModularProxy_SmallFront	{ Toggles = [IsOperational_ModularSelf_LargeFrontLeft, {Toggle=CanOperate; Invert=true}] }
		
		// Power Drain
		
		IsOperational_BubbleSmallFront
		{
			Type = MultiToggle
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [ IsOperationalProxy_BubbleSmallFront, IsOperational_SmallFront ]
			}
			Mode = Any
		}
		IsOperational_BubbleSmallRight :		IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleSmallRight, IsOperational_SmallRight ] }
		}
		IsOperational_BubbleSmallBack :			IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleSmallBack, IsOperational_SmallBack ] }
		}
		IsOperational_BubbleSmallLeft :			IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleSmallLeft, IsOperational_SmallLeft ] }
		}
		IsOperational_BubbleLargeFront :		IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeFront, IsOperational_LargeFront ] }
		}
		IsOperational_BubbleLargeFrontRight :	IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeFrontRight, IsOperational_LargeFrontRight ] }
		}
		IsOperational_BubbleLargeBackRight :	IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeBackRight, IsOperational_LargeBackRight ] }
		}
		IsOperational_BubbleLargeBack :			IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeBack, IsOperational_LargeBack ] }
		}
		IsOperational_BubbleLargeBackLeft :		IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeBackLeft, IsOperational_LargeBackLeft ] }
		}
		IsOperational_BubbleLargeFrontLeft :	IsOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs	{ ComponentIDs = [ IsOperationalProxy_BubbleLargeFrontLeft, IsOperational_LargeFrontLeft ] }
		}
		
		IsOperationalProxy_BubbleSmallFront	// For Modular, to prevent using it while disabled
		{
			Type = ToggleProxy
			ComponentID = IsOperational_BubbleSmallFront
			ProxyToggle = CanOperateProxy
		}
		IsOperationalProxy_BubbleSmallRight :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleSmallRight }
		IsOperationalProxy_BubbleSmallBack :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleSmallBack }
		IsOperationalProxy_BubbleSmallLeft :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleSmallLeft }
		IsOperationalProxy_BubbleLargeFront :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeFront }
		IsOperationalProxy_BubbleLargeFrontRight :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeFrontRight }
		IsOperationalProxy_BubbleLargeBackRight :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeBackRight }
		IsOperationalProxy_BubbleLargeBack :		IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeBack }
		IsOperationalProxy_BubbleLargeBackLeft :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeBackLeft }
		IsOperationalProxy_BubbleLargeFrontLeft :	IsOperationalProxy_BubbleSmallFront	{ ComponentID = IsOperational_BubbleLargeFrontLeft }
		
		PowerDrain_SmallFront
		{
			Type = ResourceConverter
			OperationalToggle = IsOperationalProxy_BubbleSmallFront
			FromStorage = CombinedBatteryStorage_SmallFront
			FromQuantity = "round( (&~/STATS/POWER_DRAIN) / (&~/STATS/SMALL_SEGMENTS), 0)"
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		PowerDrain_SmallRight :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleSmallRight
			FromStorage = CombinedBatteryStorage_SmallRight
		}
		PowerDrain_SmallBack :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleSmallBack
			FromStorage = CombinedBatteryStorage_SmallBack
		}
		PowerDrain_SmallLeft :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleSmallLeft
			FromStorage = CombinedBatteryStorage_SmallLeft
		}
		PowerDrain_LargeFront :			PowerDrain_SmallFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeFront
			FromStorage = CombinedBatteryStorage_LargeFront
			FromQuantity = "round( (&~/STATS/POWER_DRAIN) / (&~/STATS/LARGE_SEGMENTS), 0)"
		}
		PowerDrain_LargeFrontRight :	PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeFrontRight
			FromStorage = CombinedBatteryStorage_LargeFrontRight
		}
		PowerDrain_LargeBackRight :		PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeBackRight
			FromStorage = CombinedBatteryStorage_LargeBackRight
		}
		PowerDrain_LargeBack :			PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeBack
			FromStorage = CombinedBatteryStorage_LargeBack
		}
		PowerDrain_LargeBackLeft :		PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeBackLeft
			FromStorage = CombinedBatteryStorage_LargeBackLeft
		}
		PowerDrain_LargeFrontLeft :		PowerDrain_LargeFront
		{
			OperationalToggle = IsOperationalProxy_BubbleLargeFrontLeft
			FromStorage = CombinedBatteryStorage_LargeFrontLeft
		}
		
		// Out of Power Toggle
		
		CanBeOperational_BubbleSmallFront
		{
			Type = MultiToggle
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [ CanBeOperationalProxy_BubbleSmallFront, IsOperational_SegmentSmallFront_Toggle ]
			}
			Mode = Any
		}
		CanBeOperational_BubbleSmallRight :			CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleSmallRight, IsOperational_SegmentSmallRight_Toggle ] }
		}
		CanBeOperational_BubbleSmallBack :			CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleSmallBack, IsOperational_SegmentSmallBack_Toggle ] }
		}
		CanBeOperational_BubbleSmallLeft :			CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleSmallLeft, IsOperational_SegmentSmallLeft_Toggle ] }
		}
		CanBeOperational_BubbleLargeFront :			CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleLargeFront, IsOperational_SegmentLargeFront_Toggle ] }
		}
		CanBeOperational_BubbleLargeFrontRight :	CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleLargeFrontRight, IsOperational_SegmentLargeFrontRight_Toggle ] }
		}
		CanBeOperational_BubbleLargeBackRight :		CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleLargeBackRight, IsOperational_SegmentLargeBackRight_Toggle ] }
		}
		CanBeOperational_BubbleLargeBack :			CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleLargeBack, IsOperational_SegmentLargeBack_Toggle ] }
		}
		CanBeOperational_BubbleLargeBackLeft :		CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleLargeBackLeft, IsOperational_SegmentLargeBackLeft_Toggle ] }
		}
		CanBeOperational_BubbleLargeFrontLeft :		CanBeOperational_BubbleSmallFront
		{
			ViaBuffs :	^/0/ViaBuffs
			{ ComponentIDs = [ CanBeOperationalProxy_BubbleLargeFrontLeft, IsOperational_SegmentLargeFrontLeft_Toggle ] }
		}
		
		CanBeOperationalProxy_BubbleSmallFront	// For Modular, to prevent using it while disabled
		{
			Type = ToggleProxy
			ComponentID = CanBeOperational_BubbleSmallFront
			ProxyToggle = CanOperateProxy
		}
		CanBeOperationalProxy_BubbleSmallRight :		CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleSmallRight }
		CanBeOperationalProxy_BubbleSmallBack :			CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleSmallBack }
		CanBeOperationalProxy_BubbleSmallLeft :			CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleSmallLeft }
		CanBeOperationalProxy_BubbleLargeFront :		CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleLargeFront }
		CanBeOperationalProxy_BubbleLargeFrontRight :	CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleLargeFrontRight }
		CanBeOperationalProxy_BubbleLargeBackRight :	CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleLargeBackRight }
		CanBeOperationalProxy_BubbleLargeBack :			CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleLargeBack }
		CanBeOperationalProxy_BubbleLargeBackLeft :		CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleLargeBackLeft }
		CanBeOperationalProxy_BubbleLargeFrontLeft :	CanBeOperationalProxy_BubbleSmallFront	{ ComponentID = CanBeOperational_BubbleLargeFrontLeft }
		
		HasEnergy_SmallFront
		{
			Type = MultiToggle
			Toggles = [CanBeOperational_BubbleSmallFront, CombinedBatteryStorage_SmallFront]
			Mode = Any
		}
		HasEnergy_SmallRight :		HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleSmallRight, CombinedBatteryStorage_SmallRight] }
		HasEnergy_SmallBack :		HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleSmallBack, CombinedBatteryStorage_SmallBack] }
		HasEnergy_SmallLeft :		HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleSmallLeft, CombinedBatteryStorage_SmallLeft] }
		HasEnergy_LargeFront :		HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleLargeFront, CombinedBatteryStorage_LargeFront] }
		HasEnergy_LargeFrontRight :	HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleLargeFrontRight, CombinedBatteryStorage_LargeFrontRight] }
		HasEnergy_LargeBackRight :	HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleLargeBackRight, CombinedBatteryStorage_LargeBackRight] }
		HasEnergy_LargeBack :		HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleLargeBack, CombinedBatteryStorage_LargeBack] }
		HasEnergy_LargeBackLeft :	HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleLargeBackLeft, CombinedBatteryStorage_LargeBackLeft] }
		HasEnergy_LargeFrontLeft :	HasEnergy_SmallFront	{ Toggles = [CanBeOperational_BubbleLargeFrontLeft, CombinedBatteryStorage_LargeFrontLeft] }
		
		BubbleSize
		{
			Type = MultiValue
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [BubbleSizeProxy, Size]
			}
			Mode = Max
		}
		BubbleSizeProxy
		{
			Type = ValueProxy
			ComponentID = BubbleSize
			Mode = CanOperateProxy
		}
		
		IsSmall
		{
			Type = ThresholdToggle
			ValueFrom = BubbleSize
			MinAmount = 1
			MaxAmount = &MinAmount
		}
		IsLarge :	IsSmall
		{
			MinAmount = 2
			MaxAmount = &MinAmount
		}
		IsAlone
		{
			Type = ThresholdToggle
			ValueFrom = BubbleSize
			MaxAmount = 0
		}
		
		HasEnergy_Small
		{
			Type = MultiToggle
			Toggles = [IsSmall, HasEnergy_SmallFront, HasEnergy_SmallRight, HasEnergy_SmallBack, HasEnergy_SmallLeft]
			Mode = All
		}
		HasEnergy_Large :	HasEnergy_Small	{ Toggles = [IsLarge, HasEnergy_LargeFront, HasEnergy_LargeFrontRight, HasEnergy_LargeBackRight, HasEnergy_LargeBack, HasEnergy_LargeBackLeft, HasEnergy_LargeFrontLeft] }
		HasEnergy_Alone :	HasEnergy_Small	{ Toggles = [BatteryStorage, IsAlone] }
		
		HasEnergy	// Out of power Toggle
		{
			Type = MultiToggle
			Toggles = [HasEnergy_Small, HasEnergy_Large, HasEnergy_Alone]
			Mode = Any
		}
		
		// Start Resistance Bonus
		
		BuffProvider_BubbleResistance_Right
		{
			Type = AreaBuffProvider
			BuffType = BubbleResistance
			BuffAmount = { BaseValue=1; BuffType=BubbleResistance; BuffMode=Add; }
			OperationalToggle = IsShieldConnected_Right
			BuffArea = [2, 0, 1, 1]
		}
		BuffProvider_BubbleResistance_Left :	BuffProvider_BubbleResistance_Right
		{
			OperationalToggle = IsShieldConnected_Left
			BuffArea = [-1, 0, 1, 1]
		}
		
		// Start Radius Bonus
		
		BubbleStateValue_Self_SmallFront
		{
			Type = ValueTween
			IsOnToggle = CombinedBatteryStorage_SmallFront
			OnValue = 1 / (&~/STATS/SMALL_SEGMENTS)
			OnTweenDuration = 1;
			OffTweenDuration = 5;
		}
		BubbleStateValue_Self_SmallRight :		BubbleStateValue_Self_SmallFront	{ IsOnToggle = CombinedBatteryStorage_SmallRight }
		BubbleStateValue_Self_SmallBack :		BubbleStateValue_Self_SmallFront	{ IsOnToggle = CombinedBatteryStorage_SmallBack }
		BubbleStateValue_Self_SmallLeft :		BubbleStateValue_Self_SmallFront	{ IsOnToggle = CombinedBatteryStorage_SmallLeft }
		BubbleStateValue_Self_LargeFront :		BubbleStateValue_Self_SmallFront
		{
			OnValue = 1 / (&~/STATS/LARGE_SEGMENTS)
			IsOnToggle = CombinedBatteryStorage_LargeFront
		}
		BubbleStateValue_Self_LargeFrontRight :	BubbleStateValue_Self_LargeFront	{ IsOnToggle = CombinedBatteryStorage_LargeFrontRight }
		BubbleStateValue_Self_LargeBackRight :	BubbleStateValue_Self_LargeFront	{ IsOnToggle = CombinedBatteryStorage_LargeBackRight }
		BubbleStateValue_Self_LargeBack :		BubbleStateValue_Self_LargeFront	{ IsOnToggle = CombinedBatteryStorage_LargeBack }
		BubbleStateValue_Self_LargeBackLeft :	BubbleStateValue_Self_LargeFront	{ IsOnToggle = CombinedBatteryStorage_LargeBackLeft }
		BubbleStateValue_Self_LargeFrontLeft :	BubbleStateValue_Self_LargeFront	{ IsOnToggle = CombinedBatteryStorage_LargeFrontLeft }
		
		BubbleStateValue_Self_Small
		{
			Type = MultiValue
			Values = [BubbleStateValue_Self_SmallFront, BubbleStateValue_Self_SmallRight, BubbleStateValue_Self_SmallBack, BubbleStateValue_Self_SmallLeft]
			Mode = Add
		}
		BubbleStateValue_Self_Large :	BubbleStateValue_Self_Small	{ Values = [BubbleStateValue_Self_LargeFront, BubbleStateValue_Self_LargeFrontRight, BubbleStateValue_Self_LargeBackRight, BubbleStateValue_Self_LargeBack, BubbleStateValue_Self_LargeBackLeft, BubbleStateValue_Self_LargeFrontLeft] }
		
		BubbleStateValue_Self_Selector
		{
			Type = ToggleValueSelector
			Toggle = IsSmall
			ToggleOnValue = BubbleStateValue_Self_Small
			ToggleOffValue = BubbleStateValue_Self_Large	// If it IsAlone it won't be giving the buff to anybody so no problem
		}
		
		ToggleRadius
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Radius"
			Default = 1
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
		IsBonusRadiusOperational
		{
			Type = MultiToggle
			Toggles = [CanOperate, ToggleRadius]
			Mode = All
		}
		BubbleRadiusStateValue
		{
			Type = ValueTween
			IsOnToggle = IsBonusRadiusOperational
			StartingValue = 0
			OnTweenDuration = 1;
			OffTweenDuration = 0.1;
		}
		
		BubbleRadiusStateValue_SelfMin
		{
			Type = MultiValue
			Values = [ BubbleRadiusStateValue, BubbleStateValue_Self_Selector ]
			Mode = Min
		}
		
		BuffProvider_BubbleRadius_RightSelf
		{
			Type = AreaBuffProvider
			BuffType = BubbleRadius
			BuffAmount = 1
			BuffMultiplier = BubbleRadiusStateValue_SelfMin
			OperationalToggle = IsShieldConnected_Right
			BuffArea = [2, 0, 1, 1]
		}
		BuffProvider_BubbleRadius_LeftSelf :		BuffProvider_BubbleRadius_RightSelf
		{
			OperationalToggle = IsShieldConnected_Left
			BuffArea = [-1, 0, 1, 1]
		}
		
		BuffProvider_BubbleRadius_RightChained : 	BuffProvider_BubbleRadius_RightSelf
		{
			BuffAmount = { BaseValue=0; BuffType=BubbleRadius; BuffMode=Add; }
			BuffMultiplier = BubbleRadiusStateValue
		}
		BuffProvider_BubbleRadius_LeftChained :		BuffProvider_BubbleRadius_LeftSelf
		{
			BuffAmount = { BaseValue=0; BuffType=BubbleRadius; BuffMode=Add; }
			BuffMultiplier = BubbleRadiusStateValue
		}
		
		// Start Rotation Penalty
		
		IsBonusRotationOperational
		{
			Type = MultiToggle
			Toggles = [CanOperate, IsOverclocked]
			Mode = All
		}
		
		BubbleRotationStateValue
		{
			Type = ValueTween
			IsOnToggle = IsBonusRotationOperational
			StartingValue = 0
			OnTweenDuration = 1;
			OffTweenDuration = 0.1;
		}
		
		BubbleRotationStateValue_SelfMin
		{
			Type = MultiValue
			Values = [ BubbleRotationStateValue, BubbleStateValue_Self_Selector ]
			Mode = Min
		}
		
		BuffProvider_BubbleRotation_Right
		{
			Type = AreaBuffProvider
			BuffType = BubbleRotation
			BuffAmount = 1
			BuffMultiplier = BubbleRotationStateValue_SelfMin
			OperationalToggle = IsShieldConnected_Right
			BuffArea = [2, 0, 1, 1]
		}
		BuffProvider_BubbleRotation_Left :			BuffProvider_BubbleRotation_Right
		{
			OperationalToggle = IsShieldConnected_Left
			BuffArea = [-1, 0, 1, 1]
		}
		
		BuffProvider_BubbleRotation_RightChained : 	BuffProvider_BubbleRotation_Right
		{
			BuffAmount = 1
			BuffMultiplier = BubbleRotationStateValue
		}
		BuffProvider_BubbleRotation_LeftChained :	BuffProvider_BubbleRotation_Left
		{
			BuffAmount = { BaseValue=0; BuffType=BubbleRotation; BuffMode=Add; }
			BuffMultiplier = BubbleRotationStateValue
		}
		
		// End Modular
		
		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		// Overclock / Thermal network
		
		ModularOverclockModeToggle
		{
			Type = MultiToggle
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [ ModularOverclockModeToggleProxy, OverclockModeToggle ]
			}
			Mode = Any
		}
		ModularOverclockModeToggleProxy	// For Modular, to prevent using it while disabled
		{
			Type = ToggleProxy
			ComponentID = ModularOverclockModeToggle
			ProxyToggle = CanOperateProxy
		}
		
		ModularOverclockStateValue
		{
			Type = MultiValue
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [ModularOverclockStateValueProxy, OverclockStateValue]
			}
			Mode = Max
		}
		ModularOverclockStateValueProxy
		{
			Type = ValueProxy
			ComponentID = ModularOverclockStateValue
			ProxyToggle = CanOperateProxy
		}
		IsOverclocked
		{
			Type = ThresholdToggle
			ValueFrom = ModularOverclockStateValue
			MinAmount = 0
			MaxAmount = 0
			Invert = true
		}
		IsOperationalOverclocked
		{
			Type = MultiToggle
			Toggles = [ IsOperational, IsOverclocked ]
			Mode = All
		}
		
		OverflowHeatStorage : <./Data/ships/terran/base_part_terran_overclock.rules>/Part/Components/OverflowHeatStorage {}	// The game ask for it though I can't find were
		HeatDistributionStorage : <./Data/ships/terran/base_part_terran_overclock.rules>/Part/Components/HeatDistributionStorage {}	// Is HEAT_TARGET_STORAGE
		NetworkHeatInput : <./Data/ships/terran/base_part_terran_overclock.rules>/Part/Components/NetworkHeatInput {}	// Is HEAT_NETWORK_INPUT
		
		// Heat Producer per Second
		
		IsOperationalOverclocked_SmallFront
		{
			Type = MultiToggle
			Toggles = [ IsOperational_BubbleSmallFront, IsOverclocked, CanOperate, CombinedBatteryStorage_SmallFront ]
			Mode = All
		}
		IsOperationalOverclocked_SmallRight :		IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleSmallRight, IsOverclocked, CanOperate, CombinedBatteryStorage_SmallRight ] }
		IsOperationalOverclocked_SmallBack :		IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleSmallBack, IsOverclocked, CanOperate, CombinedBatteryStorage_SmallBack ] }
		IsOperationalOverclocked_SmallLeft :		IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleSmallLeft, IsOverclocked, CanOperate, CombinedBatteryStorage_SmallLeft ] }
		IsOperationalOverclocked_LargeFront :		IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleLargeFront, IsOverclocked, CanOperate, CombinedBatteryStorage_LargeFront ] }
		IsOperationalOverclocked_LargeFrontRight :	IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleLargeFrontRight, IsOverclocked, CanOperate, CombinedBatteryStorage_LargeFrontRight ] }
		IsOperationalOverclocked_LargeBackRight :	IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleLargeBackRight, IsOverclocked, CanOperate, CombinedBatteryStorage_LargeBackRight ] }
		IsOperationalOverclocked_LargeBack :		IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleLargeBack, IsOverclocked, CanOperate, CombinedBatteryStorage_LargeBack ] }
		IsOperationalOverclocked_LargeBackLeft :	IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleLargeBackLeft, IsOverclocked, CanOperate, CombinedBatteryStorage_LargeBackLeft ] }
		IsOperationalOverclocked_LargeFrontLeft :	IsOperationalOverclocked_SmallFront	{ Toggles = [ IsOperational_BubbleLargeFrontLeft, IsOverclocked, CanOperate, CombinedBatteryStorage_LargeFrontLeft ] }
		
		OverclockHeatProducer_SmallFront
		{
			Type = ResourceConverter
			OperationalToggle = IsOperationalOverclocked_SmallFront
			HEAT_PER_INTERVAL = ceil((&~/OVERCLOCK/HEAT_PER_SECOND) * (&Interval)) / (&~/STATS/TOTAL_BATTERIES) * (&~/STATS/SMALL_SEGMENTS)
			ToQuantity = (&HEAT_PER_INTERVAL) * (&~/HEAT_TO_RESOURCE)
			ToStorage = HeatDistributionStorage
			Interval = 0.5
		}
		OverclockHeatProducer_SmallRight :		OverclockHeatProducer_SmallFront	{ OperationalToggle = IsOperationalOverclocked_SmallRight }
		OverclockHeatProducer_SmallBack :		OverclockHeatProducer_SmallFront	{ OperationalToggle = IsOperationalOverclocked_SmallBack }
		OverclockHeatProducer_SmallLeft :		OverclockHeatProducer_SmallFront	{ OperationalToggle = IsOperationalOverclocked_SmallLeft }
		OverclockHeatProducer_LargeFront :		OverclockHeatProducer_SmallFront
		{
			OperationalToggle = IsOperationalOverclocked_LargeFront
			HEAT_PER_INTERVAL = ceil((&~/OVERCLOCK/HEAT_PER_SECOND) * (&Interval)) / (&~/STATS/TOTAL_BATTERIES) * (&~/STATS/LARGE_SEGMENTS)
		}
		OverclockHeatProducer_LargeFrontRight :	OverclockHeatProducer_LargeFront	{ OperationalToggle = IsOperationalOverclocked_LargeFrontRight }
		OverclockHeatProducer_LargeBackRight :	OverclockHeatProducer_LargeFront	{ OperationalToggle = IsOperationalOverclocked_LargeBackRight }
		OverclockHeatProducer_LargeBack :		OverclockHeatProducer_LargeFront	{ OperationalToggle = IsOperationalOverclocked_LargeBack }
		OverclockHeatProducer_LargeBackLeft :	OverclockHeatProducer_LargeFront	{ OperationalToggle = IsOperationalOverclocked_LargeBackLeft }
		OverclockHeatProducer_LargeFrontLeft :	OverclockHeatProducer_LargeFront	{ OperationalToggle = IsOperationalOverclocked_LargeFrontLeft }
		
		// Heat Producer when being hit
		
		Overclock_BubbleArcShieldProxy_SmallFront
		{
			Type = MultiTrigger
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_SmallFront, Overclock_ArcShieldProxy_SmallFront ]
			}
		}
		Overclock_BubbleArcShieldProxy_SmallRight :			Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_SmallRight, Overclock_ArcShieldProxy_SmallRight ] }
		Overclock_BubbleArcShieldProxy_SmallBack :			Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_SmallBack, Overclock_ArcShieldProxy_SmallBack ] }
		Overclock_BubbleArcShieldProxy_SmallLeft :			Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_SmallLeft, Overclock_ArcShieldProxy_SmallLeft ] }
		Overclock_BubbleArcShieldProxy_LargeFront :			Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_LargeFront, Overclock_ArcShieldProxy_LargeFront ] }
		Overclock_BubbleArcShieldProxy_LargeFrontRight :	Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_LargeFrontRight, Overclock_ArcShieldProxy_LargeFrontRight ] }
		Overclock_BubbleArcShieldProxy_LargeBackRight :		Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_LargeBackRight, Overclock_ArcShieldProxy_LargeBackRight ] }
		Overclock_BubbleArcShieldProxy_LargeBack :			Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_LargeBack, Overclock_ArcShieldProxy_LargeBack ] }
		Overclock_BubbleArcShieldProxy_LargeBackLeft :		Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_LargeBackLeft, Overclock_ArcShieldProxy_LargeBackLeft ] }
		Overclock_BubbleArcShieldProxy_LargeFrontLeft :		Overclock_BubbleArcShieldProxy_SmallFront	{ ComponentIDs = [ Overclock_BubbleArcShieldProxyModular_LargeFrontLeft, Overclock_ArcShieldProxy_LargeFrontLeft ] }
		
		Overclock_BubbleArcShieldProxyModular_SmallFront	// For Modular, to prevent using it while disabled
		{
			Type = TriggerProxy
			ComponentID = Overclock_BubbleArcShieldProxy_SmallFront
			ProxyToggle = CanOperateProxy
		}
		Overclock_BubbleArcShieldProxyModular_SmallRight :		Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_SmallRight }
		Overclock_BubbleArcShieldProxyModular_SmallBack :		Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_SmallBack }
		Overclock_BubbleArcShieldProxyModular_SmallLeft :		Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_SmallLeft }
		Overclock_BubbleArcShieldProxyModular_LargeFront :		Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_LargeFront }
		Overclock_BubbleArcShieldProxyModular_LargeFrontRight :	Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_LargeFrontRight }
		Overclock_BubbleArcShieldProxyModular_LargeBackRight :	Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_LargeBackRight }
		Overclock_BubbleArcShieldProxyModular_LargeBack :		Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_LargeBack }
		Overclock_BubbleArcShieldProxyModular_LargeBackLeft :	Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_LargeBackLeft }
		Overclock_BubbleArcShieldProxyModular_LargeFrontLeft :	Overclock_BubbleArcShieldProxyModular_SmallFront	{ ComponentID = Overclock_BubbleArcShieldProxy_LargeFrontLeft }
		
		Overclock_BubbleArcShieldProxySelf_SmallFront	// To prevent generating heat while not being operative
		{
			Type = TriggerProxy
			ComponentID = Overclock_BubbleArcShieldProxy_SmallFront
			ProxyToggle = IsOperationalOverclocked_SmallFront
		}
		Overclock_BubbleArcShieldProxySelf_SmallRight :		Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_SmallRight
			ProxyToggle = IsOperationalOverclocked_SmallRight
		}
		Overclock_BubbleArcShieldProxySelf_SmallBack :		Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_SmallBack
			ProxyToggle = IsOperationalOverclocked_SmallBack
		}
		Overclock_BubbleArcShieldProxySelf_SmallLeft :		Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_SmallLeft
			ProxyToggle = IsOperationalOverclocked_SmallLeft
		}
		Overclock_BubbleArcShieldProxySelf_LargeFront :		Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_LargeFront
			ProxyToggle = IsOperationalOverclocked_LargeFront
		}
		Overclock_BubbleArcShieldProxySelf_LargeFrontRight :	Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_LargeFrontRight
			ProxyToggle = IsOperationalOverclocked_LargeFrontRight
		}
		Overclock_BubbleArcShieldProxySelf_LargeBackRight :	Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_LargeBackRight
			ProxyToggle = IsOperationalOverclocked_LargeBackRight
		}
		Overclock_BubbleArcShieldProxySelf_LargeBack :		Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_LargeBack
			ProxyToggle = IsOperationalOverclocked_LargeBack
		}
		Overclock_BubbleArcShieldProxySelf_LargeBackLeft :	Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_LargeBackLeft
			ProxyToggle = IsOperationalOverclocked_LargeBackLeft
		}
		Overclock_BubbleArcShieldProxySelf_LargeFrontLeft :	Overclock_BubbleArcShieldProxySelf_SmallFront
		{
			ComponentID = Overclock_BubbleArcShieldProxy_LargeFrontLeft
			ProxyToggle = IsOperationalOverclocked_LargeFrontLeft
		}
		
		Overclock_BubbleArcShieldProxySelf
		{
			Type = MultiTrigger
			Triggers = [Overclock_BubbleArcShieldProxySelf_SmallFront, Overclock_BubbleArcShieldProxySelf_SmallRight, Overclock_BubbleArcShieldProxySelf_SmallBack, Overclock_BubbleArcShieldProxySelf_SmallLeft, Overclock_BubbleArcShieldProxySelf_LargeFront, Overclock_BubbleArcShieldProxySelf_LargeFrontRight, Overclock_BubbleArcShieldProxySelf_LargeBackRight, Overclock_BubbleArcShieldProxySelf_LargeBack, Overclock_BubbleArcShieldProxySelf_LargeBackLeft, Overclock_BubbleArcShieldProxySelf_LargeFrontLeft]
		}

		BubbleOverloadValue
		{
			Type = MultiValue
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_BubbleCapacityReversedRight, BuffProvider_BubbleCapacityReversedLeft]
				ComponentIDs = [ BubbleOverloadValue, OverloadValue ]
			}
			Mode = Max
		}
		SelfBuffProviderOverload
		{
			Type = SelfBuffProvider
			BuffType = ShieldOverload
			BuffAmount = 1
			BuffMultiplier = BubbleOverloadValue
		}
		
		OverclockHitHeatProducer
		{
			Type = ResourceChange
			ResourceStorage = HeatDistributionStorage
			// Provides the post-resistance damage value as EffectScale
			Trigger = Overclock_BubbleArcShieldProxySelf
			Amount
			{
				BaseValue = "round((&~/OVERCLOCK/HEAT_PER_DAMAGE) * (&~/HEAT_TO_RESOURCE), 0)"
				Modifiers
				[
					{
						Type = EffectScale
						ModificationMode = Multiply
					}
					{
						Type = Buff
						BuffType = ShieldOverload
						ModificationMode = Multiply
					}
				]
			}
		}
		
		OverheatEffects : <./Data/ships/terran/base_part_terran_overclock.rules>/Part/Components/OverheatEffects
		{
			Location = [1, 1.5]
		}
		
		Router
		{
			Type = NetworkRouter
			RouteGenerators
			[
				{
					Type = Simple
					HEAT_INPUT = NetworkHeatInput
					Routes
					[
						[&../../HEAT_INPUT, Port_TL, 0]
						[&../../HEAT_INPUT, Port_TR, 0]
						[&../../HEAT_INPUT, Port_BL, 0]
						[&../../HEAT_INPUT, Port_BR, 0]
					]
				}
			]
		}
		Port_TL : <./Data/ships/terran/base_part_terran_overclock.rules>/Part/BASE_THERMAL_PORT
		{
			OperationalToggle = ModularOverclockModeToggle
			BlueprintOperationalToggle = &OperationalToggle
			Location = [0, 0]
			Direction = Up
		}
		Port_TR : Port_TL
		{
			Location = [1, 0]
		}
		Port_BL : Port_TL
		{
			Location = [0, 0]
			Direction = Down
		}
		Port_BR : Port_BL
		{
			Location = [1, 0]
		}

		Shield_Doodad_Graphics
		{
			Type = Graphics
			Location = [1, 0.5]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_high"
				//Offset = [0, 0]
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_0DMG
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_33DMG
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_66DMG
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
					}
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [1, 1]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 0.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 1]
					}
					{
						File = "floor_33.png"
						Size = [2, 1]
					}
					{
						File = "floor_66.png"
						Size = [2, 1]
					}
				]
			}
			
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 1]
					}
					{
						File = "walls_33.png"
						Size = [2, 1]
					}
					{
						File = "walls_66.png"
						Size = [2, 1]
					}
				]
			}
			
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 1]
					}
				]
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS PURPLE START ---------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Purple
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Purple
			Components = 
			{
				K_Graphics_Purple : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"purple/doodads_lightning1.png"
									"purple/doodads_lightning2.png"
									"purple/doodads_lightning3.png"
									"purple/doodads_lightning4.png"
									"purple/doodads_lightning5.png"
									"purple/doodads_lightning6.png"
									"purple/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"purple/doodads_lightning1.png"
									"purple/doodads_lightning2.png"
									"purple/doodads_lightning3.png"
									"purple/doodads_lightning4.png"
									"purple/doodads_lightning5.png"
									"purple/doodads_lightning6.png"
									"purple/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"purple/doodads_lightning1.png"
									"purple/doodads_lightning2.png"
									"purple/doodads_lightning3.png"
									"purple/doodads_lightning4.png"
									"purple/doodads_lightning5.png"
									"purple/doodads_lightning6.png"
									"purple/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "purple/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS PURPLE END -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS BLUE START -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Blue
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Blue
			Components = 
			{
				K_Graphics_Blue : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"blue/doodads_lightning1.png"
									"blue/doodads_lightning2.png"
									"blue/doodads_lightning3.png"
									"blue/doodads_lightning4.png"
									"blue/doodads_lightning5.png"
									"blue/doodads_lightning6.png"
									"blue/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"blue/doodads_lightning1.png"
									"blue/doodads_lightning2.png"
									"blue/doodads_lightning3.png"
									"blue/doodads_lightning4.png"
									"blue/doodads_lightning5.png"
									"blue/doodads_lightning6.png"
									"blue/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"blue/doodads_lightning1.png"
									"blue/doodads_lightning2.png"
									"blue/doodads_lightning3.png"
									"blue/doodads_lightning4.png"
									"blue/doodads_lightning5.png"
									"blue/doodads_lightning6.png"
									"blue/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "blue/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS BLUE END -------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS ORANGE START ---------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Orange
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Orange
			Components = 
			{
				K_Graphics_Orange : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"orange/doodads_lightning1.png"
									"orange/doodads_lightning2.png"
									"orange/doodads_lightning3.png"
									"orange/doodads_lightning4.png"
									"orange/doodads_lightning5.png"
									"orange/doodads_lightning6.png"
									"orange/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"orange/doodads_lightning1.png"
									"orange/doodads_lightning2.png"
									"orange/doodads_lightning3.png"
									"orange/doodads_lightning4.png"
									"orange/doodads_lightning5.png"
									"orange/doodads_lightning6.png"
									"orange/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"orange/doodads_lightning1.png"
									"orange/doodads_lightning2.png"
									"orange/doodads_lightning3.png"
									"orange/doodads_lightning4.png"
									"orange/doodads_lightning5.png"
									"orange/doodads_lightning6.png"
									"orange/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "orange/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS ORANGE END -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS RED START ------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Red
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Red
			Components = 
			{
				K_Graphics_Red : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"red/doodads_lightning1.png"
									"red/doodads_lightning2.png"
									"red/doodads_lightning3.png"
									"red/doodads_lightning4.png"
									"red/doodads_lightning5.png"
									"red/doodads_lightning6.png"
									"red/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"red/doodads_lightning1.png"
									"red/doodads_lightning2.png"
									"red/doodads_lightning3.png"
									"red/doodads_lightning4.png"
									"red/doodads_lightning5.png"
									"red/doodads_lightning6.png"
									"red/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"red/doodads_lightning1.png"
									"red/doodads_lightning2.png"
									"red/doodads_lightning3.png"
									"red/doodads_lightning4.png"
									"red/doodads_lightning5.png"
									"red/doodads_lightning6.png"
									"red/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "red/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS RED END --------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS YELLOW START ---------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Yellow
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Yellow
			Components = 
			{
				K_Graphics_Yellow : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"Yellow/doodads_lightning1.png"
									"Yellow/doodads_lightning2.png"
									"Yellow/doodads_lightning3.png"
									"Yellow/doodads_lightning4.png"
									"Yellow/doodads_lightning5.png"
									"Yellow/doodads_lightning6.png"
									"Yellow/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"Yellow/doodads_lightning1.png"
									"Yellow/doodads_lightning2.png"
									"Yellow/doodads_lightning3.png"
									"Yellow/doodads_lightning4.png"
									"Yellow/doodads_lightning5.png"
									"Yellow/doodads_lightning6.png"
									"Yellow/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"Yellow/doodads_lightning1.png"
									"Yellow/doodads_lightning2.png"
									"Yellow/doodads_lightning3.png"
									"Yellow/doodads_lightning4.png"
									"Yellow/doodads_lightning5.png"
									"Yellow/doodads_lightning6.png"
									"Yellow/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
					
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "Yellow/lights.png"
								Size = [2, 1]
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS YELLOW END -----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS GREEN START ----------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		ToggleComponents_Graphics_Green
		{
			Type = ToggledComponents
			Toggle = ToggleColour_Green
			Components = 
			{
				K_Graphics_Green : ~/Part/Components/Graphics
				{				
					OperationalDoodad
					{
						Layer = "weapons"
						Offset = [0, 0]
						DamageLevels
						[
							{
								AnimationFiles
								[
									"green/doodads_lightning1.png"
									"green/doodads_lightning2.png"
									"green/doodads_lightning3.png"
									"green/doodads_lightning4.png"
									"green/doodads_lightning5.png"
									"green/doodads_lightning6.png"
									"green/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"green/doodads_lightning1.png"
									"green/doodads_lightning2.png"
									"green/doodads_lightning3.png"
									"green/doodads_lightning4.png"
									"green/doodads_lightning5.png"
									"green/doodads_lightning6.png"
									"green/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
							{
								AnimationFiles
								[
									"green/doodads_lightning1.png"
									"green/doodads_lightning2.png"
									"green/doodads_lightning3.png"
									"green/doodads_lightning4.png"
									"green/doodads_lightning5.png"
									"green/doodads_lightning6.png"
									"green/doodads_lightning7.png"
								]
								Size = [2, 1]
								AnimationInterval = 0.1
							}
						]
					}
				}
			}
		}
		
		// -------------------------------------------------------------------------------------------------------------------------
		// GRAPHICS GREEN END ------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------
		
		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 0.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 1]
				}
				{
					File = "batteries2.png"
					Size = [2, 1]
				}
			]
		}
				
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		ScorchedTrigger
		{
			Type = ToggleTrigger
			Toggle = ScorchedToggle
			TriggerWhenOn = false
		}

		ScorchedEffects
		{
			Type = TriggeredEffects
			Trigger = ScorchedTrigger
			Location = &../DestroyedEffects/Location
			MediaEffects = &/COMMON_EFFECTS/MedPartScorched
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 0.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Scorched
				{
					Toggle = ScorchedToggle
					AtlasSprite = &/INDICATORS/Scorched
					HidesIndicators = [1,2]
				}

				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = HasEnergy
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 1]
			Offset = [0, 0]
		}

		HeatGenerationValue
		{
			Type = StaticValue
			Value = (&~/OVERCLOCK/HEAT_PER_SECOND)
		}
		HeatGenerationStatProvider
		{
			Type = StatProvider
			Stat = HeatGeneration
			OperationalToggle = ModularOverclockModeToggle
			ValueFrom = HeatGenerationValue
		}
	}

	Stats
	{
		PowerCapacity = (&~/STATS/POWER_CAPACITY) / 1000

		RecPower = (&../StatsByCategory/0/Stats/PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
	}
	
	StatsByCategory
	[
		{
			NameKey = "StatCategories/ShieldBubbleBonus"
			Stats
			{
				ShieldRadiusExp = (&<./Data/buffs/buffs.rules>/BubbleRadiusBase/Exponent)
				PowerUsageContinuous = (&~/STATS/POWER_DRAIN) / (&~/Part/Components/PowerDrain_SmallFront/Interval) / 1000
			}
		}
		{
			NameKey = "StatCategories/ShieldSegmentSmallBonus"
			Stats
			{
				ShieldHPBonus = (&~/Part/Components/BatteryStorage_1/MaxResources) * 3 / (&<../shield_sts_modular/shield_sts_modular.rules>/Part/Components/ArcShield/ResourceDrainPerDamage/BaseValue)
				ShieldPenResBonus = (&<../shield_sts_modular/shield_sts_modular.rules>/Part/Components/BaseResistanceBonus/Value)
				ShieldRadiusBonus = (&<./Data/buffs/buffs.rules>/BubbleRadiusSmall/Multiplier)
			}
		}
		{
			NameKey = "StatCategories/ShieldSegmentLargeBonus"
			Stats
			{
				ShieldHPBonus = (&~/Part/Components/BatteryStorage_1/MaxResources) * 2 / (&<../shield_stl_modular/shield_stl_modular.rules>/Part/Components/ArcShield/ResourceDrainPerDamage/BaseValue)
				ShieldPenResBonus = (&<../shield_stl_modular/shield_stl_modular.rules>/Part/Components/BaseResistanceBonus/Value)
				ShieldRadiusBonus = (&<./Data/buffs/buffs.rules>/BubbleRadiusLarge/Multiplier)
			}
		}
	]
	
	SecondaryToolTip
	{
		TitleKey = "StatCategories/Overclocked"
		DescriptionKey = "Parts/KebechetTINYmodularShieldBatteryOverclockDesc"
		StatsByCategory
		[
			{
				NameKey = "StatCategories/ShieldBubbleBonusOverclock"
				Stats
				{
					ShieldRadiusExp = (&<./Data/buffs/buffs.rules>/BubbleRadiusOverclock/Exponent)
					ShieldRotation = (&<./Data/buffs/buffs.rules>/BubbleRotationPenalty/Multiplier) * 100
//					PowerUsageContinuous = (&~/Part/StatsByCategory/0/Stats/PowerUsageContinuous)
					HeatGeneration = (&~/OVERCLOCK/HEAT_PER_SECOND)
				}
			}
			{
				NameKey = "StatCategories/ShieldSegmentSmallBonusOverclock"
				Stats
				{
					ShieldHPBonus = (&~/Part/StatsByCategory/1/Stats/ShieldHPBonus) / (&<../shield_sts_modular/shield_sts_modular.rules>/OVERCLOCK/DAMAGE_DRAIN_FACTOR)
					ShieldPenResBonus = (&<../shield_sts_modular/shield_sts_modular.rules>/Part/Components/OverclockResistanceBonus/Value)
					HeatPerDamage = (&~/OVERCLOCK/HEAT_PER_DAMAGE)
				}
			}
			{
				NameKey = "StatCategories/ShieldSegmentLargeBonusOverclock"
				Stats
				{
					ShieldHPBonus = (&~/Part/StatsByCategory/2/Stats/ShieldHPBonus) / (&<../shield_stl_modular/shield_stl_modular.rules>/OVERCLOCK/DAMAGE_DRAIN_FACTOR)
					ShieldPenResBonus = (&<../shield_stl_modular/shield_stl_modular.rules>/Part/Components/OverclockResistanceBonus/Value)
					HeatPerDamage = (&~/OVERCLOCK/HEAT_PER_DAMAGE)
				}
			}
		]

	StatsNotesKey = "Stats/ModularBatteryOverclockNotes"
	}

	StatsNotesKey = "Stats/ModularBatteryNotes"
}