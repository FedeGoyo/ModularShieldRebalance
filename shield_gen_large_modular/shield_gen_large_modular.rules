OVERCLOCK : <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/OVERCLOCK	{}

ROTATION
{
	LEFT = -140d
	FRONT = -90d
	RIGHT = -40d
}

Part : <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part
{
/*
	NameKey = "Parts/KebechetGenLargeModularShield"
	DescriptionKey = "Parts/KebechetGenLargeModularShieldDesc"
	ID = swefpifh.Kebechet_GenLarge_ModularShield
	IconNameKey = "Parts/KebechetGenLargeModularShieldIcon"
*/
	ID = cosmoteer.shield_gen_large
	OtherIDs = [swefpifh.Kebechet_GenLarge_ModularShield]
	IsBuildable = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [96, 96]
	}
	
	Components : ^/0/Components, <purple/purple.rules>/Components, <blue/blue.rules>/Components, <green/green.rules>/Components, <orange/orange.rules>/Components, <red/red.rules>/Components, <yellow/yellow.rules>/Components
	{
		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		Kebechet_GEN_Large_ToggleColours
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
		
		Kebechet_GEN_Large_ToggleColours_Purple
		{
			Type = ModeToggle
			Mode = Kebechet_GEN_Large_ToggleColours
			OnMode = 0
		}
		Kebechet_GEN_Large_ToggleColours_Blue :		Kebechet_GEN_Large_ToggleColours_Purple	{ OnMode = 1 }
		Kebechet_GEN_Large_ToggleColours_Orange :	Kebechet_GEN_Large_ToggleColours_Purple	{ OnMode = 2 }
		Kebechet_GEN_Large_ToggleColours_Red :		Kebechet_GEN_Large_ToggleColours_Purple	{ OnMode = 3 }
		Kebechet_GEN_Large_ToggleColours_Yellow :	Kebechet_GEN_Large_ToggleColours_Purple	{ OnMode = 4 }
		Kebechet_GEN_Large_ToggleColours_Green :	Kebechet_GEN_Large_ToggleColours_Purple	{ OnMode = 5 }
		
		// -----------------------------------------------
		// ANGLE TOGGLES ---------------------------------
		// -----------------------------------------------

		Kebechet_GEN_Large_ToggleAngle
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_GENL_Angle"
			Default = 1
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		Kebechet_GEN_Large_ToggleAngle_A160FrontArc
		{
			Type = ModeToggle
			Mode = Kebechet_GEN_Large_ToggleAngle
			OnMode = 1
		}

		Kebechet_GEN_Large_ToggleAngle_A160LeftArc : Kebechet_GEN_Large_ToggleAngle_A160FrontArc	{ OnMode = 0 }
		Kebechet_GEN_Large_ToggleAngle_A160RightArc : Kebechet_GEN_Large_ToggleAngle_A160FrontArc	{ OnMode = 2 }
		
		// -----------------------------------------------
		// DISPLAY TOGGLES -------------------------------
		// -----------------------------------------------
		
		Kebechet_GEN_Large_ToggleDisplay
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Display"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		Kebechet_GEN_Large_ToggleDisplay_On
		{
			Type = ModeToggle
			Mode = Kebechet_GEN_Large_ToggleDisplay
			OnMode = 0
		}

		Kebechet_GEN_Large_ToggleDisplay_Off : Kebechet_GEN_Large_ToggleDisplay_On	{ OnMode = 1 }
		
		// -----------------------------------------------
		// PROXY -----------------------------------------
		// -----------------------------------------------
		
		Kebechet_GEN_Large_ColoursProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_GEN_Large_ColoursSet
		}
		Kebechet_GEN_Large_ColoursSet
		{
			Type = MultiToggle
			Toggles = [Kebechet_GEN_Large_ToggleColours_Purple, Kebechet_GEN_Large_ToggleColours_Blue, Kebechet_GEN_Large_ToggleColours_Orange, Kebechet_GEN_Large_ToggleColours_Red, Kebechet_GEN_Large_ToggleColours_Yellow, Kebechet_GEN_Large_ToggleColours_Green]
			Mode = Any
		}
		
		Kebechet_GEN_Large_AngleProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_GEN_Large_AngleSet
		}
		Kebechet_GEN_Large_AngleSet
		{
			Type = MultiToggle
			Toggles = [Kebechet_GEN_Large_ToggleAngle_A160FrontArc, Kebechet_GEN_Large_ToggleAngle_A160LeftArc, Kebechet_GEN_Large_ToggleAngle_A160RightArc]
			Mode = Any
		}
		
		Kebechet_GEN_Large_DisplayProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_GEN_Large_DisplaySet
		}
		Kebechet_GEN_Large_DisplaySet
		{
			Type = MultiToggle
			Toggles = [Kebechet_GEN_Large_ToggleDisplay_Off, Kebechet_GEN_Large_ToggleDisplay_On]
			Mode = Any
		}

		// --------------------------------- END TOGGLES

		ProgressBar	// Remove or change color
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}

		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		// Starts Rotation
		
		RotationTween1
		{
			Type = ValueTween
			OnTweenDuration = 1
			OffTweenDuration = 1
			IsOnToggle = RotationFrontToggleToChain
		}
		RotationTween2 : RotationTween1	{ IsOnToggle = RotationRightToggle }
		
		Rotation2MinToggle
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween2
			MaxAmount = 0
		}
		RotationFrontUIToggle
		{
			Type = MultiToggle
			Toggles = [ Kebechet_GEN_Large_ToggleAngle_A160FrontArc, Kebechet_GEN_Large_ToggleAngle_A160RightArc, { Toggle=Kebechet_GEN_Large_ToggleAngle_A160LeftArc; Invert=true} ]
			Mode = Any
		}
		RotationFrontToggleToChain
		{
			Type = MultiToggle
			Toggles = [ RotationFrontUIToggle, { Toggle=Rotation2MinToggle; Invert=true } ]
			Mode = Any
		}
		
		Rotation1MaxToggle
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween1
			MinAmount = 1
		}
		RotationRightToggle
		{
			Type = MultiToggle
			Toggles = [ Rotation1MaxToggle, Kebechet_GEN_Large_ToggleAngle_A160RightArc ]
			Mode = All
		}

		TransformRotation1
		{
			Type = TransformLerp
			ValueFrom = RotationTween1
			Location = [1.5, 1.5]
			StartRotation = &~/ROTATION/LEFT
			EndRotation = &~/ROTATION/FRONT
		}
		TransformRotationFinal
		{
			Type = TransformLerp
			ValueFrom = RotationTween2
			ChainedTo = TransformRotation1
			StartRotation = 0d
			EndRotation = (&~/ROTATION/RIGHT) - (&~/ROTATION/FRONT)
		}
		
		// Finish Rotation

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - START //////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ArcShield : ^/0/ArcShield
		{
			OperationalToggle = IsOperationalProxy
			ChainedTo = TransformRotationFinal
			Location = [0, 0]	// Takes from TransformRotationFinal
			Rotation = 0d	// Takes from TransformRotationFinal
		}

		EmitterEffect : ^/0/EmitterEffect
		{
			OperationalToggle = IsOperationalProxy
			Location = [(&~/Part/Components/TransformRotation1/Location/1) , (&~/Part/Components/TransformRotation1/Location/0) - (&../^/0/Location/0)]	// The locations are switched cause it is rotated
			Rotation = (&../^/0/ArcShield/Rotation)
			ChainedTo	// Normally chained to ArcShield, but we don't want it to rotate
		}
		
		ShieldOperationEffects : ^/0/ShieldOperationEffects	{ Toggle = IsOperationalProxy }
		
		Overclock_ArcShieldProxy
		{
			Type = TriggerProxy
			ComponentID = GENL_ArcShield
			ProxyToggle = IsOverclocked
		}
		
		OverclockEffect : ^/0/OverclockEffect	{ OperationalToggle = IsOperationalProxy }
		OverloadEffect : ^/0/OverloadEffect	{ OperationalToggle = IsOperationalProxy }
		OverclockOverloadEffect : ^/0/OverclockOverloadEffect	{ OperationalToggle = IsOperationalProxy }
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - END ////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
}