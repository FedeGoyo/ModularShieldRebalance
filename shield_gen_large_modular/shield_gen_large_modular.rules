OVERCLOCK : <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/OVERCLOCK	{}

ROTATION
{
	LEFT = -140d
	FRONT = -90d
	RIGHT = -40d
}

Part : <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part
{
/*
	NameKey = "Parts/KebechetGenLargeModularShield"
	DescriptionKey = "Parts/KebechetGenLargeModularShieldDesc"
	ID = swefpifh.Kebechet_GenLarge_ModularShield
	IconNameKey = "Parts/KebechetGenLargeModularShieldIcon"
*/
	ID = cosmoteer.shield_gen_large
	OtherIDs = [swefpifh.Kebechet_GenLarge_ModularShield]
	IsBuildable = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [96, 96]
	}
	
	Components : ^/0/Components, <default/default.rules>/Components, <red/red.rules>/Components, <orange/orange.rules>/Components, <yellow/yellow.rules>/Components, <green/green.rules>/Components, <blue/blue.rules>/Components, <cyan/cyan.rules>/Components, <purple/purple.rules>/Components, <pink/pink.rules>/Components
	{
		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		ToggleColour
		{
			Type = UIToggle
			ToggleID = "Enderluck_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
				
		ToggleColour_Default
		{
			Type = ModeToggle
			Mode = ToggleColour
			OnMode = 0
		}
		ToggleColour_Red :		ToggleColour_Default	{ OnMode = 1 }
		ToggleColour_Orange :	ToggleColour_Default	{ OnMode = 2 }
		ToggleColour_Yellow :	ToggleColour_Default	{ OnMode = 3 }
		ToggleColour_Green :	ToggleColour_Default	{ OnMode = 4 }
		ToggleColour_Blue :		ToggleColour_Default	{ OnMode = 5 }
		ToggleColour_Cyan :		ToggleColour_Default	{ OnMode = 6 }
		ToggleColour_Purple :	ToggleColour_Default	{ OnMode = 7 }
		ToggleColour_Pink :		ToggleColour_Default	{ OnMode = 8 }
		
		// -----------------------------------------------
		// ANGLE TOGGLES ---------------------------------
		// -----------------------------------------------

		ToggleAngle
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_GENL_Angle"
			Default = 1
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleAngle_Arc_Front
		{
			Type = ModeToggle
			Mode = ToggleAngle
			OnMode = 1
		}

		ToggleAngle_Arc_Left : ToggleAngle_Arc_Front	{ OnMode = 0 }
		ToggleAngle_Arc_Right : ToggleAngle_Arc_Front	{ OnMode = 2 }
		
		// -----------------------------------------------
		// DISPLAY TOGGLES -------------------------------
		// -----------------------------------------------
		
		ToggleDisplay
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Display"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleDisplay_On
		{
			Type = ModeToggle
			Mode = ToggleDisplay
			OnMode = 0
		}

		ToggleDisplay_Off : ToggleDisplay_On	{ OnMode = 1 }

		// --------------------------------- END TOGGLES

		ProgressBar	// Remove or change color
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}

		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		// Starts Rotation
		
		RotationTween1
		{
			Type = ValueTween
			OnTweenDuration = 1
			OffTweenDuration = 1
			IsOnToggle = RotationFrontToggleToChain
		}
		RotationTween2 : RotationTween1	{ IsOnToggle = RotationRightToggle }
		
		Rotation2MinToggle
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween2
			MaxAmount = 0
		}
		RotationFrontUIToggle
		{
			Type = MultiToggle
			Toggles = [ ToggleAngle_Arc_Front, ToggleAngle_Arc_Right, { Toggle=ToggleAngle_Arc_Left; Invert=true} ]
			Mode = Any
		}
		RotationFrontToggleToChain
		{
			Type = MultiToggle
			Toggles = [ RotationFrontUIToggle, { Toggle=Rotation2MinToggle; Invert=true } ]
			Mode = Any
		}
		
		Rotation1MaxToggle
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween1
			MinAmount = 1
		}
		RotationRightToggle
		{
			Type = MultiToggle
			Toggles = [ Rotation1MaxToggle, ToggleAngle_Arc_Right ]
			Mode = All
		}

		TransformRotation1
		{
			Type = TransformLerp
			ValueFrom = RotationTween1
			Location = [&../../^/0/ArcShield/Location/0, &../../^/0/ArcShield/Location/1]
			StartRotation = &~/ROTATION/LEFT
			EndRotation = &~/ROTATION/FRONT
		}
		TransformRotationFinal
		{
			Type = TransformLerp
			ValueFrom = RotationTween2
			ChainedTo = TransformRotation1
			StartRotation = 0d
			EndRotation = (&~/ROTATION/RIGHT) - (&~/ROTATION/FRONT)
		}
		
		// Finish Rotation

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - START //////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ArcShield : ^/0/ArcShield
		{
			OperationalToggle = IsOperationalProxy
			ChainedTo = TransformRotationFinal
			Location = [0, 0]	// Takes from TransformRotationFinal
			Rotation = 0d	// Takes from TransformRotationFinal
			BlueprintArcSprite	{}
		}

		Toggle_BlueprintArc_Front
		{
			Type = MultiToggle
			Toggles = [ToggleAngle_Arc_Front, {Toggle=OverclockModeToggle, Invert=true}]
			Mode = All
		}
		Toggle_BlueprintArc_Right :	Toggle_BlueprintArc_Front	{ Toggles = [ToggleAngle_Arc_Right, {Toggle=OverclockModeToggle, Invert=true}] }
		Toggle_BlueprintArc_Left :	Toggle_BlueprintArc_Front	{ Toggles = [ToggleAngle_Arc_Left, {Toggle=OverclockModeToggle, Invert=true}] }

		BlueprintArc_Front
		{
			Type = ArcSprite
			VisibilityToggle = Toggle_BlueprintArc_Front
			Location = [&../../^/0/ArcShield/Location/0, &../../^/0/ArcShield/Location/1]
			Rotation = &~/ROTATION/FRONT
			Radius = &../ArcShield/Radius
			Arc = &../ArcShield/Arc/BaseValue
			SpriteSegments = &../ArcShield/BlueprintArcSpriteSegments
			Sprite : &../ArcShield/^/0/BlueprintArcSprite	{}
		}
		BlueprintArc_Right :	BlueprintArc_Front
		{
			VisibilityToggle = Toggle_BlueprintArc_Right
			Rotation = &~/ROTATION/RIGHT
		}
		BlueprintArc_Left :		BlueprintArc_Front
		{
			VisibilityToggle = Toggle_BlueprintArc_Left
			Rotation = &~/ROTATION/LEFT
		}

		Toggle_Overclock_BlueprintArc_Front
		{
			Type = MultiToggle
			Toggles = [ToggleAngle_Arc_Front, OverclockModeToggle]
			Mode = All
		}
		Toggle_Overclock_BlueprintArc_Right :	Toggle_Overclock_BlueprintArc_Front	{ Toggles = [ToggleAngle_Arc_Right, OverclockModeToggle] }
		Toggle_Overclock_BlueprintArc_Left :	Toggle_Overclock_BlueprintArc_Front	{ Toggles = [ToggleAngle_Arc_Left, OverclockModeToggle] }

		Overclock_BlueprintArc :	BlueprintArc_Front	// Named like this to override the original
		{
			VisibilityToggle = Toggle_Overclock_BlueprintArc_Front
			Arc = (&../ArcShield/Arc/BaseValue) * (&~/OVERCLOCK/ARC_FACTOR)
			Sprite : &<./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/Overclock_BlueprintArc/Sprite	{}
		}
		Overclock_BlueprintArc_Right :	Overclock_BlueprintArc
		{
			VisibilityToggle = Toggle_Overclock_BlueprintArc_Right
			Rotation = &~/ROTATION/RIGHT
		}
		Overclock_BlueprintArc_Left :	Overclock_BlueprintArc
		{
			VisibilityToggle = Toggle_Overclock_BlueprintArc_Left
			Rotation = &~/ROTATION/LEFT
		}

		BaseEmitterEffect : ^/0/BaseEmitterEffect
		{
			OperationalToggle = IsOperationalProxy
			Location = [&../../^/0/ArcShield/Location/0 , (&../../^/0/ArcShield/Location/1) - (&../^/0/Location/0)]	// The location is switched cause it is rotated
			Rotation = &../^/0/ArcShield/Rotation
			ChainedTo	// Normally chained to ArcShield, but we don't want it to rotate
		}
		
		ArcShield_ChainProxy	// No idea if this is actually needed. Chaining it instead to ArcShield with IsOperationalProxy seems to also work normally.
		{
			Type = ChainableProxy
			ComponentID = GENL_ArcShield
		}

		ShieldOperationEffects : <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/ShieldOperationEffects
		{
			ChainedTo = ArcShield_ChainProxy
			Location = [&~/Part/Components/ArcShield/Radius, 0]
		}

		Overclock_StartEffects : ShieldOperationEffects, <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/Overclock_StartEffects
		{
			Toggle = &^/1/Toggle	// IsOperationalOverclocked
			ToggledOffMediaEffects
			ToggledOnMediaEffects : &^/1/ToggledOnMediaEffects	[]
		}
		
		Overclock_ArcShieldProxy
		{
			Type = TriggerProxy
			ComponentID = GENL_ArcShield
			ProxyToggle = IsOverclocked
		}
		
		OverclockEffect :			^/0/OverclockEffect			{ OperationalToggle = IsOperationalProxy }
		OverloadEffect :			^/0/OverloadEffect			{ OperationalToggle = IsOperationalProxy }
		OverclockOverloadEffect :	^/0/OverclockOverloadEffect	{ OperationalToggle = IsOperationalProxy }
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - END ////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
}