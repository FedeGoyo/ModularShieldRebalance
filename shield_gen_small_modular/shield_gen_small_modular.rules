OVERCLOCK : <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/OVERCLOCK
{
	EXTENDED : ^/0/EXTENDED
	{
		ARC_LINERADIUS_FACTOR = 105%
	}	
}

STATS
{
	ROTATION_SPEED = 50	// degrees per second
	
	ARC_LEFT_ROTATION = -117.5d
	ARC_FRONT_ROTATION = -90d
	ARC_RIGHT_ROTATION = -62.5d
	
	LINE_LEFT_ROTATION = -109.7d
	LINE_FRONT_ROTATION = -90d
	LINE_RIGHT_ROTATION = -70.3d
		
	LINE_LEFT_LOCATION = [27, 75]
	LINE_FRONT_LOCATION = [1, 80]
	LINE_RIGHT_LOCATION = [-25, 75]
	
}

Part : <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part
{
/*
	NameKey = "Parts/KebechetGenSmallModularShield"
	DescriptionKey = "Parts/KebechetGenSmallModularShieldDesc"
	ID = swefpifh.Kebechet_GenSmall_ModularShield
	IconNameKey = "Parts/KebechetGenSmallModularShieldIcon"
*/
	ID = cosmoteer.shield_gen_small
	OtherIDs = [shield_generator, swefpifh.Kebechet_GenSmall_ModularShield]
	IsBuildable = true
	ReceivableBuffs : ^/0/ReceivableBuffs [ ShieldOverclockExtendedLine, ShieldLine ]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	
	Components : ^/0/Components, <purple/purple.rules>/Components, <blue/blue.rules>/Components, <green/green.rules>/Components, <orange/orange.rules>/Components, <red/red.rules>/Components, <yellow/yellow.rules>/Components
	{
		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		Kebechet_GEN_Small_ToggleColours
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
				
		Kebechet_GEN_Small_ToggleColours_Purple
		{
			Type = ModeToggle
			Mode = Kebechet_GEN_Small_ToggleColours
			OnMode = 0
		}
		Kebechet_GEN_Small_ToggleColours_Blue :		Kebechet_GEN_Small_ToggleColours_Purple	{ OnMode = 1 }
		Kebechet_GEN_Small_ToggleColours_Orange :	Kebechet_GEN_Small_ToggleColours_Purple	{ OnMode = 2 }
		Kebechet_GEN_Small_ToggleColours_Red :		Kebechet_GEN_Small_ToggleColours_Purple	{ OnMode = 3 }
		Kebechet_GEN_Small_ToggleColours_Yellow :	Kebechet_GEN_Small_ToggleColours_Purple	{ OnMode = 4 }
		Kebechet_GEN_Small_ToggleColours_Green :	Kebechet_GEN_Small_ToggleColours_Purple	{ OnMode = 5 }

		// -----------------------------------------------
		// ANGLE TOGGLES ---------------------------------
		// -----------------------------------------------

		Kebechet_GEN_Small_ToggleAngle
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_GENS_Angle"
			Default = 1
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		Kebechet_GEN_Small_ToggleAngle_A90FrontArc
		{
			Type = ModeToggle
			Mode = Kebechet_GEN_Small_ToggleAngle
			OnMode = 1
		}
		
		Kebechet_GEN_Small_ToggleAngle_A90FrontLine : Kebechet_GEN_Small_ToggleAngle_A90FrontArc	{ OnMode = 4 }
		Kebechet_GEN_Small_ToggleAngle_A22LeftLine : Kebechet_GEN_Small_ToggleAngle_A90FrontArc		{ OnMode = 3 }
		Kebechet_GEN_Small_ToggleAngle_A22RightLine : Kebechet_GEN_Small_ToggleAngle_A90FrontArc	{ OnMode = 5 }
		Kebechet_GEN_Small_ToggleAngle_A90LeftArc : Kebechet_GEN_Small_ToggleAngle_A90FrontArc		{ OnMode = 0 }
		Kebechet_GEN_Small_ToggleAngle_A90RightArc : Kebechet_GEN_Small_ToggleAngle_A90FrontArc		{ OnMode = 2 }
		
		// -----------------------------------------------
		// DISPLAY TOGGLES -------------------------------
		// -----------------------------------------------
		
		Kebechet_GEN_Small_ToggleDisplay
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Display"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		Kebechet_GEN_Small_ToggleDisplay_On
		{
			Type = ModeToggle
			Mode = Kebechet_GEN_Small_ToggleDisplay
			OnMode = 0
		}

		Kebechet_GEN_Small_ToggleDisplay_Off : Kebechet_GEN_Small_ToggleDisplay_On	{ OnMode = 1 }
		
		// -----------------------------------------------
		// PROXY -----------------------------------------
		// -----------------------------------------------
		
		Kebechet_GEN_Small_ColoursProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_GEN_Small_ColoursSet
		}
			Kebechet_GEN_Small_ColoursSet
			{
				Type = MultiToggle
				Toggles = [Kebechet_GEN_Small_ToggleColours_Purple, Kebechet_GEN_Small_ToggleColours_Blue, Kebechet_GEN_Small_ToggleColours_Orange, Kebechet_GEN_Small_ToggleColours_Red, Kebechet_GEN_Small_ToggleColours_Yellow, Kebechet_GEN_Small_ToggleColours_Green]
				Mode = Any
			}
		
		Kebechet_GEN_Small_AngleProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_GEN_Small_AngleSet
		}
			Kebechet_GEN_Small_AngleSet
			{
				Type = MultiToggle
				Toggles = [Kebechet_GEN_Small_ToggleAngle_A90FrontArc, Kebechet_GEN_Small_ToggleAngle_A90FrontLine, Kebechet_GEN_Small_ToggleAngle_A22LeftLine, Kebechet_GEN_Small_ToggleAngle_A22RightLine, Kebechet_GEN_Small_ToggleAngle_A90LeftArc, Kebechet_GEN_Small_ToggleAngle_A90RightArc]
				Mode = Any
			}
		
		Kebechet_GEN_Small_DisplayProxy
		{
			Type = ToggleProxy
			ComponentID = Kebechet_GEN_Small_DisplaySet
		}
			Kebechet_GEN_Small_DisplaySet
			{
				Type = MultiToggle
				Toggles = [Kebechet_GEN_Small_ToggleDisplay_Off, Kebechet_GEN_Small_ToggleDisplay_On]
				Mode = Any
			}
		
		// --------------------------------- END TOGGLES
		
		ProgressBar // borrar o cambiar colores
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}

		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		// Starts Rotation for Arcs
		
		ArcToggle
		{
			Type = MultiToggle
			Toggles = [ Kebechet_GEN_Small_ToggleAngle_A90LeftArc, Kebechet_GEN_Small_ToggleAngle_A90FrontArc, Kebechet_GEN_Small_ToggleAngle_A90RightArc ]
			Mode = Any
		}
		
		RotationTween_Arc_LeftToFront
		{
			Type = ValueTween
			OnTweenDuration = 0.55
			OffTweenDuration = &OnTweenDuration
			IsOnToggle = RotationToggle_Arc_Front
		}
		RotationTween_Arc_FrontToRight : RotationTween_Arc_LeftToFront	{ IsOnToggle = RotationToggle_Arc_Right }
		
		RotationToggle_Arc_IsNotRight
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween_Arc_FrontToRight
			MaxAmount = 0
		}
		RotationToggle_Arc_UIFront
		{
			Type = MultiToggle
			Toggles = [ Kebechet_GEN_Small_ToggleAngle_A90FrontArc, Kebechet_GEN_Small_ToggleAngle_A90RightArc, { Toggle=Kebechet_GEN_Small_ToggleAngle_A90LeftArc; Invert=true} ]
			Mode = Any
		}
		RotationToggle_Arc_Front
		{
			Type = MultiToggle
			Toggles = [ RotationToggle_Arc_UIFront, { Toggle=RotationToggle_Arc_IsNotRight; Invert=true } ]
			Mode = Any
		}
		
		RotationToggle_Arc_IsFront
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween_Arc_LeftToFront
			MinAmount = 1
		}
		RotationToggle_Arc_Right
		{
			Type = MultiToggle
			Toggles = [ RotationToggle_Arc_IsFront, Kebechet_GEN_Small_ToggleAngle_A90RightArc ]
			Mode = All
		}

		Transform_Arc_Rotation_LeftToFront
		{
			Type = TransformLerp
			ValueFrom = RotationTween_Arc_LeftToFront
			Location = [1.5, 1.5]
			StartRotation = &~/STATS/ARC_LEFT_ROTATION
			EndRotation = &~/STATS/ARC_FRONT_ROTATION
		}
		Transform_Arc_Rotation_FrontToRight
		{
			Type = TransformLerp
			ValueFrom = RotationTween_Arc_FrontToRight
			ChainedTo = Transform_Arc_Rotation_LeftToFront
			StartRotation = 0
			EndRotation = (&~/STATS/ARC_RIGHT_ROTATION) - (&~/STATS/ARC_FRONT_ROTATION)
		}
		
		// Starts Rotation for Lines
		
		LineToggle
		{
			Type = MultiToggle
			Toggles = [ Kebechet_GEN_Small_ToggleAngle_A22LeftLine, Kebechet_GEN_Small_ToggleAngle_A90FrontLine, Kebechet_GEN_Small_ToggleAngle_A22RightLine ]
			Mode = Any
		}
		LineModeRawValue
		{
			Type = ValueTween
			IsOnToggle = LineToggle
			OnTweenDuration = &~/OVERCLOCK/MODE_SWITCH_TIME
			OffTweenDuration = &OnTweenDuration
		}
		Overclock_ExtendedLineModeValue
		{
			Type = MultiValue
			Values = [ Overclock_ExtendedModeRawValue, OverclockStateValue, LineModeRawValue ]
			Mode = Min
		}
		Overclock_ExtendedLineModeBuff
		{
			Type = SelfBuffProvider
			OperationalToggle = IsOverclocked
			BuffType = ShieldOverclockExtendedLine
			BuffMultiplier = Overclock_ExtendedLineModeValue
		}
		LineModeBuff
		{
			Type = SelfBuffProvider
			OperationalToggle = IsOperational
			BuffType = ShieldLine
			BuffMultiplier = LineModeRawValue
		}
		
		RotationTween_Line_LeftToFront
		{
			Type = ValueTween
			OnTweenDuration = 0.394
			OffTweenDuration = &OnTweenDuration
			IsOnToggle = RotationToggle_Line_Front
		}
		RotationTween_Line_FrontToRight : RotationTween_Line_LeftToFront	{ IsOnToggle = RotationToggle_Line_Right }
		
		RotationToggle_Line_IsNotRight
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween_Line_FrontToRight
			MaxAmount = 0
		}
		RotationToggle_Line_UIFront
		{
			Type = MultiToggle
			Toggles = [ Kebechet_GEN_Small_ToggleAngle_A90FrontLine, { Toggle=Kebechet_GEN_Small_ToggleAngle_A22LeftLine; Invert=true } ]
			Mode = Any
		}
		RotationToggle_Line_Front
		{
			Type = MultiToggle
			Toggles = [ RotationToggle_Line_UIFront, { Toggle=RotationToggle_Line_IsNotRight; Invert=true } ]
			Mode = Any
		}
		
		RotationToggle_IsFront
		{
			Type = ThresholdToggle
			AmountFrom = RotationTween_Line_LeftToFront
			MinAmount = 1
		}
		RotationToggle_Line_Right
		{
			Type = MultiToggle
			Toggles = [ RotationToggle_IsFront, Kebechet_GEN_Small_ToggleAngle_A22RightLine ]
			Mode = All
		}

		Transform_Line_Rotation_LeftToFront
		{
			Type = TransformLerp
			ValueFrom = RotationTween_Line_LeftToFront
			StartLocation = &~/STATS/LINE_LEFT_LOCATION
			StartRotation = &~/STATS/LINE_LEFT_ROTATION
			EndLocation = &~/STATS/LINE_FRONT_LOCATION
			EndRotation = &~/STATS/LINE_FRONT_ROTATION
		}
		Transform_Line_Rotation_FrontToRight
		{
			Type = TransformLerp
			ValueFrom = RotationTween_Line_FrontToRight
			ChainedTo = Transform_Line_Rotation_LeftToFront
			StartLocation = [0, 0]
			StartRotation = 0d
			EndLocation = [(&~/STATS/LINE_FRONT_LOCATION/1) - (&~/STATS/LINE_RIGHT_LOCATION/1), (&~/STATS/LINE_RIGHT_LOCATION/0) - (&~/STATS/LINE_FRONT_LOCATION/0)] // It is rotated to the right. Therefore X and Y are switched, and also Y is also reflected			EndRotation = (&~/STATS/LINE_RIGHT_ROTATION) - (&~/STATS/LINE_FRONT_ROTATION)
			EndRotation = (&~/STATS/LINE_RIGHT_ROTATION) - (&~/STATS/LINE_FRONT_ROTATION)
		}
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - START //////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ArcShield : ^/0/ArcShield
		{
			OperationalToggle = IsOperationalProxy
			Location = [0, 0]
			Rotation = 0d
			ChainedTo = Transform_Arc_Rotation_FrontToRight
			Radius : ^/0/Radius
			{
				BaseValue = 7.5
				Modifiers
				[
					{
						Type = BuffRemap
						BuffType = ShieldOverclockExtended
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, &~/OVERCLOCK/EXTENDED/ARC_RADIUS_FACTOR ]
					}
					{
						Type = BuffRemap
						BuffType = ShieldOverclockExtendedLine
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, (1 / 1.5) * (&<shield_gen_small_modular.rules>/OVERCLOCK/EXTENDED/ARC_LINERADIUS_FACTOR)]
					}
					{
						Type = BuffRemap
						BuffType = ShieldLine
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, 85 / 7.5]
					}
				]
			}
			Arc : ^/0/Arc
			{
				BaseValue = 90d
				Modifiers
				[
					{
						Type = BuffRemap
						BuffType = ShieldOverclockExtended
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, &~/OVERCLOCK/EXTENDED/ARC_FACTOR ]
					}
					{
						Type = BuffRemap
						BuffType = ShieldOverclockReinforced
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, &~/OVERCLOCK/REINFORCED/ARC_FACTOR ]
					}
					{
						Type = BuffRemap
						BuffType = ShieldLine
						ModificationMode = Divide
						RemapFrom = [0, 1]
						RemapTo = [1, 90 / 7.15 ]
					}
				]
			}
						
			ShieldMediaEffects
			[
				: &../^/0/ShieldMediaEffects/0
				{
					Radius = &../../Radius
					Arc = &../../Arc
				}
				: &../^/0/ShieldMediaEffects/1 {}
			]
			HitMediaEffects
			[
				: &../^/0/HitMediaEffects/0
				{
					Radius = &../../Radius
					Arc = 2d
				}
				: &../^/0/HitMediaEffects/1 {}
			]
		}
		
		EmitterEffect : ^/0/EmitterEffect
		{
			OperationalToggle = IsOperationalProxy
		}
		
		// Proxy to OverloadEffect and OverclockOverloadEffect???
		
		Overclock_ArcShieldProxy
		{
			Type = TriggerProxy
			ComponentID = GENS_ArcShield
			ProxyToggle = IsOperationalOverclocked
		}
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - END ////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	/*	
		OverclockBuff
		{
			Type = SelfBuffProvider
			OperationalToggle = IsOverclocked
			BuffType = Overclock
			BuffMultiplier = OverclockStateValue
		}
		
		OverclockStateValue
		{
			Type = ValueTween
			IsOnToggle = OverclockModeToggle
			OnTweenDuration = 1;
			OffTweenDuration = 0.1;
		}
		*/
		
	}

	Stats 	// Make it inherit? Exactly same as Small Shield
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&../StatsByCategory/0/Stats/PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
	}
	
	StatsByCategory
	[
		{
			NameKey = "StatCategories/ShieldSmall"
			Stats
			{
				ShieldHP = (&~/Part/Components/BatteryStorage/MaxResources) / (&~/Part/Components/ArcShield/ResourceDrainPerDamage/BaseValue)
				ShieldPenResist = &~/Part/Components/ArcShield/PenetrationResistance/0
//				ShieldArc = deg(&~/Part/Components/ArcShield/Arc/BaseValue)
//				ShieldDist = (&~/Part/Components/ArcShield/Radius) - (&~/Part/Components/ArcShield/Location/1)
				PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
			}
		}
	]
	
	SecondaryToolTip
	{
		TitleKey = "StatCategories/Overclocked"
		Stats
		{
			HeatGeneration = (&~/OVERCLOCK/HEAT_PER_SECOND)
		}
		StatsByCategory
		[
			{
				NameKey = "StatCategories/ShieldExtended"
				Stats
				{
//					ShieldArc = deg(&~/Part/Components/ArcShield/Arc/BaseValue) * (&~/OVERCLOCK/EXTENDED/ARC_FACTOR)
//					ShieldDist = (&~/Part/Components/ArcShield/Radius/BaseValue) * (&~/OVERCLOCK/EXTENDED/ARC_RADIUS_FACTOR)
					HeatPerDamage = (&~/OVERCLOCK/EXTENDED/HEAT_PER_DAMAGE)
				}
			}
			{
				NameKey = "StatCategories/ShieldReinforced"
				Stats
				{
//					ShieldArc = deg(&~/Part/Components/ArcShield/Arc/BaseValue) * (&~/OVERCLOCK/REINFORCED/ARC_FACTOR)
//					ShieldHP = (&~/Part/StatsByCategory/0/Stats/ShieldHP) / (&~/OVERCLOCK/REINFORCED/DAMAGE_DRAIN_FACTOR)
					EMPResistPercentage = (&~/OVERCLOCK/REINFORCED/EMP_RESIST) * 100
					HeatPerDamage = (&~/OVERCLOCK/REINFORCED/HEAT_PER_DAMAGE)
				}
			}
		]
	}
	
}