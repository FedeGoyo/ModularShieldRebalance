OVERCLOCK
{
	DAMAGE_DRAIN_FACTOR = 1 / 150%
	EMP_RESIST = 33%
	HEAT_PER_SECOND = 40	// x6
	HEAT_PER_DAMAGE = 0.6
}
HEAT_TO_RESOURCE = &<./Data/statuses/heat/heat.rules>/STATUS_TO_RESOURCE_RATIO
HEAT_TO_STATUS = &<./Data/statuses/heat/heat.rules>/RESOURCE_TO_STATUS_RATIO

Part : <./Data/ships/terran/base_part_terran_overclock.rules>/Part
{
	NameKey = "Parts/KebechetSTLmodularShield"
	IconNameKey = "Parts/KebechetSTLmodularShieldIcon"
	DescriptionKey = "Parts/KebechetSTLmodularShieldDesc"
	ID = swefpifh.Kebechet_STL_modularShield
	EditorGroup = "Defenses"
	Resources
	[
		[steel, 120]
		[diamond, 3]
		[processor, 4] 
	]
	AIValueFactor = 5
	Size = [4, 4]
	PhysicalRect = [0, 0, 4, 4] // For backwards compatibility with old shield generators.
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeID = "shield_gen_stl"
	SelectionTypeByRotation = false
	MaxHealth = 10000
	TypeCategories = [defense, uses_power, bubble_shield]
	ReceivableBuffs : ^/0/ReceivableBuffs [BubbleResistanceBonus, BubbleRadiusBonus, BubbleCapacityReversed]
	PenetrationRectType = Normal
	AllowedDoorLocations
	[
		[1, -1] // Haut
		[2, -1]
		
		[1, 4] // Bas
		[2, 4]
		
		[-1, 1] // Gauche
		[-1, 2]
		
		[4, 1] // Droite
		[4, 2]
	]
	
	IsRotateable = false
	IgnoreRotationForMirroredSelection = true
	IsFlippable = false
	
	ForceManhattanPathInPart = true
	BlockedTravelCells
	[
		[1, 1]
		[1, 2]
		[2, 1]
		[2, 2]
	]

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components, <purple/purple.rules>/Components, <blue/blue.rules>/Components, <green/green.rules>/Components, <orange/orange.rules>/Components, <red/red.rules>/Components, <yellow/yellow.rules>/Components
	{

		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		ToggleColour
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
		
		ToggleColour_Purple
		{
			Type = ModeToggle
			Mode = ToggleColour
			OnMode = 0
		}
		ToggleColour_Blue :		ToggleColour_Purple	{ OnMode = 1 }
		ToggleColour_Orange :	ToggleColour_Purple	{ OnMode = 2 }
		ToggleColour_Red :		ToggleColour_Purple	{ OnMode = 3 }
		ToggleColour_Yellow :	ToggleColour_Purple	{ OnMode = 4 }
		ToggleColour_Green :	ToggleColour_Purple	{ OnMode = 5 }

		// -----------------------------------------------
		// DISPLAY TOGGLES -------------------------------
		// -----------------------------------------------
		
		ToggleDisplay
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Display"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleDisplay_On
		{
			Type = ModeToggle
			Mode = ToggleDisplay
			OnMode = 0
		}

		ToggleDisplay_Off : ToggleDisplay_On	{ OnMode = 1 }

		// -----------------------------------------------
		// PROXY -----------------------------------------
		// -----------------------------------------------
		
		ColoursProxy
		{
			Type = ToggleProxy
			ComponentID = ColoursSet
		}
		ColoursSet
		{
			Type = MultiToggle
			Toggles = [ToggleColour_Purple, ToggleColour_Blue, ToggleColour_Orange, ToggleColour_Red, ToggleColour_Yellow, ToggleColour_Green]
			Mode = Any
		}

		DisplayProxy
		{
			Type = ToggleProxy
			ComponentID = DisplaySet
		}
		DisplaySet
		{
			Type = MultiToggle
			Toggles = [ToggleDisplay_Off, ToggleDisplay_On]
			Mode = Any
		}

		// --------------------------------- END TOGGLES
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL] // ModularCombinedBatteryStorage // CombinedBatteryStorage
			Mode = All
		}
		IsOperationalBubble
		{
			Type = ToggleProxy
			ComponentID = IsOperational
		}
		
		IsOperationalNonOverclocked
		{
			Type = MultiToggle
			Toggles = [ IsOperational, { Toggle=IsOverclocked; Invert=true } ]
			Mode = All
		}
		
		IsNonOverclocked
		{
			Type = MultiToggle
			Toggles = [IsOverclocked]
			Invert = true
			Mode = All
		}
		IsNonOverclockedProxy
		{
			Type = ToggleProxy
			ComponentID = IsNonOverclocked
		}

		CommandConsumptionToggle
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		ScorchedToggle
		{
			Type = StatusToggle
			StatusType = cosmoteer.scorched
			MinStatusValue = 1
			Invert = true
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = CommandConsumptionToggle
			CommandPoints = 8
		}

		// Starts Normal Batteries

		BatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			IsDrainable = true
			ResourceStorages = [CombinedBatteryStorage_Front, CombinedBatteryStorage_FrontRight, CombinedBatteryStorage_BackRight, CombinedBatteryStorage_Back, CombinedBatteryStorage_BackLeft, CombinedBatteryStorage_FrontLeft]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			RemoveMode = DistributeEvenly
			ToggleOnResources = 7001
			DrainResistance
			{
				BaseValue = 0
				Modifiers
				[
					{
						Type = BuffRemap
						BuffType = Overclock
						ModificationMode = Add
						RemapFrom = [0, 1]
						RemapTo = [0, (&~/OVERCLOCK/EMP_RESIST)]
					}
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Subtract
					}
				]
			}
		}
		ProgressBarSegments
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}

		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			IsDrainable = false
			ResourceStorages = [BatteryStorage_Front, BatteryStorage_FrontRight, BatteryStorage_BackRight, BatteryStorage_Back, BatteryStorage_BackLeft, BatteryStorage_FrontLeft]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			AddMode = DistributeEvenly
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = CombinedBatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		// Segments
		
		IsOperational_LargeFront
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage_Front, ScorchedToggle, IsOperational]
			Mode = All
		}
		IsOperationalOverloaded_Front :				IsOperational_LargeFront	{ Toggles = [IsOperational_LargeFront, IsOperationalOverloaded] }
		OverclockedEffectToggle_Front :				IsOperational_LargeFront	{ Toggles = [IsOperational_LargeFront, OverclockedEffectToggle] }
		IsOperationalOverclockedOverloaded_Front :	IsOperational_LargeFront	{ Toggles = [IsOperational_LargeFront, IsOperationalOverclockedOverloaded] }
		BatteryStorage_Front
		{
			Type = ResourceStorage
			ResourceType = battery
			IsDrainable = false
			MaxResources = 4000
			ToggleOnResources = 4000
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		CombinedBatteryStorage_Front
		{
			Type = MultiResourceStorage
			ResourceType = battery
			IsDrainable = false
			OperationalToggle = IsOverclocked
			ResourceStorages = [BatteryStorage_Front]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_Top, BuffProvider_Right, BuffProvider_Bottom, BuffProvider_Left]
				ComponentID = BatteryStorageProxy_LargeFront
			}
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			RemoveMode = InReverseOrder
		}
		PowerDrain_Front
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational_LargeFront
			FromStorage = BatteryStorage_Front
			FromQuantity = 50
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		
		IsOperational_LargeFrontRight : 				IsOperational_LargeFront				{ Toggles = [PowerToggle, BatteryStorage_FrontRight, ScorchedToggle, IsOperational] }
		IsOperationalOverloaded_FrontRight :			IsOperational_LargeFront				{ Toggles = [IsOperational_LargeFrontRight, IsOperationalOverloaded] }
		OverclockedEffectToggle_FrontRight :			IsOperational_LargeFront				{ Toggles = [IsOperational_LargeFrontRight, OverclockedEffectToggle] }
		IsOperationalOverclockedOverloaded_FrontRight :	IsOperational_LargeFront				{ Toggles = [IsOperational_LargeFrontRight, IsOperationalOverclockedOverloaded] }
		BatteryStorage_FrontRight : 					BatteryStorage_Front					{}
		CombinedBatteryStorage_FrontRight :				CombinedBatteryStorage_Front
		{
			ResourceStorages = [BatteryStorage_FrontRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFrontRight }
		}
		PowerDrain_FrontRight : 						PowerDrain_Front
		{
			OperationalToggle = IsOperational_LargeFrontRight
			FromStorage = BatteryStorage_FrontRight
		}
		
		IsOperational_LargeBackRight : 					IsOperational_LargeFront				{ Toggles = [PowerToggle, BatteryStorage_BackRight, ScorchedToggle, IsOperational] }
		IsOperationalOverloaded_BackRight :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBackRight, IsOperationalOverloaded] }
		OverclockedEffectToggle_BackRight :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBackRight, OverclockedEffectToggle] }
		IsOperationalOverclockedOverloaded_BackRight :	IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBackRight, IsOperationalOverclockedOverloaded] }
		BatteryStorage_BackRight : 						BatteryStorage_Front					{}
		CombinedBatteryStorage_BackRight :				CombinedBatteryStorage_Front
		{
			ResourceStorages = [BatteryStorage_BackRight]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBackRight }
		}
		PowerDrain_BackRight : 							PowerDrain_Front
		{
			OperationalToggle = IsOperational_LargeBackRight
			FromStorage = BatteryStorage_BackRight
		}
		
		IsOperational_LargeBack : 					IsOperational_LargeFront				{ Toggles = [PowerToggle, BatteryStorage_Back, ScorchedToggle, IsOperational] }
		IsOperationalOverloaded_Back :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBack, IsOperationalOverloaded] }
		OverclockedEffectToggle_Back :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBack, OverclockedEffectToggle] }
		IsOperationalOverclockedOverloaded_Back :	IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBack, IsOperationalOverclockedOverloaded] }
		BatteryStorage_Back : 						BatteryStorage_Front					{}
		CombinedBatteryStorage_Back :				CombinedBatteryStorage_Front
		{
			ResourceStorages = [BatteryStorage_Back]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBack }
		}
		PowerDrain_Back : 							PowerDrain_Front
		{
			OperationalToggle = IsOperational_LargeBack
			FromStorage = BatteryStorage_Back
		}

		IsOperational_LargeBackLeft : 					IsOperational_LargeFront				{ Toggles = [PowerToggle, BatteryStorage_BackLeft, ScorchedToggle, IsOperational] }
		IsOperationalOverloaded_BackLeft :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBackLeft, IsOperationalOverloaded] }
		OverclockedEffectToggle_BackLeft :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBackLeft, OverclockedEffectToggle] }
		IsOperationalOverclockedOverloaded_BackLeft :	IsOperational_LargeFront				{ Toggles = [IsOperational_LargeBackLeft, IsOperationalOverclockedOverloaded] }
		BatteryStorage_BackLeft : 						BatteryStorage_Front					{}
		CombinedBatteryStorage_BackLeft :				CombinedBatteryStorage_Front
		{
			ResourceStorages = [BatteryStorage_BackLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeBackLeft }
		}
		PowerDrain_BackLeft : 							PowerDrain_Front
		{
			OperationalToggle = IsOperational_LargeBackLeft
			FromStorage = BatteryStorage_BackLeft
		}
		
		IsOperational_LargeFrontLeft : 					IsOperational_LargeFront				{ Toggles = [PowerToggle, BatteryStorage_FrontLeft, ScorchedToggle, IsOperational] }
		IsOperationalOverloaded_FrontLeft :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeFrontLeft, IsOperationalOverloaded] }
		OverclockedEffectToggle_FrontLeft :				IsOperational_LargeFront				{ Toggles = [IsOperational_LargeFrontLeft, OverclockedEffectToggle] }
		IsOperationalOverclockedOverloaded_FrontLeft :	IsOperational_LargeFront				{ Toggles = [IsOperational_LargeFrontLeft, IsOperationalOverclockedOverloaded] }
		BatteryStorage_FrontLeft : 						BatteryStorage_Front					{}
		CombinedBatteryStorage_FrontLeft :				CombinedBatteryStorage_Front
		{
			ResourceStorages = [BatteryStorage_FrontLeft]
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_LargeFrontLeft }
		}
		PowerDrain_FrontLeft : 							PowerDrain_Front
		{
			OperationalToggle = IsOperational_LargeFrontLeft
			FromStorage = BatteryStorage_FrontLeft
		}

		// Ends Normal Batteries

		// Start Modular Battery
		
		BuffProvider_Top
		{
			Type = AreaBuffProvider
			BuffType = BubbleCapacity
			BuffArea = [1, -1, 2, 1]
			OperationalToggle = IsOperational
			Criteria
			{
				Top = -2
				Bottom = 0
			}
		}
		BuffProvider_Right : BuffProvider_Top
		{
			BuffArea = [4, 1, 1, 2]
			Criteria
			{
				Left = 4
				Right = 6
			}
		}

		BuffProvider_Bottom : BuffProvider_Top
		{
			BuffArea = [1, 4, 2, 1]
			Criteria
			{
				Top = 4
				Bottom = 6
			}
		}
		BuffProvider_Left : BuffProvider_Top
		{
			BuffArea = [-1, 1, 1, 2]
			Criteria
			{
				Left = -2
				Right = 0
			}
		}
		
		// Starts Rotation
		
		RotationTime
		{
			Type = ValueTween
			OnTweenDuration = 60
			OffTweenDuration = 0
			OnValue = 3
			IsOnToggle = RotationMode0
		}		
		RotationMaxTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = RotationTime
			MinAmount = 3
		}
		RotationMinTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = RotationTime
			MaxAmount = 0
		}
		
		RotationModes
		{
			Type = ModeCycle
			IncrementTrigger = RotationMaxTrigger
			DecrementTrigger = RotationMinTrigger
			ModeRange = [0, 1]
			StartingMode = 0
		}
		RotationMode0
		{
			Type = ModeToggle
			Mode = RotationModes
			OnModes = [0]
		}
		RotationToggle
		{
			Type = MultiToggle
			Toggles = [ RotationMode0, IsOperational ]
			Mode = All
		}
			
		One	{ Type = StaticValue; Value = -1 }
		Two	{ Type = StaticValue; Value = -2 }
		
		RotationTime2
		{
			Type = MultiValue
			Values = [ RotationTime, One]
			Mode = 0
		}
		RotationTime3
		{
			Type = MultiValue
			Values = [ RotationTime, Two]
			Mode = 0
		}
		
		TransformRotation1
		{
			Type = TransformLerp
			ValueFrom = RotationTime
			Location = [2, 2]
			StartRotation = 0d
			EndRotation = 120d
		}
		TransformRotation2 :		TransformRotation1
		{
			ValueFrom = RotationTime2
			ChainedTo = TransformRotation1
			Location = [0, 0]
		}
		TransformRotationFinal :	TransformRotation2
		{
			ValueFrom = RotationTime3
			ChainedTo = TransformRotation2
		}
		
		// Finish Rotation

		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - START //////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ArcShield : <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/ArcShield	// _Blueprint_Front
		{
			Radius
			{
				BaseValue = 15
				Modifiers
				[
					{
						Type = ScaledBuff
						BuffType = BubbleRadiusBonus
						Scale = 1.5
						ModificationMode = Add
					}
				]
			}
			Arc = 60d
			ChainedTo = TransformRotationFinal
			OperationalToggle = IsOperationalProxy
			PenetrationResistance = [ { BaseValue= 16.66; BuffType=BubbleResistanceBonus; BuffMode=Add; }, 0]
			BlockedByOperationalParts = false
			DrainResourcesFrom = ProxyBatteryStorage
			ResourceDrainPerDamage
			{
				BaseValue = .4
				Modifiers
				[
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Multiply
						BaseStatusValue = 1
					}
					{
						Type = BuffRemap
						BuffType = Overclock
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, &~/OVERCLOCK/DAMAGE_DRAIN_FACTOR ]
					}
				]
			}
			Rotation = -90d
			Location = [0, 0]
			
			ShieldMediaEffects
			[
				: <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/ArcShield/ShieldMediaEffects/0
				{
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = 0
					FadeOutTime = 0
					ArcSprite : ^/0/ArcSprite
					{
						_xScale = 1.5
//						Size = [0, 3]
					}
					
				}
				: <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/ArcShield/ShieldMediaEffects/1	{}
			]
		}
		
		ArcShield_Blueprint_FrontRight :	ArcShield	{ Rotation = -30d }
		ArcShield_Blueprint_BackRight :		ArcShield	{ Rotation = 30d }
		ArcShield_Blueprint_Back :			ArcShield	{ Rotation = 90d }
		ArcShield_Blueprint_BackLeft :		ArcShield	{ Rotation = 150d }
		ArcShield_Blueprint_FrontLeft :		ArcShield	{ Rotation = 210d }
		
		OverclockTweenToggle
		{
			Type = ThresholdToggle
			ValueFrom = OverclockStateValue
			MinAmount = 1
		}
		
		OverclockedEffectToggle
		{
			Type = MultiToggle
			Toggles = [OverclockTweenToggle, IsOperationalOverclocked]
			Mode = All
		}
		
		Overclock_BlueprintArc	// Front
		{
			Type = ArcSprite
			ChainedTo = ArcShield
			Radius = (&../ArcShield/Radius/BaseValue)
			Arc = 60d
			SpriteSegments = (&../ArcShield/BlueprintArcSpriteSegments)
			Sprite
			{
				Texture
				{
					File = "./Data/ships/terran/shield_gen_small/shield_energy_oc.png"
					UVMode = Wrap
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [255, 134, 36, 127]
			}
		}
		
		Overclock_BlueprintArc_FrontRight :	Overclock_BlueprintArc	{ ChainedTo = ArcShield_Blueprint_FrontRight }
		Overclock_BlueprintArc_BackRight :	Overclock_BlueprintArc	{ ChainedTo = ArcShield_Blueprint_BackRight }
		Overclock_BlueprintArc_Back :		Overclock_BlueprintArc	{ ChainedTo = ArcShield_Blueprint_Back }
		Overclock_BlueprintArc_BackLeft :	Overclock_BlueprintArc	{ ChainedTo = ArcShield_Blueprint_BackLeft }
		Overclock_BlueprintArc_FrontLeft :	Overclock_BlueprintArc	{ ChainedTo = ArcShield_Blueprint_FrontLeft }
		
		OverclockEffect
		{
			Type = ShieldArcsMimic
			Shield = ArcShield
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			MimicFadeInStartTime = false
			OperationalToggle = OverclockedEffectToggle
			ContinuousEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = 1.025
					ArcSprite
					{
						Texture
						{
							File = "./Data/ships/terran/shield_gen_small/shield_energy_oc.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "./Data/ships/terran/shield_gen_small/shield.shader"
						_waveTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_mask_oc.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [203, 80, 33, 127]
						_lowPowerColor1 = [255, 0, 0, 127]
						_fullPowerColor2 = [255, 134, 36, 255]
						_lowPowerColor2 = [255, 50, 0, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1.5
						_hexDamageIntensity = 0.8
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 128
					Bucket = Lower1
				}
			]
		}
        
		OverloadValue
		{
			Type = BuffableValue
			Value
			{
				BaseValue = 0
				Modifiers
				[
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Replace
						BaseStatusValue = 0
					}
				]
			}
		}
		
		IsOverloaded
		{
			Type = ThresholdToggle
			ValueFrom = OverloadValue
			MinAmount = 0.01
		}
		
		
		IsOperationalOverloaded
		{
			Type = MultiToggle
			Toggles = [ IsOperational, IsOverloaded ]
			Mode = All
		}
		
		IsOperationalOverclockedOverloaded
		{
			Type = MultiToggle
			Toggles = [ IsOperational, IsOverloaded, OverclockedEffectToggle ]
			Mode = All
		}
		
		OverloadEffect
		{
			Type = ShieldArcsMimic
			Shield = ArcShield
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			FactorRedVertexColorWith = OverloadValue
			OperationalToggle = IsOperationalOverloaded
			ContinuousEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = 0.5
					FadeOutTime = 0.5
					FadeFromScale = .8
					ArcAngleAffectsUVs = true
					UPerNinetyDegrees = 1
					ArcSprite
					{
						Texture
						{
							File = "./Data/ships/terran/shield_gen_small/shield_overload.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "./Data/ships/terran/shield_gen_small/shield_overload.shader"
						_noiseTex1
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_noiseTex2
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_baseShieldTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_mask.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						
						_color1 = [255, 0, 255 * 0.31, 0]
						_color2 = [255, 255 * 0.41, 0, 0]
						_maxGreen = 0.9
						
						_xScale = 1.5
						_gradientXWidth = 1.05
						_hexDamageIntensity = 0.8
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 128
					Bucket = Lower1
				}
			]
		}
		
		OverclockOverloadEffect
		{
			Type = ShieldArcsMimic
			Shield = ArcShield
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			FactorRedVertexColorWith = OverloadValue
			OperationalToggle = IsOperationalOverclockedOverloaded
			ContinuousEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = 1.025
					ArcSprite
					{
						Texture
						{
							File = "./Data/ships/terran/shield_gen_small/shield_overload_oc.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "./Data/ships/terran/shield_gen_small/shield_overload.shader"
						_noiseTex1
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_noiseTex2
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_baseShieldTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_mask_oc.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						
						_color1 = [255, 0, 255 * 0.31, 0]
						_color2 = [255, 255 * 0.41, 0, 0]
						_maxGreen = 0.9
						
						_xScale = 1.5
						_hexDamageIntensity = 0.8
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 128
					Bucket = Lower1
				}
			]
		}

		IsOperationalOverclocked_Front
		{
			Type = MultiToggle
			Toggles = [IsOperational_LargeFront, IsOperationalOverclocked]
			Mode = All
		}
		IsOperationalOverclocked_FrontRight :	IsOperationalOverclocked_Front	{ Toggles = [IsOperational_LargeFrontRight, IsOperationalOverclocked] }
		IsOperationalOverclocked_BackRight :	IsOperationalOverclocked_Front	{ Toggles = [IsOperational_LargeBackRight, IsOperationalOverclocked] }
		IsOperationalOverclocked_Back :			IsOperationalOverclocked_Front	{ Toggles = [IsOperational_LargeBack, IsOperationalOverclocked] }
		IsOperationalOverclocked_BackLeft :		IsOperationalOverclocked_Front	{ Toggles = [IsOperational_LargeBackLeft, IsOperationalOverclocked] }
		IsOperationalOverclocked_FrontLeft :	IsOperationalOverclocked_Front	{ Toggles = [IsOperational_LargeFrontLeft, IsOperationalOverclocked] }

		// Overclock / Thermal network
		OverclockHeatProducer_Front
		{
			Type = ResourceConverter
			OperationalToggle = IsOperationalOverclocked_Front
			HEAT_PER_INTERVAL = ceil((&~/OVERCLOCK/HEAT_PER_SECOND) * (&Interval))
			ToQuantity = (&HEAT_PER_INTERVAL) * (&~/HEAT_TO_RESOURCE)
			ToStorage = &~/Part/^/0/HEAT_TARGET_STORAGE
			Interval = 0.5
		}
		OverclockHeatProducer_FrontRight :	OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_FrontRight }
		OverclockHeatProducer_BackRight :	OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_BackRight }
		OverclockHeatProducer_Back :		OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_Back }
		OverclockHeatProducer_BackLeft :	OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_BackLeft }
		OverclockHeatProducer_FrontLeft :	OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_FrontRight }
		
		OverclockHitHeatProducer
		{
			Type = ResourceChange
			ResourceStorage = &~/Part/^/0/HEAT_TARGET_STORAGE
			// Provides the post-resistance damage value as EffectScale
			Trigger = Overclock_ArcShieldProxy
			Amount
			{
				BaseValue = "round((&~/OVERCLOCK/HEAT_PER_DAMAGE) * (&~/HEAT_TO_RESOURCE), 0)"
				Modifiers
				[
					{
						Type = EffectScale
						ModificationMode = Multiply
					}
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Multiply
						BaseStatusValue = 1
					}
					{
						Type = Buff
						BuffType = Overclock
						ModificationMode = Multiply
					}
				]
			}
		}
		
		Overclock_ArcShieldProxy
		{
			Type = MultiTrigger
			Triggers = [Overclock_ArcShieldProxy_Front, Overclock_ArcShieldProxy_FrontRight, Overclock_ArcShieldProxy_BackRight, Overclock_ArcShieldProxy_Back, Overclock_ArcShieldProxy_BackLeft, Overclock_ArcShieldProxy_FrontLeft]
		}
		
		Overclock_ArcShieldProxy_Front
		{
			Type = TriggerProxy
			ComponentID = ArcShield_Front
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_FrontRight :	Overclock_ArcShieldProxy_Front
		{
			ComponentID = ArcShield_FrontRight
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_BackRight :	Overclock_ArcShieldProxy_Front
		{
			ComponentID = ArcShield_BackRight
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_Back :	Overclock_ArcShieldProxy_Front
		{
			ComponentID = ArcShield_Back
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_BackLeft :	Overclock_ArcShieldProxy_Front
		{
			ComponentID = ArcShield_BackLeft
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_FrontLeft :	Overclock_ArcShieldProxy_Front
		{
			ComponentID = ArcShield_FrontLeft
			ProxyToggle = IsOperationalOverclocked
		}
		
		OverheatEffects : ^/0/OverheatEffects
		{
			Location = [1, 1.5]
		}
		
		Router
		{
			Type = NetworkRouter
			RouteGenerators
			[
				{
					Type = Simple
					HEAT_INPUT = &~/Part/^/0/HEAT_NETWORK_INPUT
					Routes
					[
						[&../../HEAT_INPUT, Port_TL, 0]
						[&../../HEAT_INPUT, Port_TR, 0]
						[&../../HEAT_INPUT, Port_RT, 0]
						[&../../HEAT_INPUT, Port_RB, 0]
						[&../../HEAT_INPUT, Port_BR, 0]
						[&../../HEAT_INPUT, Port_BL, 0]
						[&../../HEAT_INPUT, Port_LB, 0]
						[&../../HEAT_INPUT, Port_LT, 0]
					]
				}
			]
		}
		Port_TL : ~/Part/^/0/BASE_THERMAL_PORT
		{
			Location = [1, 0]
			Direction = Up
		}
		Port_TR : Port_TL
		{
			Location = [2, 0]
		}
		Port_RT : Port_TL
		{
			Location = [3, 1]
			Direction = Right
		}
		Port_RB : Port_RT
		{
			Location = [3, 2]
		}
		Port_BR : Port_TL
		{
			Location = [2, 3]
			Direction = Down
		}
		Port_BL : Port_BR
		{
			Location = [1, 3]
		}
		Port_LB : Port_TL
		{
			Location = [0, 2]
			Direction = Left
		}
		Port_LT : Port_LB
		{
			Location = [0, 1]
		}

		EmitterEffect
		{
			Type = ContinuousEffects
//			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = CombinedBatteryStorage
			MaxMediaEffectsZoom = 12
			Location = [2 + 2.4, 2]
			OperationalToggle = IsOperationalProxy
			ParentToShip = true
			MediaEffects
			[
				: <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/EmitterEffect/MediaEffects/0
				{
					Radius = 2.4
					Arc = 360d
//					ArcSprite : ^/0/ArcSprite	 { }
					Bucket = Upper1	// So that the emitter can project over the part
				}
				: <./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/EmitterEffect/MediaEffects/1	{}
			]
		}

		ShieldOperationEffects_Front :			<./Data/ships/terran/shield_gen_large/shield_gen_large.rules>/Part/Components/ShieldOperationEffects
		{
			Location = [&~/Part/Components/ArcShield/Radius/BaseValue, 0]
			Toggle = IsOperational_LargeFront
		}
		ShieldOperationEffects_FrontRight :		ShieldOperationEffects_Front	{ Toggle = IsOperational_LargeFrontRight }
		ShieldOperationEffects_BackRight :		ShieldOperationEffects_Front	{ Toggle = IsOperational_LargeBackRight }
		ShieldOperationEffects_Back :			ShieldOperationEffects_Front	{ Toggle = IsOperational_LargeBack }
		ShieldOperationEffects_BackLeft :		ShieldOperationEffects_Front	{ Toggle = IsOperational_LargeBackLeft }
		ShieldOperationEffects_FrontLeft :		ShieldOperationEffects_Front	{ Toggle = IsOperational_LargeFrontLeft }
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - END ////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		Shield_Doodad_Graphics
		{
			Type = Graphics
			Location = [2, 2]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_high"
				//Offset = [0, 0]
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [2, 2]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe_RotSpeed_0DMG
					}
					{
						File = "doodad_axe_33.png"
						NormalsFile = "doodad_axe_normals_33.png"
						Size = [2, 2]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe_RotSpeed_33DMG
					}
					{
						File = "doodad_axe_66.png"
						NormalsFile = "doodad_axe_normals_66.png"
						Size = [2, 2]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe_RotSpeed_66DMG
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [2, 2]
					}
					{
						File = "doodad_axe_33.png"
						NormalsFile = "doodad_axe_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "doodad_axe_66.png"
						NormalsFile = "doodad_axe_normals_66.png"
						Size = [2, 2]
					}
				]
			}
		}
		
		Shield_Doodad_Graphics_2
		{
			Type = Graphics
			Location = [2, 2]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_high"
				//Offset = [0, 0]
				DamageLevels
				[
					{
						File = "doodad_big_axe.png"
						NormalsFile = "doodad_big_axe_normals.png"
						Size = [3, 3]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_0DMG
					}
					{
						File = "doodad_big_axe_33.png"
						NormalsFile = "doodad_big_axe_normals_33.png"
						Size = [3, 3]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_33DMG
					}
					{
						File = "doodad_big_axe_66.png"
						NormalsFile = "doodad_big_axe_normals_66.png"
						Size = [3, 3]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe2_RotSpeed_66DMG
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodad_big_axe.png"
						NormalsFile = "doodad_big_axe_normals.png"
						Size = [3, 3]
					}
					{
						File = "doodad_big_axe_33.png"
						NormalsFile = "doodad_big_axe_normals_33.png"
						Size = [3, 3]
					}
					{
						File = "doodad_big_axe_66.png"
						NormalsFile = "doodad_big_axe_normals_66.png"
						Size = [3, 3]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [2, 2]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [4, 4]
					}
					{
						File = "floor_33.png"
						Size = [4, 4]
					}
					{
						File = "floor_66.png"
						Size = [4, 4]
					}
				]
			}
			
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [4, 4]
					}
					{
						File = "walls_33.png"
						Size = [4, 4]
					}
					{
						File = "walls_66.png"
						Size = [4, 4]
					}
				]
			}
			
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [4, 4]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [4, 4]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [4, 4]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [2, 2]
			ResourceStorage = CombinedBatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [4, 4]
				}
				{
					File = "batteries2.png"
					Size = [4, 4]
				}
				{
					File = "batteries3.png"
					Size = [4, 4]
				}
				{
					File = "batteries4.png"
					Size = [4, 4]
				}
				{
					File = "batteries5.png"
					Size = [4, 4]
				}
				{
					File = "batteries6.png"
					Size = [4, 4]
				}
				{
					File = "batteries7.png"
					Size = [4, 4]
				}
				{
					File = "batteries8.png"
					Size = [4, 4]
				}
				{
					File = "batteries9.png"
					Size = [4, 4]
				}
				{
					File = "batteries10.png"
					Size = [4, 4]
				}
				{
					File = "batteries11.png"
					Size = [4, 4]
				}
				{
					File = "batteries12.png"
					Size = [4, 4]
				}
				{
					File = "batteries13.png"
					Size = [4, 4]
				}
				{
					File = "batteries14.png"
					Size = [4, 4]
				}
				{
					File = "batteries15.png"
					Size = [4, 4]
				}
				{
					File = "batteries16.png"
					Size = [4, 4]
				}
				{
					File = "batteries17.png"
					Size = [4, 4]
				}
				{
					File = "batteries18.png"
					Size = [4, 4]
				}
				{
					File = "batteries19.png"
					Size = [4, 4]
				}
				{
					File = "batteries20.png"
					Size = [4, 4]
				}
				{
					File = "batteries21.png"
					Size = [4, 4]
				}
				{
					File = "batteries22.png"
					Size = [4, 4]
				}
				{
					File = "batteries23.png"
					Size = [4, 4]
				}
				{
					File = "batteries24.png"
					Size = [4, 4]
				}
			]
		}
				
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		ScorchedTrigger
		{
			Type = ToggleTrigger
			Toggle = ScorchedToggle
			TriggerWhenOn = false
		}

		ScorchedEffects
		{
			Type = TriggeredEffects
			Trigger = ScorchedTrigger
			Location = &../DestroyedEffects/Location
			MediaEffects = &/COMMON_EFFECTS/MedPartScorched
		}
		
		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [2, 2]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [2, 2]
			Layer = "indicators"
			Indicators
			[
				// Scorched
				{
					Toggle = ScorchedToggle
					AtlasSprite = &/INDICATORS/Scorched
					HidesIndicators = [1,2,3]
				}
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
				
				// Resetting from overclock
				{
					Toggle = &~/Part/^/0/OVERCLOCK_OPERATIONAL
					AtlasSprite : /INDICATORS/OverclockReset
					{
						Size = [1, 1]
					}
					HidesIndicators = [3]
				}

				// Out of power.
				{
					Toggle = BatteryStorage // ModularCombinedBatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [4, 4]
		}
		
		HeatGenerationValue
		{
			Type = StaticValue
			Value = (&~/OVERCLOCK/HEAT_PER_SECOND)
		}
		HeatGenerationStatProvider
		{
			Type = StatProvider
			Stat = HeatGeneration
			OperationalToggle = OverclockModeToggle
			ValueFrom = HeatGenerationValue
		}
	}

	Stats
	{
		PowerCapacity = (&../StatsByCategory/0/Stats/SegmentCapacity) * (&../StatsByCategory/0/Stats/ShieldSegments)

		RecPower = (&../StatsByCategory/0/Stats/PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
	}
	
	StatsByCategory
	[
		{
			NameKey = "StatCategories/ShieldBubbleLarge"
			Stats
			{
				ShieldPenResist = &~/Part/Components/ArcShield/PenetrationResistance/0/BaseValue
				ShieldDist = (&~/Part/Components/ArcShield/Radius/BaseValue) - (&~/Part/Components/ArcShield/Location/1)
				ShieldSegments = 6
				ShieldHPSegment = (&~/Part/Components/BatteryStorage_Front/MaxResources) / (&~/Part/Components/ArcShield/ResourceDrainPerDamage/BaseValue)
				PowerUsageContinuous = (&~/Part/Components/PowerDrain_Front/FromQuantity) / (&~/Part/Components/PowerDrain_Front/Interval) / 1000 * (&ShieldSegments)
				SegmentCapacity = (&~/Part/Components/BatteryStorage_Front/MaxResources) / 1000
			}
		}
	]
	
	SecondaryToolTip
	{
		TitleKey = "StatCategories/Overclocked"
		Stats
		{
			ShieldHP =  (&~/Part/StatsByCategory/0/Stats/ShieldHPSegment) / (&~/OVERCLOCK/DAMAGE_DRAIN_FACTOR)
			EMPResistPercentage = (&~/OVERCLOCK/EMP_RESIST) * 100
			HeatGeneration = (&~/OVERCLOCK/HEAT_PER_SECOND) * (&~/Part/StatsByCategory/0/Stats/ShieldSegments)
			HeatPerDamage = (&~/OVERCLOCK/HEAT_PER_DAMAGE)
		}
	}
	
	StatsNotesKey = "Stats/BubbleNotes"
}