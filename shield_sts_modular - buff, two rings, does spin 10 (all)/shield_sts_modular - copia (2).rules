OVERCLOCK
{
	DAMAGE_DRAIN_FACTOR = 1 / 3
	EMP_RESIST = 50%
	HEAT_PER_SECOND = 20
	HEAT_PER_DAMAGE = 0.5
}
HEAT_TO_RESOURCE = &<./Data/statuses/heat/heat.rules>/STATUS_TO_RESOURCE_RATIO
HEAT_TO_STATUS = &<./Data/statuses/heat/heat.rules>/RESOURCE_TO_STATUS_RATIO

Part : <./Data/ships/terran/base_part_terran_overclock.rules>/Part
{
	NameKey = "Parts/KebechetSTSmodularShield"
	IconNameKey = "Parts/KebechetSTSmodularShieldIcon"
	DescriptionKey = "Parts/KebechetSTSmodularShieldDesc"
	ID = swefpifh.Kebechet_STS_modularShield
	EditorGroup = "Defenses"
	Resources
	[
		[steel, 20]
		[coil2, 20]
	]
	AIValueFactor = 5
	Size = [2, 2]
	PhysicalRect = [0, 0, 2, 2] // For backwards compatibility with old shield generators.
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeID = "shield_gen_sts"
	SelectionTypeByRotation = false
	MaxHealth = 5000
	TypeCategories = [defense, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [ModularShieldResistanceBonus, ModularShieldRadiusBonus]
	PenetrationRectType = Normal
	// ExplosiveDamageAbsorption = 50%
	IsRotateable = false
	IgnoreRotationForMirroredSelection = true
	IsFlippable = false

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components, <purple/purple.rules>/Components, <blue/blue.rules>/Components, <green/green.rules>/Components, <orange/orange.rules>/Components, <red/red.rules>/Components, <yellow/yellow.rules>/Components
	{

		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		ToggleColours
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		// -----------------------------------------------
		// DISPLAY TOGGLES -------------------------------
		// -----------------------------------------------
		
		ToggleDisplay
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Display"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleDisplay_On
		{
			Type = ModeToggle
			Mode = ToggleDisplay
			OnMode = 0
		}

		ToggleDisplay_Off : ToggleDisplay_On	{ OnMode = 1 }
		
		// -----------------------------------------------
		// RADIUS BUFF TOGGLES -------------------------------
		// -----------------------------------------------
		
		RadiusBuff
		{
			Type = BuffableValue
			Value
			{
				BaseValue = 0
				BuffType = ModularShieldRadiusBonus
				BuffMode = Add
			}
		}
		
		ToggleRadius_0
		{
			Type = ThresholdToggle
			AmountFrom = RadiusBuff
			MinAmount = 0
			MaxAmount = 0
		}
		ToggleRadius_1 : ToggleRadius_0
		{
			MinAmount = 1
			MaxAmount = 1
		}
		ToggleRadius_2 : ToggleRadius_0
		{
			MinAmount = 2
			MaxAmount = 2
		}
		ToggleRadius_3 : ToggleRadius_0
		{
			MinAmount = 3
			MaxAmount = 3
		}
		
		// -----------------------------------------------
		// PROXY -----------------------------------------
		// -----------------------------------------------
		
		ColoursProxy
		{
			Type = ToggleProxy
			ComponentID = ColoursSet
		}
		ColoursSet
		{
			Type = MultiToggle
			Toggles = [ToggleColours_Purple, ToggleColours_Blue, ToggleColours_Orange, ToggleColours_Red, ToggleColours_Yellow, ToggleColours_Green]
			Mode = Any
		}

		DisplayProxy
		{
			Type = ToggleProxy
			ComponentID = DisplaySet
		}
		DisplaySet
		{
			Type = MultiToggle
			Toggles = [ToggleDisplay_Off, ToggleDisplay_On]
			Mode = Any
		}

		// --------------------------------- END TOGGLES
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL] // ModularCombinedBatteryStorage // CombinedBatteryStorage
			Mode = All
		}

		CommandConsumptionToggle
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		ScorchedToggle
		{
			Type = StatusToggle
			StatusType = cosmoteer.scorched
			MinStatusValue = 1
			Invert = true
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = CommandConsumptionToggle
			CommandPoints = 4
		}

		// Starts Normal Batteries

		ProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = CombinedBatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}
		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [InnerFrontBatteryStorage, InnerRightBatteryStorage, InnerBackBatteryStorage, InnerLeftBatteryStorage, OuterFrontRightBatteryStorage, OuterBackRightBatteryStorage, OuterBackLefttBatteryStorage, OuterFrontLeftBatteryStorage]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			AddMode = DistributeProportionallyByAvailable
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = CombinedBatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		// Inner (when overclocked)
		InnerFrontIsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, InnerFrontBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked]
			Mode = All
		}
		InnerFrontOverclockEffect :			InnerFrontIsOperational	{ Toggles = [InnerFrontIsOperational, OverclockedEffectToggle] }
		InnerFrontOverloadEffect :			InnerFrontIsOperational	{ Toggles = [InnerFrontIsOperational, IsOperationalOverloaded] }
		InnerFrontOverclockOverloadEffect :	InnerFrontIsOperational	{ Toggles = [InnerFrontIsOperational, IsOperationalOverclockedOverloaded] }
		InnerFrontBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 1000
			ToggleOnResources = 1000
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		CombinedInnerFrontBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [InnerFrontBatteryStorage, ModularInnerBatteryStorageProxy] //CentralBatteryStorage
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		InnerFrontPowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = InnerFrontIsOperational
			FromStorage = InnerFrontBatteryStorage
			FromQuantity = (&../FrontPowerDrain/FromQuantity) / 2
			MinFromQuantityForConversion = 1
			Interval = 2
		}
		
		InnerRightIsOperational : 			InnerFrontIsOperational				{ Toggles = [PowerToggle, InnerRightBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked] }
		InnerRightOverclockEffect :			InnerFrontIsOperational				{ Toggles = [InnerRightIsOperational, OverclockedEffectToggle] }
		InnerRightOverclockOverloadEffect :	InnerFrontIsOperational				{ Toggles = [InnerRightIsOperational, IsOperationalOverclockedOverloaded] }
		InnerRightBatteryStorage : 			InnerFrontBatteryStorage			{}
		CombinedInnerRightBatteryStorage :	CombinedInnerFrontBatteryStorage	{ ResourceStorages = [InnerRightBatteryStorage, ModularInnerBatteryStorageProxy] }
		InnerRightPowerDrain : 				InnerFrontPowerDrain				{ FromStorage = InnerRightBatteryStorage }
		
		InnerBackIsOperational : 			InnerFrontIsOperational				{ Toggles = [PowerToggle, InnerBackBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked] }
		InnerBackOverclockEffect :			InnerFrontIsOperational				{ Toggles = [InnerBackIsOperational, OverclockedEffectToggle] }
		InnerBackOverclockOverloadEffect :	InnerFrontIsOperational				{ Toggles = [InnerBackIsOperational, IsOperationalOverclockedOverloaded] }
		InnerBackBatteryStorage : 			InnerFrontBatteryStorage			{}
		CombinedInnerBackBatteryStorage :	CombinedInnerFrontBatteryStorage	{ ResourceStorages = [InnerBackBatteryStorage, ModularInnerBatteryStorageProxy] }
		InnerBackPowerDrain : 				InnerFrontPowerDrain				{ FromStorage = InnerBackBatteryStorage }
		
		InnerLeftIsOperational : 			InnerFrontIsOperational				{ Toggles = [PowerToggle, InnerLeftBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked] }
		InnerLeftOverclockEffect :			InnerFrontIsOperational				{ Toggles = [InnerLeftIsOperational, OverclockedEffectToggle] }
		InnerLeftOverclockOverloadEffect :	InnerFrontIsOperational				{ Toggles = [InnerLeftIsOperational, IsOperationalOverclockedOverloaded] }
		InnerLeftBatteryStorage : 			InnerFrontBatteryStorage			{}
		CombinedInnerLeftBatteryStorage :	CombinedInnerFrontBatteryStorage	{ ResourceStorages = [InnerLeftBatteryStorage, ModularInnerBatteryStorageProxy] }
		InnerLeftPowerDrain : 				InnerFrontPowerDrain				{ FromStorage = InnerLeftBatteryStorage }
		
		// Outer (when overclocked)
		OuterFrontRightIsOperational : 				InnerFrontIsOperational				{ Toggles = [PowerToggle, OuterFrontRightBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked] }
		OuterFrontRightOverclockEffect :			InnerFrontIsOperational				{ Toggles = [OuterFrontRightIsOperational, OverclockedEffectToggle] }
		OuterFrontRightOverclockOverloadEffect :	InnerFrontIsOperational				{ Toggles = [OuterFrontRightIsOperational, IsOperationalOverclockedOverloaded] }
		OuterFrontRightBatteryStorage : 			InnerFrontBatteryStorage			{}
		CombinedOuterFrontRightBatteryStorage :		CombinedInnerFrontBatteryStorage	{ ResourceStorages = [OuterFrontRightBatteryStorage, ModularOuterBatteryStorageProxy] }
		OuterFrontRightPowerDrain : 				InnerFrontPowerDrain				{ FromStorage = OuterFrontRightBatteryStorage }
		
		OuterBackRightIsOperational : 				InnerFrontIsOperational				{ Toggles = [PowerToggle, OuterBackRightBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked] }
		OuterBackRightOverclockEffect :				InnerFrontIsOperational				{ Toggles = [OuterBackRightIsOperational, OverclockedEffectToggle] }
		OuterBackRightOverclockOverloadEffect :		InnerFrontIsOperational				{ Toggles = [OuterBackRightIsOperational, IsOperationalOverclockedOverloaded] }
		OuterBackRightBatteryStorage : 				InnerFrontBatteryStorage			{}
		CombinedOuterBackRightBatteryStorage :		CombinedInnerFrontBatteryStorage	{ ResourceStorages = [OuterBackRightBatteryStorage, ModularOuterBatteryStorageProxy] }
		OuterBackRightPowerDrain : 					InnerFrontPowerDrain				{ FromStorage = OuterBackRightBatteryStorage }
		
		OuterBackLeftIsOperational : 				InnerFrontIsOperational				{ Toggles = [PowerToggle, OuterBackLefttBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked] }
		OuterBackLeftOverclockEffect :				InnerFrontIsOperational				{ Toggles = [OuterBackLeftIsOperational, OverclockedEffectToggle] }
		OuterBackLeftOverclockOverloadEffect :		InnerFrontIsOperational				{ Toggles = [OuterBackLeftIsOperational, IsOperationalOverclockedOverloaded] }
		OuterBackLefttBatteryStorage : 				InnerFrontBatteryStorage			{}
		CombinedOuterBackLeftBatteryStorage :		CombinedInnerFrontBatteryStorage	{ ResourceStorages = [OuterBackLefttBatteryStorage, ModularOuterBatteryStorageProxy] }
		OuterBackLefttPowerDrain : 					InnerFrontPowerDrain				{ FromStorage = OuterBackLefttBatteryStorage }
		
		OuterFrontLeftIsOperational : 				InnerFrontIsOperational				{ Toggles = [PowerToggle, OuterFrontLeftBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperationalOverclocked] }
		OuterFrontLeftOverclockEffect :				InnerFrontIsOperational				{ Toggles = [OuterFrontLeftIsOperational, OverclockedEffectToggle] }
		OuterFrontLeftOverclockOverloadEffect :		InnerFrontIsOperational				{ Toggles = [OuterFrontLeftIsOperational, IsOperationalOverclockedOverloaded] }
		OuterFrontLeftBatteryStorage : 				InnerFrontBatteryStorage			{}
		CombinedOuterFrontLeftBatteryStorage :		CombinedInnerFrontBatteryStorage	{ ResourceStorages = [OuterFrontLeftBatteryStorage, ModularOuterBatteryStorageProxy] }
		OuterFrontLeftPowerDrain : 					InnerFrontPowerDrain				{ FromStorage = OuterFrontLeftBatteryStorage }
		
		// Combined (when not overclocked)
		
		FrontIsOperational : 			InnerFrontIsOperational				{ Toggles = [PowerToggle, FrontCombinedBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL] }
		FrontOverloadEffect :			InnerFrontIsOperational				{ Toggles = [FrontIsOperational, IsOperationalOverloaded] }
		FrontCombinedBatteryStorage : 	CombinedInnerFrontBatteryStorage
		{
			ResourceStorages = [InnerFrontBatteryStorage, OuterFrontRightBatteryStorage]
			ToggleOnResources = 1001
		}
		CombinedFrontBatteryStorage : 	CombinedInnerFrontBatteryStorage	{ ResourceStorages = [FrontCombinedBatteryStorage, ModularBatteryStorageProxy] }
		FrontPowerDrain : 				InnerFrontPowerDrain
		{
			FromStorage = FrontCombinedBatteryStorage
			FromQuantity = 38
		}
		
		RightIsOperational : 			InnerFrontIsOperational				{ Toggles = [PowerToggle, RightCombinedBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL] }
		RightOverloadEffect :			InnerFrontIsOperational				{ Toggles = [RightIsOperational, IsOperationalOverloaded] }
		RightCombinedBatteryStorage : 	FrontCombinedBatteryStorage			{ ResourceStorages = [InnerRightBatteryStorage, OuterBackRightBatteryStorage] }
		CombinedRightBatteryStorage : 	CombinedInnerFrontBatteryStorage	{ ResourceStorages = [RightCombinedBatteryStorage, ModularBatteryStorageProxy] }
		RightPowerDrain :				FrontPowerDrain						{ FromStorage = RightCombinedBatteryStorage }

		BackIsOperational : 			InnerFrontIsOperational				{ Toggles = [PowerToggle, BackCombinedBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL] }
		BackOverloadEffect :			InnerFrontIsOperational				{ Toggles = [BackIsOperational, IsOperationalOverloaded] }
		BackCombinedBatteryStorage : 	FrontCombinedBatteryStorage			{ ResourceStorages = [InnerBackBatteryStorage, OuterBackLefttBatteryStorage] }
		CombinedBackBatteryStorage : 	CombinedInnerFrontBatteryStorage	{ ResourceStorages = [BackCombinedBatteryStorage, ModularBatteryStorageProxy] }
		BackPowerDrain : 				FrontPowerDrain						{ FromStorage = BackCombinedBatteryStorage }

		LeftIsOperational : 			InnerFrontIsOperational				{ Toggles = [PowerToggle, LeftCombinedBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL] }
		LeftOverloadEffect :			InnerFrontIsOperational				{ Toggles = [LeftIsOperational, IsOperationalOverloaded] }
		LeftCombinedBatteryStorage : 	FrontCombinedBatteryStorage			{ ResourceStorages = [InnerLeftBatteryStorage, OuterFrontLeftBatteryStorage] }
		CombinedLeftBatteryStorage : 	CombinedInnerFrontBatteryStorage	{ ResourceStorages = [LeftCombinedBatteryStorage, ModularBatteryStorageProxy] }
		LeftPowerDrain : 				FrontPowerDrain						{ FromStorage = LeftCombinedBatteryStorage }

		// Ends Normal Batteries

		// Start Modular Battery

		BuffProviderTop
		{
			Type = AreaBuffProvider
			BuffType = ModularShieldCapacity
			BuffArea = [0, -1, 2, 1]
			OperationalToggle = IsOperational
			Criteria
			{
				Left = 0
				Right = 2
			}
		}
		BuffProviderRight : BuffProviderTop
		{
			BuffArea = [2, 0, 1, 2]
			Criteria
			{
				Rot = 1
				Left = 2
				Right = 3
				Bottom = 2 // With this it also worked
			}
		}
		BuffProviderBottom : BuffProviderTop
		{
			BuffArea = [0, 2, 2, 1]
			Criteria
			{
				Rot = 2
				Right = 2
				Bottom = 3
			}
		}
		BuffProviderLeft : BuffProviderTop
		{
			BuffArea = [-1, 0, 1, 2]
			Criteria
			{
				Rot = 3
				Right = 0
				Bottom = 2
			}
		}
		
		IsModularToggle
		{
			Type = BuffToggle
			BuffType = ModularShieldResistanceBonus
		}
		IsModularOperational
		{
			Type = MultiToggle
			Toggles = [IsOperational, IsModularToggle]
			Mode = All
		}
		
		CentralBatteryStorage	// I think that using this makes the modular battery less bugged
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		// When not overclocked
		ModularBatteryStorageProxy
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			ToggleOnResources = 0
			IsDrainable = false
			ResourceStorages = [CentralBatteryStorage]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProviderTop, BuffProviderRight, BuffProviderLeft, BuffProviderBottom]
				ComponentID = BatteryStorage
			}
			AddMode = PrioritizeLeastResources
			RemoveMode = PrioritizeLeastResources
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		ProgressBarModular : ProgressBar
		{
			ShowProgressFor = ModularBatteryStorageProxy
			OperationalToggle = IsModularOperational
		}		
		BatteryStorage // ModularCombinedBatteryStorage, named only BatteryStorage for easier compatibility with energy mods
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [InnerFrontBatteryStorage, InnerRightBatteryStorage, InnerBackBatteryStorage, InnerLeftBatteryStorage, OuterFrontRightBatteryStorage, OuterBackRightBatteryStorage, OuterBackLefttBatteryStorage, OuterFrontLeftBatteryStorage, ModularBatteryStorageProxy]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			ToggleOnResources = 7001
		}
		BatteryConsumer2 : BatteryConsumer	{ Storage = ModularBatteryStorageProxy }	// If I use ModularCombinedBatteryStorage so that all batteries (including ModularBatteryStorageProxy) are in the same consumer, the ModularBatteryStorageProxy never receives energy, no idea why.

		// Inner (when overclocked)
		ModularInnerBatteryStorageProxy : ModularBatteryStorageProxy
		{
			OperationalToggle = IsOperationalOverclocked
			ViaBuffs : ^/0/ViaBuffs	{ ComponentID = InnerBatteryStorage }
		}
		
		// Outer (when overclocked)
		ModularOuterBatteryStorageProxy : ModularInnerBatteryStorageProxy
		{
			ViaBuffs : ^/0/ViaBuffs { ComponentID = OuterBatteryStorage }
		}

		// Ends Modular Batteries
/*
		// Old Energy Distribution System
		// Front-Right Distribution
		FrontRightIsOperational
		{
			Type = MultiToggle
			Toggles = [FrontIsOperational, RightIsOperational]
			Mode = All
		}
		FrontRightCombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [FrontBatteryStorage, RightBatteryStorage]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			OperationalToggle = FrontRightIsOperational
			AddMode = PrioritizeLeastResources
			RemoveMode = PrioritizeMostResources
		}
		FrontRightBatteryStorageRequest
		{
			Type = ResourceConverter
			FromStorage = FrontRightCombinedBatteryStorage
			ToStorage = FrontRightCombinedBatteryStorage
			FromQuantity = 10
			ToQuantity = 10
			Interval = .1
		}
		// Right-Back Distribution
		RightBackIsOperational : FrontRightIsOperational	{ Toggles = [RightIsOperational, BackIsOperational] }
		RightBackCombinedBatteryStorage : FrontRightCombinedBatteryStorage	{ ResourceStorages = [RightBatteryStorage, BackBatteryStorage] }
		RightBackBatteryStorageRequest : FrontRightBatteryStorageRequest
		{
			OperationalToggle = RightBackIsOperational
			FromStorage = RightBackCombinedBatteryStorage
			ToStorage = RightBackCombinedBatteryStorage
		}
		// Back-Left Distribution
		BackLeftIsOperational : FrontRightIsOperational	{ Toggles = [BackIsOperational, LeftIsOperational] }
		BackLeftCombinedBatteryStorage : FrontRightCombinedBatteryStorage	{ ResourceStorages = [BackBatteryStorage, LeftBatteryStorage] }
		BackLeftBatteryStorageRequest : FrontRightBatteryStorageRequest
		{
			OperationalToggle = BackLeftIsOperational
			FromStorage = BackLeftCombinedBatteryStorage
			ToStorage = BackLeftCombinedBatteryStorage
		}
		// Left-Front Distribution
		LeftFrontIsOperational : FrontRightIsOperational	{ Toggles = [LeftIsOperational, FrontIsOperational] }
		LeftFrontCombinedBatteryStorage : FrontRightCombinedBatteryStorage	{ ResourceStorages = [LeftBatteryStorage, FrontBatteryStorage] }
		LeftFrontBatteryStorageRequest : FrontRightBatteryStorageRequest
		{
			OperationalToggle = LeftFrontIsOperational
			FromStorage = LeftFrontCombinedBatteryStorage
			ToStorage = LeftFrontCombinedBatteryStorage
		}
*/
		
		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - START //////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ArcShield : <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/ArcShield
		{
			Radius = 7
			Arc = 90d
			OperationalToggle = IsOperationalProxy // IsOperational
			PenetrationResistance = [ { BaseValue= 8.33; BuffType=ModularShieldResistanceBonus; BuffMode=Add; }, 0]
			DrainResourcesFrom = ProxyBatteryStorage
			ResourceDrainPerDamage
			{
				BaseValue = .4
				Modifiers
				[
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Multiply
						BaseStatusValue = 1
					}
					{
						Type = BuffRemap
						BuffType = Overclock
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, &~/OVERCLOCK/DAMAGE_DRAIN_FACTOR ]
					}
				]
			}
			Rotation = -90d
			Location = [1, 1]

			ShieldMediaEffects
			[
				: &../^/0/ShieldMediaEffects/0
				{
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
				}
				: &../^/0/ShieldMediaEffects/1	{}
			]
		}

		OverclockTweenToggle
		{
			Type = ThresholdToggle
			ValueFrom = OverclockStateValue
			MinAmount = 1
		}
		
		OverclockedEffectToggle
		{
			Type = MultiToggle
			Toggles = [OverclockTweenToggle, IsOperationalOverclocked]
			Mode = All
		}
		
		Overclock_BlueprintArc
		{
			Type = ArcSprite
			ChainedTo = ArcShield
			Radius = &../ArcShield/Radius
			Arc = (&../ArcShield/Arc)
			SpriteSegments = (&../ArcShield/BlueprintArcSpriteSegments)
			Sprite
			{
				Texture
				{
					File = "shield_energy_oc.png"
					UVMode = Wrap
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [255, 134, 36, 127]
			}
		}
		
		OverclockEffect
		{
			Type = ShieldArcsMimic
			Shield = ArcShield
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			MimicFadeInStartTime = false
			OperationalToggle = OverclockedEffectToggle
			ContinuousEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = 1.025
					ArcSprite
					{
						Texture
						{
							File = "shield_energy_oc.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask_oc.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [203, 80, 33, 127]
						_lowPowerColor1 = [255, 0, 0, 127]
						_fullPowerColor2 = [255, 134, 36, 255]
						_lowPowerColor2 = [255, 50, 0, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						_hexDamageIntensity = 0.8
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}
			]
		}
        
		OverloadValue
		{
			Type = BuffableValue
			Value
			{
				BaseValue = 0
				Modifiers
				[
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Replace
						BaseStatusValue = 0
					}
				]
			}
		}
		
		IsOverloaded
		{
			Type = ThresholdToggle
			ValueFrom = OverloadValue
			MinAmount = 0.01
		}
		
		
		IsOperationalOverloaded
		{
			Type = MultiToggle
			Toggles = [ IsOperational, IsOverloaded ]
			Mode = All
		}
		
		IsOperationalOverclockedOverloaded
		{
			Type = MultiToggle
			Toggles = [ IsOperational, IsOverloaded, OverclockedEffectToggle ]
			Mode = All
		}
		
		OverloadEffect
		{
			Type = ShieldArcsMimic
			Shield = ArcShield
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			FactorRedVertexColorWith = OverloadValue
			OperationalToggle = IsOperationalOverloaded
			ContinuousEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = 0.5
					FadeOutTime = 0.5
					FadeFromScale = .8
					ArcAngleAffectsUVs = true
					UPerNinetyDegrees = 1
					ArcSprite
					{
						Texture
						{
							File = "shield_overload.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "shield_overload.shader"
						_noiseTex1
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_noiseTex2
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_baseShieldTex
						{
							File = shield_mask.png
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						
						_color1 = [255, 0, 255 * 0.31, 0]
						_color2 = [255, 255 * 0.41, 0, 0]
						_maxGreen = 0.9
						
						_xScale = 1
						_gradientXWidth = 1.05
						_hexDamageIntensity = 0.8
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}
			]
		}
		
		OverclockOverloadEffect
		{
			Type = ShieldArcsMimic
			Shield = ArcShield
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			FactorRedVertexColorWith = OverloadValue
			OperationalToggle = IsOperationalOverclockedOverloaded
			ContinuousEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = 1.025
					ArcSprite
					{
						Texture
						{
							File = "shield_overload_oc.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "shield_overload.shader"
						_noiseTex1
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_noiseTex2
						{
							File = "./Data/statuses/fire/particles/fire_noise.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_baseShieldTex
						{
							File = shield_mask_oc.png
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						
						_color1 = [255, 0, 255 * 0.31, 0]
						_color2 = [255, 255 * 0.41, 0, 0]
						_maxGreen = 0.9
						
						_xScale = 1
						_hexDamageIntensity = 0.8
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}
			]
		}

		// Overclock / Thermal network
		OverclockHeatProducer
		{
			Type = ResourceConverter
			OperationalToggle = IsOperationalOverclocked
			HEAT_PER_INTERVAL = ceil((&~/OVERCLOCK/HEAT_PER_SECOND) * (&Interval))
			ToQuantity = (&HEAT_PER_INTERVAL) * (&~/HEAT_TO_RESOURCE)
			ToStorage = &~/Part/^/0/HEAT_TARGET_STORAGE
			Interval = 0.5
		}
		OverclockHitHeatProducer
		{
			Type = ResourceChange
			ResourceStorage = &~/Part/^/0/HEAT_TARGET_STORAGE
			// Provides the post-resistance damage value as EffectScale
			Trigger = Overclock_ArcShieldProxy
			Amount
			{
				BaseValue = "round((&~/OVERCLOCK/HEAT_PER_DAMAGE) * (&~/HEAT_TO_RESOURCE), 0)"
				Modifiers
				[
					{
						Type = EffectScale
						ModificationMode = Multiply
					}
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Multiply
						BaseStatusValue = 1
					}
					{
						Type = Buff
						BuffType = Overclock
						ModificationMode = Multiply
					}
				]
			}
		}
		Overclock_ArcShieldProxy
		{
			Type = MultiTrigger
			Triggers = [Overclock_ArcShieldFrontProxy, Overclock_ArcShieldRightProxy, Overclock_ArcShieldBackProxy, Overclock_ArcShieldLeftProxy]
		}
		Overclock_ArcShieldFrontProxy
		{
			Type = TriggerProxy
			ComponentID = ArcShield_Front
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldRightProxy
		{
			Type = TriggerProxy
			ComponentID = ArcShield_Right
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldBackProxy
		{
			Type = TriggerProxy
			ComponentID = ArcShield_Back
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldLeftProxy
		{
			Type = TriggerProxy
			ComponentID = ArcShield_Left
			ProxyToggle = IsOperationalOverclocked
		}
		
		OverheatEffects : ^/0/OverheatEffects
		{
			Location = [1, 1.5]
		}
		Router
		{
			Type = NetworkRouter
			RouteGenerators
			[
				{
					Type = Simple
					HEAT_INPUT = &~/Part/^/0/HEAT_NETWORK_INPUT
					Routes
					[
						[&../../HEAT_INPUT, Port_TL, 0]
						[&../../HEAT_INPUT, Port_TR, 0]
						[&../../HEAT_INPUT, Port_RT, 0]
						[&../../HEAT_INPUT, Port_RB, 0]
						[&../../HEAT_INPUT, Port_BR, 0]
						[&../../HEAT_INPUT, Port_BL, 0]
						[&../../HEAT_INPUT, Port_LB, 0]
						[&../../HEAT_INPUT, Port_LT, 0]
					]
				}
			]
		}
		Port_TL : ~/Part/^/0/BASE_THERMAL_PORT
		{
			Location = [0, 0]
			Direction = Up
		}
		Port_TR : Port_TL
		{
			Location = [1, 0]
		}
		Port_RT : Port_TL
		{
			Location = [1, 0]
			Direction = Right
		}
		Port_RB : Port_RT
		{
			Location = [1, 1]
		}
		Port_BR : Port_TL
		{
			Location = [1, 1]
			Direction = Down
		}
		Port_BL : Port_BR
		{
			Location = [0, 1]
		}
		Port_LB : Port_TL
		{
			Location = [0, 1]
			Direction = Left
		}
		Port_LT : Port_LB
		{
			Location = [0, 0]
		}

		EmitterEffect
		{
			Type = ContinuousEffects
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = CombinedBatteryStorage
			MaxMediaEffectsZoom = 12
			Location = [1.8, 0]
			OperationalToggle = IsOperationalProxy
			ParentToShip = true
			MediaEffects
			[
				: <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/EmitterEffect/MediaEffects/0
				{
					Radius = 1.8
					Arc = 360d
				}
				: <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/EmitterEffect/MediaEffects/1	{}
			]
		}

		ShieldOperationEffects_Front : <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/ShieldOperationEffects
		{
			Location = [&~/Part/Components/ArcShield/Radius, 0]
			Toggle = FrontIsOperational
		}
		ShieldOperationEffects_Right : ShieldOperationEffects_Front	{ Toggle = RightIsOperational }
		ShieldOperationEffects_Back : ShieldOperationEffects_Front	{ Toggle = BackIsOperational }
		ShieldOperationEffects_Left : ShieldOperationEffects_Front	{ Toggle = LeftIsOperational }
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - END ////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		Shield_Doodad_Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_high"
				//Offset = [0, 0]
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [2, 2]
						RotSpeed = &<../stats.rules>/StatsCommon/DoodadAxe_RotSpeed_0DMG
					}
					{
						File = "doodad_axe_33.png"
						NormalsFile = "doodad_axe_normals_33.png"
						Size = [2, 2]
						RotSpeed = &<../stats.rules>/StatsCommon/DoodadAxe_RotSpeed_33DMG
					}
					{
						File = "doodad_axe_66.png"
						NormalsFile = "doodad_axe_normals_66.png"
						Size = [2, 2]
						RotSpeed = &<../stats.rules>/StatsCommon/DoodadAxe_RotSpeed_66DMG
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [2, 2]
					}
					{
						File = "doodad_axe_33.png"
						NormalsFile = "doodad_axe_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "doodad_axe_66.png"
						NormalsFile = "doodad_axe_normals_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
					{
						File = "floor_33.png"
						Size = [2, 2]
					}
					{
						File = "floor_66.png"
						Size = [2, 2]
					}
				]
			}
			
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 1]
			ResourceStorage = CombinedBatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 2]
				}
				{
					File = "batteries2.png"
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Size = [2, 2]
				}
				{
					File = "batteries4.png"
					Size = [2, 2]
				}
				{
					File = "batteries5.png"
					Size = [2, 2]
				}
				{
					File = "batteries6.png"
					Size = [2, 2]
				}
				{
					File = "batteries7.png"
					Size = [2, 2]
				}
				{
					File = "batteries8.png"
					Size = [2, 2]
				}
			]
		}
				
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		ScorchedTrigger
		{
			Type = ToggleTrigger
			Toggle = ScorchedToggle
			TriggerWhenOn = false
		}

		ScorchedEffects
		{
			Type = TriggeredEffects
			Trigger = ScorchedTrigger
			Location = &../DestroyedEffects/Location
			MediaEffects = &/COMMON_EFFECTS/MedPartScorched
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Scorched
				{
					Toggle = ScorchedToggle
					AtlasSprite = &/INDICATORS/Scorched
					HidesIndicators = [1,2,3]
				}
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Resetting from overclock
				{
					Toggle = &~/Part/^/0/OVERCLOCK_OPERATIONAL
					AtlasSprite : /INDICATORS/OverclockReset
					{
						Size = [1, 1]
					}
					HidesIndicators = [3]
				}

				// Out of power.
				{
					Toggle = BatteryStorage // ModularCombinedBatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
		
		HeatGenerationValue
		{
			Type = StaticValue
			Value = (&~/OVERCLOCK/HEAT_PER_SECOND)
		}
		HeatGenerationStatProvider
		{
			Type = StatProvider
			Stat = HeatGeneration
			OperationalToggle = OverclockModeToggle
			ValueFrom = HeatGenerationValue
		}
	}

	Stats
	{
		ShieldPenResist = &~/Part/Components/ArcShield/PenetrationResistance/0/BaseValue
		ShieldDist = (&~/Part/Components/ArcShield/Radius) - (&~/Part/Components/ArcShield/Location/1)
		ShieldSegments = 4
		ShieldHPSegment = (&~/Part/Components/InnerFrontBatteryStorage/MaxResources) * 2 / (&~/Part/Components/ArcShield/ResourceDrainPerDamage/BaseValue)
		PowerUsageContinuous = (&~/Part/Components/FrontPowerDrain/FromQuantity) / (&~/Part/Components/FrontPowerDrain/Interval) / 1000 * (&ShieldSegments)
		SegmentCapacity = (&~/Part/Components/InnerFrontBatteryStorage/MaxResources) * 2 / 1000
		PowerCapacity = (&SegmentCapacity) * (&ShieldSegments)

		RecPower = (&PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
	}
	
	StatsNotesKey = "Stats/BubbleNotes"
}
