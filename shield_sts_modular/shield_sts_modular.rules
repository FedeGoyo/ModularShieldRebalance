OVERCLOCK
{
	DAMAGE_DRAIN_FACTOR = 1 / 200%
	EMP_RESIST = 33%
	ROTATION_SPEED_FACTOR = 2/3
	HEAT_PER_SECOND = 30	// For each segment
	HEAT_PER_DAMAGE = 0.6
}
HEAT_TO_RESOURCE = &<./Data/statuses/heat/heat.rules>/STATUS_TO_RESOURCE_RATIO
HEAT_TO_STATUS = &<./Data/statuses/heat/heat.rules>/RESOURCE_TO_STATUS_RATIO

Part : <./Data/ships/terran/base_part_terran_overclock.rules>/Part
{
	NameKey = "Parts/KebechetSTSmodularShield"
	IconNameKey = "Parts/KebechetSTSmodularShieldIcon"
	DescriptionKey = "Parts/KebechetSTSmodularShieldDesc"
	ID = swefpifh.Kebechet_STS_modularShield
	EditorGroup = "Defenses"
	Resources
	[
		[steel, 20]
		[coil, 60]
	]
	AIValueFactor = 5
	Size = [2, 2]
	PhysicalRect = [0, 0, 2, 2] // For backwards compatibility with old shield generators.
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeID = "shield_gen_sts"
	SelectionTypeByRotation = false
	MaxHealth = 5000
	TypeCategories = [defense, uses_power, bubble_shield]
	ReceivableBuffs : ^/0/ReceivableBuffs [BubbleCapacityReversed, BubbleResistance, BubbleRadius, BubbleRadiusBase, BubbleRadiusOverclock, BubbleRadiusFinal, BubbleDrain]
	PenetrationRectType = Normal
	// ExplosiveDamageAbsorption = 50%
	IsRotateable = false
	IgnoreRotationForMirroredSelection = true
	IsFlippable = false

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components, <purple/purple.rules>/Components, <blue/blue.rules>/Components, <green/green.rules>/Components, <orange/orange.rules>/Components, <red/red.rules>/Components, <yellow/yellow.rules>/Components
	{

		// --------------------------------- START TOGGLES
		
		// -----------------------------------------------
		// COLOURS TOGGLES -------------------------------
		// -----------------------------------------------

		ToggleColour
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Colours"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
		
		ToggleColour_Purple
		{
			Type = ModeToggle
			Mode = ToggleColour
			OnMode = 0
		}
		ToggleColour_Blue :		ToggleColour_Purple	{ OnMode = 1 }
		ToggleColour_Orange :	ToggleColour_Purple	{ OnMode = 2 }
		ToggleColour_Red :		ToggleColour_Purple	{ OnMode = 3 }
		ToggleColour_Yellow :	ToggleColour_Purple	{ OnMode = 4 }
		ToggleColour_Green :	ToggleColour_Purple	{ OnMode = 5 }

		// -----------------------------------------------
		// DISPLAY TOGGLES -------------------------------
		// -----------------------------------------------
		
		ToggleDisplay
		{
			Type = UIToggle
			ToggleID = "Kebechet_ToggleID_Display"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleDisplay_On
		{
			Type = ModeToggle
			Mode = ToggleDisplay
			OnMode = 0
		}

		ToggleDisplay_Off : ToggleDisplay_On	{ OnMode = 1 }
		
		// -----------------------------------------------
		// ROTATION TOGGLES -------------------------------
		// -----------------------------------------------
		
		ToggleRotation
		{
			Type = UIToggle
			ToggleID = "ToggleID_RingsDirection"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ToggleRotation_Right
		{
			Type = ModeToggle
			Mode = ToggleRotation
			OnMode = 0
		}

		ToggleRotation_Left : ToggleRotation_Right	{ OnMode = 1 }
		
		// -----------------------------------------------
		// PROXY -----------------------------------------
		// -----------------------------------------------
		
		ColoursProxy
		{
			Type = ToggleProxy
			ComponentID = ColoursSet
		}
		ColoursSet
		{
			Type = MultiToggle
			Toggles = [ToggleColour_Purple, ToggleColour_Blue, ToggleColour_Orange, ToggleColour_Red, ToggleColour_Yellow, ToggleColour_Green]
			Mode = Any
		}

		DisplayProxy
		{
			Type = ToggleProxy
			ComponentID = DisplaySet
		}
		DisplaySet
		{
			Type = MultiToggle
			Toggles = [ToggleDisplay_Off, ToggleDisplay_On]
			Mode = Any
		}

		// --------------------------------- END TOGGLES
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, CombinedBatteryStorage, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL, IsOperational_AllSegments_ToggleProxy] // There is no problem with CombinedBatteryStorage and IsOperational_AllSegments_ToggleProxy, as the first one can never be depleated without first depleating the second one due to RemoveMode
			Mode = All
		}
		
		CanOperate
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle, &~/Part/^/0/OVERCLOCK_OPERATIONAL]
			Mode = All
		}
		
		IsModular
		{
			Type = BuffToggle
			BuffType = BubbleCapacityReversed
		}
		
		Size	// Used for Modular Shield Batteries to know that they connected to a Small Bubble Shield
		{
			Type = StaticValue
			Value = 1
		}
		
		IsOperationalBubble
		{
			Type = ToggleProxy
			ComponentID = IsOperational
		}
		
		IsOperationalNonOverclocked
		{
			Type = MultiToggle
			Toggles = [	IsOperational, { Toggle=IsOverclocked; Invert=true } ]
			Mode = All
		}

		CommandConsumptionToggle
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ScorchedToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		ScorchedToggle
		{
			Type = StatusToggle
			StatusType = cosmoteer.scorched
			MinStatusValue = 1
			Invert = true
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = CommandConsumptionToggle
			CommandPoints = 4
		}

		// Normal Batteries

		BatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			IsDrainable = true
			ResourceStorages = [CombinedBatteryStorage_Front, CombinedBatteryStorage_Right, CombinedBatteryStorage_Back, CombinedBatteryStorage_Left]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			RemoveMode = DistributeEvenly
			DrainResistance
			{
				BaseValue = 0
				Modifiers
				[
					{
						Type = BuffRemap
						BuffType = Overclock
						ModificationMode = Add
						RemapFrom = [0, 1]
						RemapTo = [0, (&~/OVERCLOCK/EMP_RESIST)]
					}
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Subtract
					}
				]
			}
		}
		ProgressBarSegments
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}

		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage_Front, BatteryStorage_Right, BatteryStorage_Back, BatteryStorage_Left]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			AddMode = DistributeEvenly
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = CombinedBatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		// All Segments Toggle
		
		Base_BatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage_Front, BatteryStorage_Right, BatteryStorage_Back, BatteryStorage_Left]
			ToggleOnResources = 7001
		}
		
		IsOperational_AllSegments_On
		{
			Type = MultiToggle
			Toggles = [IsOperational_SegmentSmallFront_On, IsOperational_SegmentSmallRight_On, IsOperational_SegmentSmallBack_On, IsOperational_SegmentSmallLeft_On]
			Mode = All
		}
		IsOperational_AllSegments_Off : IsOperational_AllSegments_On	{ Toggles = [IsOperational_SegmentSmallFront_Off, IsOperational_SegmentSmallRight_Off, IsOperational_SegmentSmallBack_Off, IsOperational_SegmentSmallLeft_Off] }
		IsOperational_AllSegments_TriggerOn
		{
			Type = ToggleTrigger
			Toggle = IsOperational_AllSegments_On
			TriggerWhenOn = true
			TriggerWhenOff = false
		}
		IsOperational_AllSegments_TriggerOff :	IsOperational_AllSegments_TriggerOn
		{
			Toggle = IsOperational_AllSegments_Off
			TriggerWhenOn = false
			TriggerWhenOff = true
		}
		IsOperational_AllSegments_Toggle
		{
			Type = TriggeredToggle
			OnTrigger = IsOperational_AllSegments_TriggerOn
			OffTrigger = IsOperational_AllSegments_TriggerOff
		}
		IsOperational_AllSegments_ToggleProxy
		{
			Type = MultiToggle
			Toggles = [{Toggle=IsModular; Invert=true}, IsOperational_AllSegments_Toggle]
			Mode = Any
		}
		
		// Segments
		
		IsOperational_SegmentSmallFront_On
		{
			Type = MultiToggle
			Toggles = [BatteryStorage_Front, CanOperate]	// The battery is added otherwise if you build a new Bubble Shield connected to a fully loaded Modular Shield Batteries it won't trigger. The CanOperate is added otherwise if you disable the overclock, togglepower or is scorched it won't trigger.
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_Top, BuffProvider_Right, BuffProvider_Bottom, BuffProvider_Left]
				ComponentID = IsOperational_ModularProxy_SmallFront
			}
			Mode = All
		}
		IsOperational_SegmentSmallRight_On :	IsOperational_SegmentSmallFront_On
		{
			Toggles = [BatteryStorage_Right, CanOperate]
			ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallRight }
		}
		IsOperational_SegmentSmallBack_On :	IsOperational_SegmentSmallFront_On
		{
			Toggles = [BatteryStorage_Back, CanOperate]
			ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallBack }
		}
		IsOperational_SegmentSmallLeft_On :	IsOperational_SegmentSmallFront_On
		{
			Toggles = [BatteryStorage_Left, CanOperate]
			ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallLeft }
		}
		
		IsOperational_SegmentSmallFront_Off
		{
			Type = MultiToggle
			Toggles = [BatteryStorage_Front]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_Top, BuffProvider_Right, BuffProvider_Bottom, BuffProvider_Left]
				ComponentID = IsOperational_ModularProxy_SmallFront
			}
			Invert = true
			Mode = Any
		}
		IsOperational_SegmentSmallRight_Off :	IsOperational_SegmentSmallFront_Off
		{
			Toggles = [BatteryStorage_Right]
			ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallRight }
		}
		IsOperational_SegmentSmallBack_Off :	IsOperational_SegmentSmallFront_Off
		{
			Toggles = [BatteryStorage_Back]
			ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallBack }
		}
		IsOperational_SegmentSmallLeft_Off :	IsOperational_SegmentSmallFront_Off
		{
			Toggles = [BatteryStorage_Left]
			ViaBuffs :	^/0/ViaBuffs	{ ComponentID = IsOperational_ModularProxy_SmallLeft }
		}
		
		IsOperational_SegmentSmallFront_TriggerOn
		{
			Type = ToggleTrigger
			Toggle = IsOperational_SegmentSmallFront_On
			TriggerWhenOn = true
			TriggerWhenOff = false
		}
		IsOperational_SegmentSmallRight_TriggerOn :	IsOperational_SegmentSmallFront_TriggerOn	{ Toggle = IsOperational_SegmentSmallRight_On }
		IsOperational_SegmentSmallBack_TriggerOn :	IsOperational_SegmentSmallFront_TriggerOn	{ Toggle = IsOperational_SegmentSmallBack_On }
		IsOperational_SegmentSmallLeft_TriggerOn :	IsOperational_SegmentSmallFront_TriggerOn	{ Toggle = IsOperational_SegmentSmallLeft_On }
				
		IsOperational_SegmentSmallFront_TriggerOff
		{
			Type = ToggleTrigger
			Toggle = IsOperational_SegmentSmallFront_Off
			TriggerWhenOn = true
			TriggerWhenOff = false
		}
		IsOperational_SegmentSmallRight_TriggerOff :	IsOperational_SegmentSmallFront_TriggerOff	{ Toggle = IsOperational_SegmentSmallRight_Off }
		IsOperational_SegmentSmallBack_TriggerOff :		IsOperational_SegmentSmallFront_TriggerOff	{ Toggle = IsOperational_SegmentSmallBack_Off }
		IsOperational_SegmentSmallLeft_TriggerOff :		IsOperational_SegmentSmallFront_TriggerOff	{ Toggle = IsOperational_SegmentSmallLeft_Off }
		
		IsOperational_SegmentSmallFront_Toggle
		{
			Type = TriggeredToggle
			OnTrigger = IsOperational_SegmentSmallFront_TriggerOn
			OffTrigger = IsOperational_SegmentSmallFront_TriggerOff
		}
		IsOperational_SegmentSmallRight_Toggle :	IsOperational_SegmentSmallFront_Toggle
		{
			OnTrigger = IsOperational_SegmentSmallRight_TriggerOn
			OffTrigger = IsOperational_SegmentSmallRight_TriggerOff
		}
		IsOperational_SegmentSmallBack_Toggle :	IsOperational_SegmentSmallFront_Toggle
		{
			OnTrigger = IsOperational_SegmentSmallBack_TriggerOn
			OffTrigger = IsOperational_SegmentSmallBack_TriggerOff
		}
		IsOperational_SegmentSmallLeft_Toggle :	IsOperational_SegmentSmallFront_Toggle
		{
			OnTrigger = IsOperational_SegmentSmallLeft_TriggerOn
			OffTrigger = IsOperational_SegmentSmallLeft_TriggerOff
		}
		
		IsOperational_SegmentSmallFront_ToggleProxy
		{
			Type = MultiToggle
			Toggles = [{Toggle=IsModular; Invert=true}, IsOperational_SegmentSmallFront_Toggle]
			Mode = Any
		}
		IsOperational_SegmentSmallRight_ToggleProxy :	IsOperational_SegmentSmallFront_ToggleProxy	{ Toggles = [{Toggle=IsModular; Invert=true}, IsOperational_SegmentSmallRight_Toggle] }
		IsOperational_SegmentSmallBack_ToggleProxy :	IsOperational_SegmentSmallFront_ToggleProxy	{ Toggles = [{Toggle=IsModular; Invert=true}, IsOperational_SegmentSmallBack_Toggle] }
		IsOperational_SegmentSmallLeft_ToggleProxy :	IsOperational_SegmentSmallFront_ToggleProxy	{ Toggles = [{Toggle=IsModular; Invert=true}, IsOperational_SegmentSmallLeft_Toggle] }
		
		IsOperational_SmallFront
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage_Front, ScorchedToggle, IsOperational, IsOperational_SegmentSmallFront_ToggleProxy]
			Mode = All
		}
		IsOperational_SmallRight :	IsOperational_SmallFront { Toggles = [PowerToggle, BatteryStorage_Right, ScorchedToggle, IsOperational, IsOperational_SegmentSmallRight_ToggleProxy] }
		IsOperational_SmallBack :	IsOperational_SmallFront { Toggles = [PowerToggle, BatteryStorage_Back, ScorchedToggle, IsOperational, IsOperational_SegmentSmallBack_ToggleProxy] }
		IsOperational_SmallLeft :	IsOperational_SmallFront { Toggles = [PowerToggle, BatteryStorage_Left, ScorchedToggle, IsOperational, IsOperational_SegmentSmallLeft_ToggleProxy] }
		
		IsOperationalOverloaded_Front
		{
			Type = MultiToggle
			Toggles = [IsOperational_SmallFront, IsOperationalOverloaded]
			Mode = All
		}
		IsOperationalOverloaded_Right :	IsOperationalOverloaded_Front	{ Toggles = [IsOperational_SmallRight, IsOperationalOverloaded] }
		IsOperationalOverloaded_Back :	IsOperationalOverloaded_Front	{ Toggles = [IsOperational_SmallBack, IsOperationalOverloaded] }
		IsOperationalOverloaded_Left :	IsOperationalOverloaded_Front	{ Toggles = [IsOperational_SmallLeft, IsOperationalOverloaded] }
		
		OverclockedEffectToggle_Front
		{
			Type = MultiToggle
			Toggles = [IsOperational_SmallFront, OverclockedEffectToggle]
			Mode = All
		}
		OverclockedEffectToggle_Right :	OverclockedEffectToggle_Front	{ Toggles = [IsOperational_SmallRight, OverclockedEffectToggle] }
		OverclockedEffectToggle_Back :	OverclockedEffectToggle_Front	{ Toggles = [IsOperational_SmallBack, OverclockedEffectToggle] }
		OverclockedEffectToggle_Left :	OverclockedEffectToggle_Front	{ Toggles = [IsOperational_SmallLeft, OverclockedEffectToggle] }
		
		IsOperationalOverclockedOverloaded_Front
		{
			Type = MultiToggle
			Toggles = [IsOperational_SmallFront, IsOperationalOverclockedOverloaded]
			Mode = All
		}
		IsOperationalOverclockedOverloaded_Right :	IsOperationalOverclockedOverloaded_Front	{ Toggles = [IsOperational_SmallRight, IsOperationalOverclockedOverloaded] }
		IsOperationalOverclockedOverloaded_Back :	IsOperationalOverclockedOverloaded_Front	{ Toggles = [IsOperational_SmallBack, IsOperationalOverclockedOverloaded] }
		IsOperationalOverclockedOverloaded_Left :	IsOperationalOverclockedOverloaded_Front	{ Toggles = [IsOperational_SmallLeft, IsOperationalOverclockedOverloaded] }
		
		BatteryStorage_Front
		{
			Type = ResourceStorage
			ResourceType = battery
			IsDrainable = false
			MaxResources = 2000
			ToggleOnResources = 2000
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryStorage_Right :	BatteryStorage_Front	{}
		BatteryStorage_Back :	BatteryStorage_Front	{}
		BatteryStorage_Left :	BatteryStorage_Front	{}
		
		ModularBatteryStorage_Front	// Consumes first the batteries with the most energy, this tries to priorizate the furthest battery first
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = false
			ToggleOnResources = 0
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider_Top, BuffProvider_Right, BuffProvider_Bottom, BuffProvider_Left]
				ComponentID = BatteryStorageProxy_SmallFront
			}
			RemoveMode = PrioritizeMostResources
		}
		ModularBatteryStorage_Right :	ModularBatteryStorage_Front	{ ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallRight } }
		ModularBatteryStorage_Back :	ModularBatteryStorage_Front	{ ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallBack } }
		ModularBatteryStorage_Left :	ModularBatteryStorage_Front	{ ViaBuffs : ^/0/ViaBuffs	{ ComponentID = BatteryStorageProxy_SmallLeft } }
		
		CombinedBatteryStorage_Front	// Consume first the batteries, then the bubble itself
		{
			Type = MultiResourceStorage
			OperationalToggle = IsOperational
			ResourceType = battery
			IsDrainable = false
			ToggleOnResources = 0
			ResourceStorages = [BatteryStorage_Front, ModularBatteryStorage_Front]
			RemoveMode = InReverseOrder
		}
		CombinedBatteryStorage_Right :	CombinedBatteryStorage_Front	{ ResourceStorages = [BatteryStorage_Front, ModularBatteryStorage_Right] }
		CombinedBatteryStorage_Back :	CombinedBatteryStorage_Front	{ ResourceStorages = [BatteryStorage_Back, ModularBatteryStorage_Back] }
		CombinedBatteryStorage_Left :	CombinedBatteryStorage_Front	{ ResourceStorages = [BatteryStorage_Left, ModularBatteryStorage_Left] }
		
		BuffProvider_Drain
		{
			Type = SelfBuffProvider
			BuffType = BubbleDrain
			BuffAmount = {BaseValue = 0; BuffType = BubbleRadius; BuffMode = Add}
		}
		
		PowerDrain_Front
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational_SmallFront
			FromStorage = CombinedBatteryStorage_Front
			FromQuantity = {BaseValue = 38; BuffType = BubbleDrain; BuffMode = Multiply}
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		PowerDrain_Right :	PowerDrain_Front
		{
			OperationalToggle = IsOperational_SmallRight
			FromStorage = CombinedBatteryStorage_Right
		}
		PowerDrain_Back :	PowerDrain_Front
		{
			OperationalToggle = IsOperational_SmallBack
			FromStorage = CombinedBatteryStorage_Back
		}
		PowerDrain_Left :	PowerDrain_Front
		{
			OperationalToggle = IsOperational_SmallLeft
			FromStorage = CombinedBatteryStorage_Left
		}
		
		// Out of Power Toggle
		
		HasEnergy	// The BatteryStorages are the last at being depletead due to RemoveMode and so the segment will be always disabled when they are depleated
		{
			Type = MultiToggle
			Toggles = [BatteryStorage_Front, BatteryStorage_Right, BatteryStorage_Back, BatteryStorage_Left]
			Mode = All
		}
		
		// Modular Battery
		
		BuffProvider_Top
		{
			Type = AreaBuffProvider
			BuffType = BubbleCapacity
			BuffArea = [0, -1, 2, 1]
			OperationalToggle = CanOperate
			Criteria
			{
				Top = -2
				Bottom = 0
			}
		}
		BuffProvider_Right : BuffProvider_Top
		{
			BuffArea = [2, 0, 1, 2]
			Criteria
			{
				Left = 2
				Right = 4
			}
		}
		BuffProvider_Bottom : BuffProvider_Top
		{
			BuffArea = [0, 2, 2, 1]
			Criteria
			{
				Top = 2
				Bottom = 4
			}
		}
		BuffProvider_Left : BuffProvider_Top
		{
			BuffArea = [-1, 0, 1, 2]
			Criteria
			{
				Right = 0
				Left = -2
			}
		}
		
		// Rotation
		
		RotationTime
		{
			Type = ValueAccumulator
			OperationalToggle = IsOperational
			AccumulatingToggle = ToggleRotation_Right
			AccumulationRate
			{
				BaseValue = (&../MaxValue) / 10
				Modifiers
				[
					{
						Type = BuffRemap
						BuffType = Overclock
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, &~/OVERCLOCK/ROTATION_SPEED_FACTOR]
					}
				]
			}
			DissipationRate = &AccumulationRate
			MinValue = 0
			MaxValue = 3
			AccumulationTriggers
			[
				{
					Trigger = RotationTrigger_Right
					Value = 0
					Operation = 2
				}
				{
					Trigger = RotationTrigger_Left
					Value = 3
					Operation = 2
				}
			]
		}
		
		RotationMaxReset
		{
			Type = ThresholdTrigger
			AmountFrom = RotationTime
			MinAmount = &../RotationTime/MaxValue
		}
		RotationMinReset
		{
			Type = ThresholdTrigger
			AmountFrom = RotationTime
			MaxAmount = &../RotationTime/MinValue
		}
		
		RotationTrigger_Right
		{
			Type = TriggerProxy
			ComponentId = RotationMaxReset
			ProxyToggle = ToggleRotation_Right
		}
		RotationTrigger_Left : 	RotationTrigger_Right
		{
			ComponentId = RotationMinReset
			ProxyToggle = ToggleRotation_Left
		}
		
		One	{ Type = StaticValue; Value = -1 }
		Two	{ Type = StaticValue; Value = -2 }
		
		RotationTime2
		{
			Type = MultiValue
			Values = [ RotationTime, One]
			Mode = 0
		}
		RotationTime3
		{
			Type = MultiValue
			Values = [ RotationTime, Two]
			Mode = 0
		}
		
		TransformRotation1
		{
			Type = TransformLerp
			ValueFrom = RotationTime
			Location = [1, 1]
			StartRotation = 0d
			EndRotation = 120d
		}
		TransformRotation2 :		TransformRotation1
		{
			ValueFrom = RotationTime2
			ChainedTo = TransformRotation1
			Location = [0, 0]
		}
		TransformRotationFinal :	TransformRotation2
		{
			ValueFrom = RotationTime3
			ChainedTo = TransformRotation2
		}
		
		// Self Buffs
		
		BuffProvider_Radius
		{
			Type = SelfBuffProvider
			ChainsFromBuffType = BubbleRadius
			BuffType = BubbleRadiusBase
			BuffAmount = { BaseValue=0; BuffType=BubbleRadius; BuffMode=Add; }
		}
		BuffProvider_RadiusOverclocked
		{
			Type = SelfBuffProvider
			ChainsFromBuffType = BubbleRadius
			BuffType = BubbleRadiusOverclock
			BuffAmount = { BaseValue=0; BuffType=BubbleRadius; BuffMode=Add; }
		}
		
		ValueLerp_Radius0
		{
			Type = ValueLerp
			InputValue = Value0
			OutputRange = [ {BaseValue = 0, BuffType = BubbleRadiusBase; BuffMode = Add}, {BaseValue = 0, BuffType = BubbleRadiusOverclock; BuffMode = Add}]
		}
		ValueLerp_Radius1 :	ValueLerp_Radius0	{ InputValue = Value1 }
		
		// All the Update and Value below is to make the ValueLerp update when the Buffs changes. Otherwise, if the buffs changes the OutputRange won't be refreshed.
		
		UpdateTimer
		{
			Type = Timer
			Duration = 1/30
			AutoStart = true
			Repeats = true
		}
		UpdateModes
		{
			Type = ModeCycle
			IncrementTrigger = UpdateTimer
		}
		UpdateMode0
		{
			Type = ModeToggle
			Mode = UpdateModes
			OnMode = 0
		}
		UpdateMode1 :	UpdateMode0	{ OnMode = 1 }
		UpdateMode0Trigger
		{
			Type = ToggleTrigger
			Toggle = UpdateMode0
			TriggerWhenOn = true
			TriggerWhenOff = false
		}
		UpdateMode1Trigger :	UpdateMode0Trigger	{ Toggle = UpdateMode1 }
		ToggleSelector
		{
			Type = TriggeredToggle
			OnTrigger = UpdateMode0Trigger
			OffTrigger = UpdateMode1Trigger
		}
		Constant
		{
			Type = StaticValue
			Value = 2	// Anything works
		}
		Value0
		{
			Type = ToggleValueSelector
			Toggle = ToggleSelector
			ToggleOnValue = Constant
			ToggleOffValue = OverclockStateValue
		}
		Value1 :	Value0
		{
			ToggleOnValue = OverclockStateValue
			ToggleOffValue = Constant
		}
		ValueLerp_RadiusFinal
		{
			Type = ToggleValueSelector
			Toggle = ToggleSelector
			ToggleOffValue = ValueLerp_Radius0
			ToggleOnValue = ValueLerp_Radius1
		}
		
		BuffProvider_Radius_Final
		{
			Type = SelfBuffProvider
			ChainsFromBuffType = BubbleRadius
			BuffType = BubbleRadiusFinal
			BuffAmount = 1.5
			BuffMultiplier = ValueLerp_RadiusFinal
		}
		
		// Disable
		
		IsOperationalProxy
		{
			Type = MultiToggle
			Toggles = [ProxyBatteryStorage]
			Mode = All
		}
		
		ProxyBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 0
			ToggleOnResources = 1
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - START //////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ArcShield : <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/ArcShield
		{
			Radius
			{
				BaseValue = 7
				Modifiers
				[
					{
						Type = Buff
						BuffType = BubbleRadiusFinal
						ModificationMode = Add
					}
				]
			}
			Arc = 90d
			ChainedTo = TransformRotationFinal
			OperationalToggle = IsOperationalProxy
			MAXIMUM_RESISTANCE
			{
				BaseValue = 10
				Modifiers
				[
					{
						Type = ScaledBuff
						BuffType = BubbleResistance
						Scale = 4
						ModificationMode = Add
					}
				]
			}
			PenetrationResistance = [&../MAXIMUM_RESISTANCE, 0]
			DrainResourcesFrom = ProxyBatteryStorage
			ResourceDrainPerDamage
			{
				BaseValue = .4
				Modifiers
				[
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Multiply
						BaseStatusValue = 1
					}
					{
						Type = BuffRemap
						BuffType = Overclock
						ModificationMode = Multiply
						RemapFrom = [0, 1]
						RemapTo = [1, &~/OVERCLOCK/DAMAGE_DRAIN_FACTOR ]
					}
				]
			}
			Rotation = -90d
			Location = [0, 0]

			BlueprintArcSprite	{}

			ShieldMediaEffects
			[
				: &../^/0/ShieldMediaEffects/0
				{
					Radius = &~/Part/Components/ArcShield/Radius/
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = 0
					FadeOutTime = 0
					ArcSprite : ^/0/ArcSprite
					{
						_xScale = 1
						Size = [0, 1.5]
					}
				}
				: &../^/0/ShieldMediaEffects/1	{}
			]

		}

		OverclockModeToggle_Invert
		{
			Type = MultiToggle
			Toggles = [OverclockModeToggle]
			Invert = true
			Mode = All
		}

		BlueprintArc_Front
		{
			Type = ArcSprite
			VisibilityToggle = OverclockModeToggle_Invert
			Location = [&../../TransformRotation1/Location/0, &../../TransformRotation1/Location/1]
			Rotation = &<stats.rules>/Stats/ArcShield_Front/Rotation
			Radius = &../ArcShield/Radius/BaseValue
			Arc = &../ArcShield/Arc
			SpriteSegments = &../ArcShield/BlueprintArcSpriteSegments
			Sprite : &../ArcShield/^/0/BlueprintArcSprite	{}
		}
		BlueprintArc_Right :	BlueprintArc_Front	{ Rotation = &<stats.rules>/Stats/ArcShield_Right/Rotation }
		BlueprintArc_Back :		BlueprintArc_Front	{ Rotation = &<stats.rules>/Stats/ArcShield_Back/Rotation }
		BlueprintArc_Left :		BlueprintArc_Front	{ Rotation = &<stats.rules>/Stats/ArcShield_Left/Rotation }

		OverclockTweenToggle
		{
			Type = ThresholdToggle
			ValueFrom = OverclockStateValue
			MinAmount = 1
		}
		
		OverclockedEffectToggle
		{
			Type = MultiToggle
			Toggles = [OverclockTweenToggle, IsOperationalOverclocked]
			Mode = All
		}

		Overclock_BlueprintArc_Front :	BlueprintArc_Front
		{
			VisibilityToggle = OverclockModeToggle
			Sprite : &<./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/Overclock_ReinforcedBlueprintArc/Sprite	{}
		}
		Overclock_BlueprintArc_Right :	Overclock_BlueprintArc_Front	{ Rotation = &<stats.rules>/Stats/ArcShield_Right/Rotation }
		Overclock_BlueprintArc_Back :	Overclock_BlueprintArc_Front	{ Rotation = &<stats.rules>/Stats/ArcShield_Back/Rotation }
		Overclock_BlueprintArc_Left :	Overclock_BlueprintArc_Front	{ Rotation = &<stats.rules>/Stats/ArcShield_Left/Rotation }

		OverclockEffect :	&<./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/Overclock_ReinforcedEffect
		{
			OperationalToggle = IsOperationalProxy
			ContinuousEffects
			[
				: ../^/0/ContinuousEffects/0
				{
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
				}
			]
		}
        
		OverloadValue
		{
			Type = BuffableValue
			Value
			{
				BaseValue = 0
				Modifiers
				[
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Replace
						BaseStatusValue = 0
					}
				]
			}
		}
		
		IsOverloaded
		{
			Type = ThresholdToggle
			ValueFrom = OverloadValue
			MinAmount = 0.01
		}
		
		IsOperationalOverloaded
		{
			Type = MultiToggle
			Toggles = [ IsOperational, IsOverloaded ]
			Mode = All
		}
		
		IsOperationalOverclockedOverloaded
		{
			Type = MultiToggle
			Toggles = [ IsOperational, IsOverloaded, OverclockedEffectToggle ]
			Mode = All
		}
		
		OverloadEffect :	&<./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/OverloadEffect
		{
			OperationalToggle = IsOperationalProxy
			ContinuousEffects
			[
				: ../^/0/ContinuousEffects/0
				{
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
				}
			]
		}
		
		OverclockOverloadEffect :	&<./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/Overclock_OverloadEffect_Extended
		{
			OperationalToggle = IsOperationalProxy
			ContinuousEffects
			[
				: ../^/0/ContinuousEffects/0
				{
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
				}
			]
		}

		IsOperationalOverclocked_Front
		{
			Type = MultiToggle
			Toggles = [IsOperational_SmallFront, IsOperationalOverclocked]
			Mode = All
		}
		IsOperationalOverclocked_Right :	IsOperationalOverclocked_Front	{ Toggles = [IsOperational_SmallRight, IsOperationalOverclocked] }
		IsOperationalOverclocked_Back :		IsOperationalOverclocked_Front	{ Toggles = [IsOperational_SmallBack, IsOperationalOverclocked] }
		IsOperationalOverclocked_Left :		IsOperationalOverclocked_Front	{ Toggles = [IsOperational_SmallLeft, IsOperationalOverclocked] }

		// Overclock / Thermal network
		
		BuffProvider_HeatCollection_Top :	BuffProvider_Top
		{
			BuffType = BubbleHeatCollector
			OperationalToggle = IsOperationalOverclocked
		}
		BuffProvider_HeatCollection_Right : BuffProvider_Right
		{
			BuffType = BubbleHeatCollector
			OperationalToggle = IsOperationalOverclocked
		}
		BuffProvider_HeatCollection_Bottom : BuffProvider_Bottom
		{
			BuffType = BubbleHeatCollector
			OperationalToggle = IsOperationalOverclocked
		}
		BuffProvider_HeatCollection_Left : BuffProvider_Left
		{
			BuffType = BubbleHeatCollector
			OperationalToggle = IsOperationalOverclocked
		}
		
		BubbleHeatCollectionStorage
		{
			Type = ResourceStorageProxy
			ResourceType = heat
			ComponentID = &~/Part/^/0/HEAT_TARGET_STORAGE
		}
		
		OverclockHeatProducer_Front
		{
			Type = ResourceConverter
			OperationalToggle = IsOperationalOverclocked_Front
			HEAT_PER_INTERVAL = ceil((&~/OVERCLOCK/HEAT_PER_SECOND) * (&Interval))
			ToQuantity = (&HEAT_PER_INTERVAL) * (&~/HEAT_TO_RESOURCE)
			ToStorage = &~/Part/^/0/HEAT_TARGET_STORAGE
			Interval = 0.5
		}
		OverclockHeatProducer_Right :	OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_Right }
		OverclockHeatProducer_Back :	OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_Back }
		OverclockHeatProducer_Left :	OverclockHeatProducer_Front	{ OperationalToggle = IsOperationalOverclocked_Left }

		OverclockHitHeatProducer
		{
			Type = ResourceChange
			ResourceStorage = &~/Part/^/0/HEAT_TARGET_STORAGE
			// Provides the post-resistance damage value as EffectScale
			Trigger = Overclock_ArcShieldProxy
			Amount
			{
				BaseValue = "round((&~/OVERCLOCK/HEAT_PER_DAMAGE) * (&~/HEAT_TO_RESOURCE), 0)"
				Modifiers
				[
					{
						Type = EffectScale
						ModificationMode = Multiply
					}
					{
						Type = Status
						StatusType = cosmoteer.shield_overload
						ModificationMode = Multiply
						BaseStatusValue = 1
					}
					{
						Type = Buff
						BuffType = Overclock
						ModificationMode = Multiply
					}
				]
			}
		}
		
		Overclock_ArcShieldProxy
		{
			Type = MultiTrigger
			Triggers = [Overclock_ArcShieldProxy_SmallFront, Overclock_ArcShieldProxy_SmallRight, Overclock_ArcShieldProxy_SmallBack, Overclock_ArcShieldProxy_SmallLeft]
		}
		
		Overclock_ArcShieldProxy_SmallFront
		{
			Type = TriggerProxy
			ComponentID = ArcShield_Front
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_SmallRight :		Overclock_ArcShieldProxy_SmallFront
		{
			ComponentID = ArcShield_Right
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_SmallBack :		Overclock_ArcShieldProxy_SmallFront
		{
			ComponentID = ArcShield_Back
			ProxyToggle = IsOperationalOverclocked
		}
		Overclock_ArcShieldProxy_SmallLeft :		Overclock_ArcShieldProxy_SmallFront
		{
			ComponentID = ArcShield_Left
			ProxyToggle = IsOperationalOverclocked
		}

		OverheatEffects : ^/0/OverheatEffects
		{
			Location = [1, 1.5]
		}
		
		Router
		{
			Type = NetworkRouter
			RouteGenerators
			[
				{
					Type = Simple
					HEAT_INPUT = &~/Part/^/0/HEAT_NETWORK_INPUT
					Routes
					[
						[&../../HEAT_INPUT, Port_TL, 0]
						[&../../HEAT_INPUT, Port_TR, 0]
						[&../../HEAT_INPUT, Port_RT, 0]
						[&../../HEAT_INPUT, Port_RB, 0]
						[&../../HEAT_INPUT, Port_BR, 0]
						[&../../HEAT_INPUT, Port_BL, 0]
						[&../../HEAT_INPUT, Port_LB, 0]
						[&../../HEAT_INPUT, Port_LT, 0]
					]
				}
			]
		}
		Port_TL : ~/Part/^/0/BASE_THERMAL_PORT
		{
			Location = [0, 0]
			Direction = Up
		}
		Port_TR : Port_TL
		{
			Location = [1, 0]
		}
		Port_RT : Port_TL
		{
			Location = [1, 0]
			Direction = Right
		}
		Port_RB : Port_RT
		{
			Location = [1, 1]
		}
		Port_BR : Port_TL
		{
			Location = [1, 1]
			Direction = Down
		}
		Port_BL : Port_BR
		{
			Location = [0, 1]
		}
		Port_LB : Port_TL
		{
			Location = [0, 1]
			Direction = Left
		}
		Port_LT : Port_LB
		{
			Location = [0, 0]
		}

		BaseEmitterEffect :	<./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/BaseEmitterEffect
		{
			ChainedTo	// Normally chained to ArcShield, but we don't want it to rotate
			FactorMediaEffectsIntensityWith = CombinedBatteryStorage
			MaxMediaEffectsZoom = 12
			Location = [1 + 1.8, 1]
			OperationalToggle = IsOperationalProxy
			MediaEffects
			[
				: &../^/0/MediaEffects/0
				{
					Radius = 1.8
					Arc = 360d
				}
			]
		}
		EmitterSoundEffects : BaseEmitterEffect, <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/EmitterSoundEffects
		{
			OperationalToggle = &^/1/OperationalToggle	// IsOperationalNonOverclocked
			MediaEffects :	&^/1/MediaEffects	[]
		}
		Overclock_EmitterSoundEffects : BaseEmitterEffect, <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/Overclock_EmitterSoundEffects
		{
			OperationalToggle = &^/1/OperationalToggle	// IsOperationalOverclocked
			MediaEffects :	&^/1/MediaEffects	[]
		}

		ArcShield_ChainProxy_Front
		{
			Type = ChainableProxy
			ComponentID = ArcShield_Front
		}
		ArcShield_ChainProxy_Right :	ArcShield_ChainProxy_Front	{ ComponentID = ArcShield_Right }
		ArcShield_ChainProxy_Back :		ArcShield_ChainProxy_Front	{ ComponentID = ArcShield_Back }
		ArcShield_ChainProxy_Left :		ArcShield_ChainProxy_Front	{ ComponentID = ArcShield_Left }

		ShieldOperationEffects_Front :	<./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/ShieldOperationEffects
		{
			ChainedTo = ArcShield_ChainProxy_Front
			Location = [&~/Part/Components/ArcShield/Radius/BaseValue, 0]
			Toggle = IsOperational_SmallFront
		}
		ShieldOperationEffects_Right :	ShieldOperationEffects_Front
		{
			ChainedTo = ArcShield_ChainProxy_Right
			Toggle = IsOperational_SmallRight
		}
		ShieldOperationEffects_Back :	ShieldOperationEffects_Front
		{
			ChainedTo = ArcShield_ChainProxy_Back
			Toggle = IsOperational_SmallBack
		} 
		ShieldOperationEffects_Left :	ShieldOperationEffects_Front
		{
			ChainedTo = ArcShield_ChainProxy_Left
			Toggle = IsOperational_SmallLeft
		}

		IsOperationalOverclocked_SmallFront
		{
			Type = MultiToggle
			Toggles = [IsOperational_SmallFront, IsOverclocked]
			Mode = All
		}
		IsOperationalOverclocked_SmallRight :	IsOperationalOverclocked_SmallFront	{ Toggles = [IsOperational_SmallRight, IsOverclocked] }
		IsOperationalOverclocked_SmallBack :	IsOperationalOverclocked_SmallFront	{ Toggles = [IsOperational_SmallBack, IsOverclocked] }
		IsOperationalOverclocked_SmallLeft :	IsOperationalOverclocked_SmallFront	{ Toggles = [IsOperational_SmallLeft, IsOverclocked] }

		Overclock_StartEffects_Front :	ShieldOperationEffects_Front, <./Data/ships/terran/shield_gen_small/shield_gen_small.rules>/Part/Components/Overclock_ShieldReinforcedEffects
		{
			Toggle = IsOperationalOverclocked_SmallFront
			ToggledOffMediaEffects
			ToggledOnMediaEffects : &^/1/ToggledOnMediaEffects	[]
		}
		Overclock_StartEffects_Right :	Overclock_StartEffects_Front	{ Toggle = IsOperationalOverclocked_SmallRight }
		Overclock_StartEffects_Back :	Overclock_StartEffects_Front	{ Toggle = IsOperationalOverclocked_SmallBack }
		Overclock_StartEffects_Left :	Overclock_StartEffects_Front	{ Toggle = IsOperationalOverclocked_SmallLeft }
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ARCSHIELD ORIGINAL - END ////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		Shield_Doodad_Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_high"
				//Offset = [0, 0]
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [2, 2]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe_RotSpeed_0DMG
					}
					{
						File = "doodad_axe_33.png"
						NormalsFile = "doodad_axe_normals_33.png"
						Size = [2, 2]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe_RotSpeed_33DMG
					}
					{
						File = "doodad_axe_66.png"
						NormalsFile = "doodad_axe_normals_66.png"
						Size = [2, 2]
						RotSpeed = &<../colors.rules>/StatsCommon/DoodadAxe_RotSpeed_66DMG
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodad_axe.png"
						NormalsFile = "doodad_axe_normals.png"
						Size = [2, 2]
					}
					{
						File = "doodad_axe_33.png"
						NormalsFile = "doodad_axe_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "doodad_axe_66.png"
						NormalsFile = "doodad_axe_normals_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
					{
						File = "floor_33.png"
						Size = [2, 2]
					}
					{
						File = "floor_66.png"
						Size = [2, 2]
					}
				]
			}
			
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 1]
			ResourceStorage = CombinedBatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 2]
				}
				{
					File = "batteries2.png"
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Size = [2, 2]
				}
				{
					File = "batteries4.png"
					Size = [2, 2]
				}
				{
					File = "batteries5.png"
					Size = [2, 2]
				}
				{
					File = "batteries6.png"
					Size = [2, 2]
				}
				{
					File = "batteries7.png"
					Size = [2, 2]
				}
				{
					File = "batteries8.png"
					Size = [2, 2]
				}
			]
		}
				
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		ScorchedTrigger
		{
			Type = ToggleTrigger
			Toggle = ScorchedToggle
			TriggerWhenOn = false
		}

		ScorchedEffects
		{
			Type = TriggeredEffects
			Trigger = ScorchedTrigger
			Location = &../DestroyedEffects/Location
			MediaEffects = &/COMMON_EFFECTS/MedPartScorched
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Scorched
				{
					Toggle = ScorchedToggle
					AtlasSprite = &/INDICATORS/Scorched
					HidesIndicators = [1,2,3]
				}
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Resetting from overclock
				{
					Toggle = &~/Part/^/0/OVERCLOCK_OPERATIONAL
					AtlasSprite : /INDICATORS/OverclockReset
					{
						Size = [1, 1]
					}
					HidesIndicators = [3]
				}

				// Out of power.
				{
					Toggle = HasEnergy
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
		
		HeatGenerationValue
		{
			Type = StaticValue
			Value = (&~/OVERCLOCK/HEAT_PER_SECOND)
		}
		HeatGenerationStatProvider
		{
			Type = StatProvider
			Stat = HeatGeneration
			OperationalToggle = OverclockModeToggle
			ValueFrom = HeatGenerationValue
		}
	}

	Stats
	{
		PowerCapacity = (&../StatsByCategory/1/Stats/SEGMENT_CAPACITY) * (&../StatsByCategory/0/Stats/SHIELD_SEGMENTS)

		RecPower = (&../StatsByCategory/0/Stats/PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
	}
	
	StatsByCategory
	[
		{
			NameKey = "StatCategories/ShieldBubbleSmall"
			Stats
			{
				ShieldRadius = (&~/Part/Components/ArcShield/Radius/BaseValue) - (&~/Part/Components/ArcShield/Location/1)
				ROTATION_SECONDS = (&~/Part/Components/RotationTime/MaxValue) / (&~/Part/Components/RotationTime/AccumulationRate/BaseValue)
				ShieldSpeed = 360 / (&ROTATION_SECONDS)
				SHIELD_SEGMENTS = 4
				PowerUsageContinuous = (&~/Part/Components/PowerDrain_Front/FromQuantity/BaseValue) / (&~/Part/Components/PowerDrain_Front/Interval) / 1000 * (&SHIELD_SEGMENTS)
			}
		}
		{
			NameKey = "StatCategories/ShieldSegmentSmall"
			Stats
			{
				ShieldHP = (&~/Part/Components/BatteryStorage_Front/MaxResources) / (&~/Part/Components/ArcShield/ResourceDrainPerDamage/BaseValue)
				ShieldPenResist = &~/Part/Components/ArcShield/PenetrationResistance/0/BaseValue
				ShieldArc = deg(&~/Part/Components/ArcShield/Arc)
				SEGMENT_CAPACITY = (&~/Part/Components/BatteryStorage_Front/MaxResources) / 1000
			}
		}
	]
	
	StatsNotesKey = "Stats/BubbleNotes"
	
	SecondaryToolTip
	{
		TitleKey = "StatCategories/Overclocked"
		DescriptionKey = "Parts/KebechetSTLmodularShieldOverclockDesc"
		StatsByCategory
		[
			{
				NameKey = "StatCategories/ShieldBubbleSmall"
				Stats
				{
					ROTATION_SECONDS = (&~/Part/StatsByCategory/0/Stats/ROTATION_SECONDS) / (&~/OVERCLOCK/ROTATION_SPEED_FACTOR)
					ShieldSpeed = 360 / (&ROTATION_SECONDS)
					EMPResistPercentage = (&~/OVERCLOCK/EMP_RESIST) * 100
					HeatGeneration = (&~/OVERCLOCK/HEAT_PER_SECOND) * (&~/Part/StatsByCategory/0/Stats/SHIELD_SEGMENTS)
					HeatPerDamage = (&~/OVERCLOCK/HEAT_PER_DAMAGE)
				}
			}
			{
				NameKey = "StatCategories/ShieldSegmentSmall"
				Stats
				{
					ShieldHP = (&~/Part/StatsByCategory/1/Stats/ShieldHP) / (&~/OVERCLOCK/DAMAGE_DRAIN_FACTOR)	
				}
			}
		]
		
		StatsNotesKey = "Stats/BubbleOverclockNotes"
	}
}